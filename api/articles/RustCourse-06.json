{"title":"初识 Rust(6) | 方法, 泛型, Trait, 生命周期, 集合类型","uid":"91ba0ade330f247ed224e1b5c95f6039","slug":"RustCourse-06","date":"2021-06-08T12:32:17.000Z","updated":"2024-03-06T02:36:48.107Z","comments":true,"path":"api/articles/RustCourse-06.json","keywords":"Programming, Web, Frontend, Backend ,Rust, Blog, Aurora, Fontlos, 芳塔洛斯","cover":"https://fontlos.com/cover/ferris.png","content":"<h1 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h1><p>Rust 通过 <code>impl</code> 关键字在 <code>struct</code> , <code>enum</code> 或者 <code>trait</code> 对象的上下文实现方法调用语法, 一个对象可以有多个 <code>impl</code> 块. 关联函数的第一个参数通常为 <code>self</code> 参数, 一个指代方法或 Trait 类型的别名, 有 3 种变体:</p>\n<ul>\n<li><code>self</code>, 允许实现者移动和修改对象, 对应的闭包特性为 <code>FnOnce</code></li>\n<li><code>&amp;self</code>, 既不允许实现者移动对象也不允许修改, 对应的闭包特性为 <code>Fn</code></li>\n<li><code>&amp;mut self</code>, 允许实现者修改对象但不允许移动, 对应的闭包特性为 <code>FnMut</code></li>\n</ul>\n<p>还有一个 <code>Self</code> 是用于主带当前的实例对象</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">/// 矩形结构体</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">struct</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Rectangular</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">width</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E5C07B\">u32</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">height</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E5C07B\">u32</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// 为该结构体创建方法</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">impl</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Rectangular</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">    /// 创建矩形</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">    // 不含 self 参数的方法也称为静态方法</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">new</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">width</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E5C07B\">u32</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">height</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E5C07B\">u32</span><span style=\"color: #ABB2BF\">) -&gt; </span><span style=\"color: #E5C07B\">Rectangular</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #E5C07B\">Rectangular</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">            </span><span style=\"color: #E06C75\">width</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">            </span><span style=\"color: #E06C75\">height</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        }</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">    /// 快速创建正方形</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">square</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">size</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E5C07B\">u32</span><span style=\"color: #ABB2BF\">) -&gt; </span><span style=\"color: #E5C07B\">Self</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #E5C07B\">Rectangular</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">            </span><span style=\"color: #E06C75\">width</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E06C75\">size</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">            </span><span style=\"color: #E06C75\">height</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E06C75\">size</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        }</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">    /// 获得矩形宽</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">get_width</span><span style=\"color: #ABB2BF\">(&amp;</span><span style=\"color: #E5C07B\">self</span><span style=\"color: #ABB2BF\">) -&gt; </span><span style=\"color: #E5C07B\">u32</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #E5C07B\">self</span><span style=\"color: #ABB2BF\">.width</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">    /// 获得矩形长</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">get_height</span><span style=\"color: #ABB2BF\">(&amp;</span><span style=\"color: #E5C07B\">self</span><span style=\"color: #ABB2BF\">) -&gt; </span><span style=\"color: #E5C07B\">u32</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #E5C07B\">self</span><span style=\"color: #ABB2BF\">.height</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">    /// 求矩形面积</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">area</span><span style=\"color: #ABB2BF\">(&amp;</span><span style=\"color: #E5C07B\">self</span><span style=\"color: #ABB2BF\">) -&gt; </span><span style=\"color: #E5C07B\">u32</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #E5C07B\">self</span><span style=\"color: #ABB2BF\">.width * </span><span style=\"color: #E5C07B\">self</span><span style=\"color: #ABB2BF\">.height</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">    /// 求矩形对角线</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">diagonal</span><span style=\"color: #ABB2BF\">(&amp;</span><span style=\"color: #E5C07B\">self</span><span style=\"color: #ABB2BF\">) -&gt; </span><span style=\"color: #E5C07B\">f64</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">x</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">self</span><span style=\"color: #ABB2BF\">.width </span><span style=\"color: #C678DD\">as</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">f64</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">y</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">self</span><span style=\"color: #ABB2BF\">.height </span><span style=\"color: #C678DD\">as</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">f64</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">z</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">x</span><span style=\"color: #ABB2BF\"> * </span><span style=\"color: #E06C75\">x</span><span style=\"color: #ABB2BF\"> + </span><span style=\"color: #E06C75\">y</span><span style=\"color: #ABB2BF\"> * </span><span style=\"color: #E06C75\">y</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #E06C75\">z</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">sqrt</span><span style=\"color: #ABB2BF\">()</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">main</span><span style=\"color: #ABB2BF\">() {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">a</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Rectangular</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #61AFEF\">new</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #D19A66\">10</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">20</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">b</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">a</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">area</span><span style=\"color: #ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;这个矩形的面积是: {}&quot;</span><span style=\"color: #ABB2BF\">,</span><span style=\"color: #E06C75\">b</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">c</span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Rectangular</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #61AFEF\">square</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #D19A66\">20</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">d</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">c</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">area</span><span style=\"color: #ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;这个正方形的面积是: {}&quot;</span><span style=\"color: #ABB2BF\">,</span><span style=\"color: #E06C75\">d</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">e</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Rectangular</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #61AFEF\">new</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #D19A66\">3</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">4</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">f</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">e</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">diagonal</span><span style=\"color: #ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;这个矩形的对角线是:{}&quot;</span><span style=\"color: #ABB2BF\">,</span><span style=\"color: #E06C75\">f</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">g</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Rectangular</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #61AFEF\">new</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #D19A66\">10</span><span style=\"color: #ABB2BF\">,</span><span style=\"color: #D19A66\">40</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;这个矩形的长是: {}, 宽是: {}&quot;</span><span style=\"color: #ABB2BF\">,</span><span style=\"color: #E06C75\">g</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">get_width</span><span style=\"color: #ABB2BF\">(),</span><span style=\"color: #E06C75\">g</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">get_height</span><span style=\"color: #ABB2BF\">());</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span></code></pre></div><h1 id=\"泛型\"><a href=\"#泛型\" class=\"headerlink\" title=\"泛型\"></a>泛型</h1><p>Rust 作为一门强类型语言, 如果一个函数的参数类型定义为 <code>i32</code>, 那它就无法接受 <code>i16</code> 的参数. 但在编程中, 经常需要用一个函数处理不同类型的数据, 例如两个数的加法, 无论是整数还是浮点数, 甚至是自定义类型, 都能进行支持. 这时, 就需要用到 <strong>泛型 (Generics)</strong>. 熟悉 <strong>面向对象</strong> 的人可能了解 <strong>多态</strong>, 实际上泛型就是多态的一种, 在类型理论中称作 <strong>参数多态</strong>, 即对于给定参数可以有多种形式的函数或类型. 泛型用于表示任意类型, 但通常我们会对其加以约束</p>\n<p>我们提到的任意类型加法, 可以参考下面的 “例子”, 它还不能够编译, 原因就是缺少约束, 因为在实际中, 也不是任意两个事物就可以相加的</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">add</span><span style=\"color: #ABB2BF\">&lt;</span><span style=\"color: #E5C07B\">T</span><span style=\"color: #ABB2BF\">&gt;(</span><span style=\"color: #E06C75\">a</span><span style=\"color: #ABB2BF\">:</span><span style=\"color: #E5C07B\">T</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">b</span><span style=\"color: #ABB2BF\">:</span><span style=\"color: #E5C07B\">T</span><span style=\"color: #ABB2BF\">) -&gt; </span><span style=\"color: #E5C07B\">T</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">a</span><span style=\"color: #ABB2BF\"> + </span><span style=\"color: #E06C75\">b</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;add i8: {}&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #61AFEF\">add</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #D19A66\">2</span><span style=\"color: #E5C07B\">i8</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">3</span><span style=\"color: #E5C07B\">i8</span><span style=\"color: #ABB2BF\">));</span></span>\n<span class=\"line\"><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;add i32: {}&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #61AFEF\">add</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #D19A66\">20</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">30</span><span style=\"color: #ABB2BF\">));</span></span>\n<span class=\"line\"><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;add f64: {}&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #61AFEF\">add</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #D19A66\">1.23</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">1.23</span><span style=\"color: #ABB2BF\">));</span></span></code></pre></div><h2 id=\"泛型声明\"><a href=\"#泛型声明\" class=\"headerlink\" title=\"泛型声明\"></a>泛型声明</h2><p>还记得 <code>Option</code> 枚举的定义吗, 其中的 <code>T</code> 就是一个泛型, 使得这个枚举可以承载任何值. 在 Rust 中我们习惯使用 <code>T</code> 作为泛型</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">enum</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Option</span><span style=\"color: #ABB2BF\">&lt;</span><span style=\"color: #E5C07B\">T</span><span style=\"color: #ABB2BF\">&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">Some</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E5C07B\">T</span><span style=\"color: #ABB2BF\">),</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">None</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span></code></pre></div><p>相信你已经注意到了, 泛型同样需要先声明再使用, 声明的语法就是 <code>&lt;T&gt;</code>, 泛型参数可以不止一个, 也可以作用于结构体和方法</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">point</span><span style=\"color: #ABB2BF\">&lt;</span><span style=\"color: #E5C07B\">T</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E5C07B\">U</span><span style=\"color: #ABB2BF\">&gt;(</span><span style=\"color: #E06C75\">a</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E5C07B\">T</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">b</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E5C07B\">U</span><span style=\"color: #ABB2BF\">) -&gt; (</span><span style=\"color: #E5C07B\">T</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E5C07B\">U</span><span style=\"color: #ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    (</span><span style=\"color: #E06C75\">a</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">b</span><span style=\"color: #ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">couple</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">point</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">2.0</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">struct</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Point</span><span style=\"color: #ABB2BF\">&lt;</span><span style=\"color: #E5C07B\">T</span><span style=\"color: #ABB2BF\">&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">x</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E5C07B\">T</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">y</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E5C07B\">T</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// 要注意先在 impl 声明泛型, 再在 Point 使用泛型</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">impl</span><span style=\"color: #ABB2BF\">&lt;</span><span style=\"color: #E5C07B\">T</span><span style=\"color: #ABB2BF\">&gt; </span><span style=\"color: #E5C07B\">Point</span><span style=\"color: #ABB2BF\">&lt;</span><span style=\"color: #E5C07B\">T</span><span style=\"color: #ABB2BF\">&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">    // Some function</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// 不仅可以定义泛型, 也能为特定的类型实现特定的方法</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">impl</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Point</span><span style=\"color: #ABB2BF\">&lt;</span><span style=\"color: #E5C07B\">i32</span><span style=\"color: #ABB2BF\">&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">    // Some function</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">int_origin</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Point</span><span style=\"color: #ABB2BF\"> { </span><span style=\"color: #E06C75\">x</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #D19A66\">0</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">y</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #D19A66\">0</span><span style=\"color: #ABB2BF\"> };</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">float_origin</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Point</span><span style=\"color: #ABB2BF\"> { </span><span style=\"color: #E06C75\">x</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #D19A66\">0.0</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">y</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #D19A66\">0.0</span><span style=\"color: #ABB2BF\"> };</span></span></code></pre></div><h2 id=\"Const-泛型\"><a href=\"#Const-泛型\" class=\"headerlink\" title=\"Const 泛型\"></a>Const 泛型</h2><p>上面所提到的泛型都是针对 <strong>类型</strong> 的, 那么有没有针对 <strong>值</strong> 的泛型呢? 可能有人对这个问题本身都无法理解, 值要怎么用泛型? 我们先从数组讲起</p>\n<p>我们知道 <code>[i32; 1]</code> 和 <code>[i32; 2]</code> 是两个不同的数组类型, 无法被同一个固定类型的函数所接受, 但我们可以通过引用, 用 <code>&amp;[i32]</code> 这个类型让固定类型的函数可以接受所有的 <code>i32</code> 元素数组. 随后, 我们又可以用 <code>&amp;[T]</code> 这个类型, 让函数接受所有 (被同一系列 Trait 所约束) 的数组</p>\n<p>比如为了打印数组, 我们最终可以实现:</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">display_array</span><span style=\"color: #ABB2BF\">&lt;</span><span style=\"color: #E5C07B\">T</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E5C07B\">std</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #E5C07B\">fmt</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #E5C07B\">Debug</span><span style=\"color: #ABB2BF\">&gt;(</span><span style=\"color: #E06C75\">arr</span><span style=\"color: #ABB2BF\">: &amp;[</span><span style=\"color: #E5C07B\">T</span><span style=\"color: #ABB2BF\">]) {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;{:?}&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">arr</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span></code></pre></div><p>但如果在某种情况下, 不适合或者干脆不能用引用的数组呢? 其实很早之前, 部分第三方库的参数不允许数组超过 32 个元素, 因为迫于着某种原因, 他们需要为每种长度的数组都单数实现一个函数 … 可以说是非常痛苦了, 不过好在, 这种情况已经称为过去式了, 我们拥有了 Const 泛型这种针对于值得泛型, 正好可以很好的处理数组长度的问题</p>\n<p>让我们不通过引用重新实现上面的函数</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">display_array</span><span style=\"color: #ABB2BF\">&lt;</span><span style=\"color: #E5C07B\">T</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E5C07B\">std</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #E5C07B\">fmt</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #E5C07B\">Debug</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #C678DD\">const</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">N</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E5C07B\">usize</span><span style=\"color: #ABB2BF\">&gt;(</span><span style=\"color: #E06C75\">arr</span><span style=\"color: #ABB2BF\">: [</span><span style=\"color: #E5C07B\">T</span><span style=\"color: #ABB2BF\">; </span><span style=\"color: #E5C07B\">N</span><span style=\"color: #ABB2BF\">]) {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;{:?}&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">arr</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span></code></pre></div><p>我们定义了一个类型为 <code>[T; N]</code> 的数组, 其中 <code>T</code> 是一个基于类型的泛型参数, 重点是 <code>N</code> 这个泛型, 它就是我们所说的那个基于值的泛型参数! 因为它用来替代的是数组的长度. 声明语法如上所示, 它基于的值类型是 usize</p>\n<p>在 Const 泛型参数之前, Rust 完全不适合复杂矩阵的运算, 自从有了 Const 泛型, 一切都将改变</p>\n<h2 id=\"泛型的性能\"><a href=\"#泛型的性能\" class=\"headerlink\" title=\"泛型的性能\"></a>泛型的性能</h2><p>对于多态函数，有两种 <strong>派分</strong> 机制: <strong>静态派分</strong> 和 <strong>动态派分</strong>. 前者类似于 C++ 的模板, Rust 会生成适用于指定类型的特殊函数, 然后在被调用的位置进行替换, 好处是允许函数被内联调用, 性能没有损耗, 毕竟这就像是我们为每个类型都手动实现了对应的函数, 但是这会导致代码膨胀, 使最终得二进制文件变大. 后者类似于 Go 的 <code>interface</code>, Rust 通过引入 <strong>Trait Object (特征对象)</strong> 来实现, 在运行期查找 <strong>虚表</strong> 来选择执行的方法. Trait Object 具有和 Trait相同的名称, 通过 <strong>转换</strong> 或者强制 <strong>多态化</strong> 一个指向具体类型的指针来创建, 会带来一定的性能损耗</p>\n<h1 id=\"Trait\"><a href=\"#Trait\" class=\"headerlink\" title=\"Trait\"></a>Trait</h1><p>为了描述类型可以实现的抽象接口, Rust 通过 <strong>Trait (特征)</strong> 来定义 <strong>函数类型签名</strong>, 特性就相当于其他语言中的接口</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// 通过 trait 关键字定义特性</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">trait</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">HasArea</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">    // 这个特性使 area 函数必须接受一个 &amp;eslf 类型, 返回一个 f64 类型</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">area</span><span style=\"color: #ABB2BF\">(&amp;</span><span style=\"color: #E5C07B\">self</span><span style=\"color: #ABB2BF\">) -&gt; </span><span style=\"color: #E5C07B\">f64</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">struct</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Circle</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">x</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E5C07B\">f64</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">y</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E5C07B\">f64</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">radius</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E5C07B\">f64</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">impl</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">HasArea</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">for</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Circle</span><span style=\"color: #ABB2BF\"> {</span><span style=\"color: #7F848E; font-style: italic\">//将特性应用于该结构体</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">area</span><span style=\"color: #ABB2BF\">(&amp;</span><span style=\"color: #E5C07B\">self</span><span style=\"color: #ABB2BF\">) -&gt; </span><span style=\"color: #E5C07B\">f64</span><span style=\"color: #ABB2BF\"> {</span><span style=\"color: #7F848E; font-style: italic\">//实现特性</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #E5C07B\">std</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #E5C07B\">f64</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #E5C07B\">consts</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #D19A66\">PI</span><span style=\"color: #ABB2BF\"> * (</span><span style=\"color: #E5C07B\">self</span><span style=\"color: #ABB2BF\">.radius * </span><span style=\"color: #E5C07B\">self</span><span style=\"color: #ABB2BF\">.radius)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">struct</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Square</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">x</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E5C07B\">f64</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">y</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E5C07B\">f64</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">side</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E5C07B\">f64</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">impl</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">HasArea</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">for</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Square</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">area</span><span style=\"color: #ABB2BF\">(&amp;</span><span style=\"color: #E5C07B\">self</span><span style=\"color: #ABB2BF\">) -&gt; </span><span style=\"color: #E5C07B\">f64</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #E5C07B\">self</span><span style=\"color: #ABB2BF\">.side * </span><span style=\"color: #E5C07B\">self</span><span style=\"color: #ABB2BF\">.side</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span>\n<span class=\"line\"></span></code></pre></div><p>总而言之, <strong>Trait 定义了一组可以被共享的行为, 只要实现了Trait, 就能使用这组行为</strong></p>\n<h2 id=\"特征约束\"><a href=\"#特征约束\" class=\"headerlink\" title=\"特征约束\"></a>特征约束</h2><p>其实在上面的示例中已经有所体现. 这里让我们再举一个例子:</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">print_area</span><span style=\"color: #ABB2BF\">&lt;</span><span style=\"color: #E5C07B\">T</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E5C07B\">HasArea</span><span style=\"color: #ABB2BF\">&gt;(</span><span style=\"color: #E06C75\">shape</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E5C07B\">T</span><span style=\"color: #ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;This shape has an area of {}&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">shape</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">area</span><span style=\"color: #ABB2BF\">());</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span></code></pre></div><p>可以看到函数 <code>print_area()</code> 中的泛型参数 <code>T</code> 被添加了一个名为 <code>HasArea</code> 的 <strong>Trait Bound (特征约束)</strong>, 用以确保任何实现了<code>HasArea</code> 的类型将拥有一个 <code>area</code> 方法. Trait Bound, 可以使用 <code>+</code> 运算符</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">use</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">std</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #E5C07B\">fmt</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #E5C07B\">Debug</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">foo</span><span style=\"color: #ABB2BF\">&lt;</span><span style=\"color: #E5C07B\">T</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E5C07B\">Clone</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E5C07B\">K</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E5C07B\">Clone</span><span style=\"color: #ABB2BF\"> + </span><span style=\"color: #E5C07B\">Debug</span><span style=\"color: #ABB2BF\">&gt;(</span><span style=\"color: #E06C75\">x</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E5C07B\">T</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">y</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E5C07B\">K</span><span style=\"color: #ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">x</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">clone</span><span style=\"color: #ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">y</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">clone</span><span style=\"color: #ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;{:?}&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">y</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span></code></pre></div><p>也可以有条件的实现 Trait, 例如, 标准库为任何实现了 <code>Display trait</code> 的类型实现了 <code>ToString trait</code></p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">impl</span><span style=\"color: #ABB2BF\">&lt;</span><span style=\"color: #E5C07B\">T</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E5C07B\">Display</span><span style=\"color: #ABB2BF\">&gt; </span><span style=\"color: #E5C07B\">ToString</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">for</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">T</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">    // --snip--</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span></code></pre></div><p>现在我们可以修改之前的例子了</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">add</span><span style=\"color: #ABB2BF\">&lt;</span><span style=\"color: #E5C07B\">T</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E5C07B\">std</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #E5C07B\">ops</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #E5C07B\">Add</span><span style=\"color: #ABB2BF\">&lt;</span><span style=\"color: #E5C07B\">Output</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">T</span><span style=\"color: #ABB2BF\">&gt;&gt;(</span><span style=\"color: #E06C75\">a</span><span style=\"color: #ABB2BF\">:</span><span style=\"color: #E5C07B\">T</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">b</span><span style=\"color: #ABB2BF\">:</span><span style=\"color: #E5C07B\">T</span><span style=\"color: #ABB2BF\">) -&gt; </span><span style=\"color: #E5C07B\">T</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">a</span><span style=\"color: #ABB2BF\"> + </span><span style=\"color: #E06C75\">b</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;add i8: {}&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #61AFEF\">add</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #D19A66\">2</span><span style=\"color: #E5C07B\">i8</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">3</span><span style=\"color: #E5C07B\">i8</span><span style=\"color: #ABB2BF\">));</span></span>\n<span class=\"line\"><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;add i32: {}&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #61AFEF\">add</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #D19A66\">20</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">30</span><span style=\"color: #ABB2BF\">));</span></span>\n<span class=\"line\"><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;add f64: {}&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #61AFEF\">add</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #D19A66\">1.23</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">1.23</span><span style=\"color: #ABB2BF\">));</span></span></code></pre></div><p>只有能够加和的类型才能调用这个函数</p>\n<p>有的时候类型约束可能会非常长, 将会是我们的函数签名也变得非常长, 这种时候就可以通过使用 <code>where</code> 关键字</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">bar</span><span style=\"color: #ABB2BF\">&lt;</span><span style=\"color: #E5C07B\">T</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E5C07B\">K</span><span style=\"color: #ABB2BF\">&gt;(</span><span style=\"color: #E06C75\">x</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E5C07B\">T</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">y</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E5C07B\">K</span><span style=\"color: #ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">where</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">T</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E5C07B\">Clone</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">          </span><span style=\"color: #E5C07B\">K</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E5C07B\">Clone</span><span style=\"color: #ABB2BF\"> + </span><span style=\"color: #E5C07B\">Debug</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">{</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">x</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">clone</span><span style=\"color: #ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">y</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">clone</span><span style=\"color: #ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;{:?}&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">y</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span></code></pre></div><p><code>where</code> 从句还允许限定的左侧可以是任意类型, 而不仅仅是类型参数</p>\n<p>定义在 Trait 中的完整方法称为 <strong>默认方法</strong>, 可以被该 Trait 的实现 <strong>重载</strong>. 此外, Trait之间也可以存在 <strong>继承</strong></p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">trait</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">People</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">eat</span><span style=\"color: #ABB2BF\">(&amp;</span><span style=\"color: #E5C07B\">self</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">    // 默认方法</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">greet</span><span style=\"color: #ABB2BF\">(&amp;</span><span style=\"color: #E5C07B\">self</span><span style=\"color: #ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;Hello!&quot;</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        }</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// 继承</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">trait</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Student</span><span style=\"color: #ABB2BF\"> : </span><span style=\"color: #E5C07B\">People</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">study</span><span style=\"color: #ABB2BF\">(&amp;</span><span style=\"color: #E5C07B\">self</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">struct</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Citizen</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">impl</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">People</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">for</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Citizen</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">eat</span><span style=\"color: #ABB2BF\">(&amp;</span><span style=\"color: #E5C07B\">self</span><span style=\"color: #ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;Delicious!&quot;</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">impl</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Student</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">for</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Citizen</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">study</span><span style=\"color: #ABB2BF\">(&amp;</span><span style=\"color: #E5C07B\">self</span><span style=\"color: #ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;Study!&quot;</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span></code></pre></div><p>如果同一个类型实现了两个不同 Trait , 但这两个 Trait 却拥有名称相同的方法, 可以使用 <strong>显式调用</strong> 来避免混淆</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// 短形式</span></span>\n<span class=\"line\"><span style=\"color: #E5C07B\">TraitName</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #61AFEF\">method_name</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">valuable</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// 展开形式</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">&lt;</span><span style=\"color: #E5C07B\">TypeName</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">as</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">TraitName</span><span style=\"color: #ABB2BF\">&gt;::</span><span style=\"color: #61AFEF\">method_name</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">valuable</span><span style=\"color: #ABB2BF\">);</span></span></code></pre></div><h2 id=\"直接用-Trait-作为参数和返回值\"><a href=\"#直接用-Trait-作为参数和返回值\" class=\"headerlink\" title=\"直接用 Trait 作为参数和返回值\"></a>直接用 Trait 作为参数和返回值</h2><p>首先是作为参数</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">display</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">item</span><span style=\"color: #ABB2BF\">: &amp;</span><span style=\"color: #C678DD\">impl</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">ToString</span><span style=\"color: #ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;Display: {}&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">item</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">to_string</span><span style=\"color: #ABB2BF\">());</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span></code></pre></div><p>这看上去非常易懂: <strong>item 是任何实现了 ToString trait 的类型</strong></p>\n<p>同样, 我们也可以返回一个实现了某个 Trait 的任意类型</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">people</span><span style=\"color: #ABB2BF\">() -&gt; </span><span style=\"color: #C678DD\">impl</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">People</span><span style=\"color: #ABB2BF\">{</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">Citizen</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span></code></pre></div><p>但是有一点要注意, 函数的所有分支返回的类型必须是相同的, 这是因为 Rust 要求类型的大小必须在编译期已知, 而返回两种不同的实现了同一 Trait 的类型就会导致无法确定返回值的具体大小, 比如下面的代码无法编译</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">people</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">is_man</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E5C07B\">bool</span><span style=\"color: #ABB2BF\">) -&gt; </span><span style=\"color: #C678DD\">impl</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">People</span><span style=\"color: #ABB2BF\">{</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">if</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">is_man</span><span style=\"color: #ABB2BF\">{</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #E5C07B\">Man</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    } </span><span style=\"color: #C678DD\">else</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #E5C07B\">Woman</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span></code></pre></div><h2 id=\"自动派生\"><a href=\"#自动派生\" class=\"headerlink\" title=\"自动派生\"></a>自动派生</h2><p>我们的文章中已经出现过 <code>#[derive(Debug)]</code>, 它将通过一个 <strong>过程宏</strong> 为一个类型自动实现 <code>Debug trait</code></p>\n<h2 id=\"调用某些方法需要引入对应的-Trait\"><a href=\"#调用某些方法需要引入对应的-Trait\" class=\"headerlink\" title=\"调用某些方法需要引入对应的 Trait\"></a>调用某些方法需要引入对应的 Trait</h2><p><strong>如果你要使用一个特征的方法, 那么你需要将该特征引入当前的作用域中</strong>, 比如下面:</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">use</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">std</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #E5C07B\">convert</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #E5C07B\">TryInto</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">main</span><span style=\"color: #ABB2BF\">() {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">a</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E5C07B\">i32</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">10</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">b</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E5C07B\">u16</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">100</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">b_</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">b</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">try_into</span><span style=\"color: #ABB2BF\">().</span><span style=\"color: #61AFEF\">unwrap</span><span style=\"color: #ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">if</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">a</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">&lt;</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">b_</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;Ten is less than one hundred.&quot;</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span></code></pre></div><p>虽然没有使用 <code>TryInto trait</code>, 但是调用了其下的 <code>try_into()</code> 方法. 但不用担心, 事实上 Rust 已经通过 <code>prelude</code> 引入了 <code>TryInto trait</code> 了, 所以不用担心这些额外的代码, 可以尝试删掉最上面的一行</p>\n<h2 id=\"Trait-的泛型与关联类型\"><a href=\"#Trait-的泛型与关联类型\" class=\"headerlink\" title=\"Trait 的泛型与关联类型\"></a>Trait 的泛型与关联类型</h2><p>Trait 也可以接受泛型参数。但更好的处理方式往往是使用 <strong>关联类型</strong></p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// 泛型参数</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">trait</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Graph</span><span style=\"color: #ABB2BF\">&lt;</span><span style=\"color: #E5C07B\">N</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E5C07B\">E</span><span style=\"color: #ABB2BF\">&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">has_edge</span><span style=\"color: #ABB2BF\">(&amp;</span><span style=\"color: #E5C07B\">self</span><span style=\"color: #ABB2BF\">, &amp;</span><span style=\"color: #E5C07B\">N</span><span style=\"color: #ABB2BF\">, &amp;</span><span style=\"color: #E5C07B\">N</span><span style=\"color: #ABB2BF\">) -&gt; </span><span style=\"color: #E5C07B\">bool</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">edges</span><span style=\"color: #ABB2BF\">(&amp;</span><span style=\"color: #E5C07B\">self</span><span style=\"color: #ABB2BF\">, &amp;</span><span style=\"color: #E5C07B\">N</span><span style=\"color: #ABB2BF\">) -&gt; </span><span style=\"color: #E5C07B\">Vec</span><span style=\"color: #ABB2BF\">&lt;</span><span style=\"color: #E5C07B\">E</span><span style=\"color: #ABB2BF\">&gt;;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">distance</span><span style=\"color: #ABB2BF\">&lt;</span><span style=\"color: #E5C07B\">N</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E5C07B\">E</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E5C07B\">G</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E5C07B\">Graph</span><span style=\"color: #ABB2BF\">&lt;</span><span style=\"color: #E5C07B\">N</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E5C07B\">E</span><span style=\"color: #ABB2BF\">&gt;&gt;(</span><span style=\"color: #E06C75\">graph</span><span style=\"color: #ABB2BF\">: &amp;</span><span style=\"color: #E5C07B\">G</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">start</span><span style=\"color: #ABB2BF\">: &amp;</span><span style=\"color: #E5C07B\">N</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">end</span><span style=\"color: #ABB2BF\">: &amp;</span><span style=\"color: #E5C07B\">N</span><span style=\"color: #ABB2BF\">) -&gt; </span><span style=\"color: #E5C07B\">u32</span><span style=\"color: #ABB2BF\"> {}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// 关联类型</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">trait</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Graph</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">type</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">N</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">type</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">E</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">has_edge</span><span style=\"color: #ABB2BF\">(&amp;</span><span style=\"color: #E5C07B\">self</span><span style=\"color: #ABB2BF\">, &amp;</span><span style=\"color: #E5C07B\">Self</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #E5C07B\">N</span><span style=\"color: #ABB2BF\">, &amp;</span><span style=\"color: #E5C07B\">Self</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #E5C07B\">N</span><span style=\"color: #ABB2BF\">) -&gt; </span><span style=\"color: #E5C07B\">bool</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">edges</span><span style=\"color: #ABB2BF\">(&amp;</span><span style=\"color: #E5C07B\">self</span><span style=\"color: #ABB2BF\">, &amp;</span><span style=\"color: #E5C07B\">Self</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #E5C07B\">N</span><span style=\"color: #ABB2BF\">) -&gt; </span><span style=\"color: #E5C07B\">Vec</span><span style=\"color: #ABB2BF\">&lt;</span><span style=\"color: #E5C07B\">Self</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #E5C07B\">E</span><span style=\"color: #ABB2BF\">&gt;;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">distance</span><span style=\"color: #ABB2BF\">&lt;</span><span style=\"color: #E5C07B\">G</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E5C07B\">Graph</span><span style=\"color: #ABB2BF\">&gt;(</span><span style=\"color: #E06C75\">graph</span><span style=\"color: #ABB2BF\">: &amp;</span><span style=\"color: #E5C07B\">G</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">start</span><span style=\"color: #ABB2BF\">: &amp;</span><span style=\"color: #E5C07B\">G</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #E5C07B\">N</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">end</span><span style=\"color: #ABB2BF\">: &amp;</span><span style=\"color: #E5C07B\">G</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #E5C07B\">N</span><span style=\"color: #ABB2BF\">) -&gt; </span><span style=\"color: #E06C75\">uint</span><span style=\"color: #ABB2BF\"> {}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">struct</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Node</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">struct</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Edge</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">struct</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">SimpleGraph</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">impl</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Graph</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">for</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">SimpleGraph</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">type</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">N</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Node</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">type</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">E</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Edge</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">has_edge</span><span style=\"color: #ABB2BF\">(&amp;</span><span style=\"color: #E5C07B\">self</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">n1</span><span style=\"color: #ABB2BF\">: &amp;</span><span style=\"color: #E5C07B\">Node</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">n2</span><span style=\"color: #ABB2BF\">: &amp;</span><span style=\"color: #E5C07B\">Node</span><span style=\"color: #ABB2BF\">) -&gt; </span><span style=\"color: #E5C07B\">bool</span><span style=\"color: #ABB2BF\"> {}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">edges</span><span style=\"color: #ABB2BF\">(&amp;</span><span style=\"color: #E5C07B\">self</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">n</span><span style=\"color: #ABB2BF\">: &amp;</span><span style=\"color: #E5C07B\">Node</span><span style=\"color: #ABB2BF\">) -&gt; </span><span style=\"color: #E5C07B\">Vec</span><span style=\"color: #ABB2BF\">&lt;</span><span style=\"color: #E5C07B\">Edge</span><span style=\"color: #ABB2BF\">&gt; {}</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">graph</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">SimpleGraph</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">object</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Box</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #61AFEF\">new</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">graph</span><span style=\"color: #ABB2BF\">) </span><span style=\"color: #C678DD\">as</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Box</span><span style=\"color: #ABB2BF\">&lt;</span><span style=\"color: #E5C07B\">Graph</span><span style=\"color: #ABB2BF\">&lt;</span><span style=\"color: #E5C07B\">N</span><span style=\"color: #56B6C2\">=</span><span style=\"color: #E5C07B\">Node</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E5C07B\">E</span><span style=\"color: #56B6C2\">=</span><span style=\"color: #E5C07B\">Edge</span><span style=\"color: #ABB2BF\">&gt;&gt;;</span></span></code></pre></div><p>关联类型是在 Trait 定义的语句块中, 申明一个自定义类型, 这样就可以在特征的方法签名中使用该类型, 通常当类型很复杂时, 关联类型能大大提高代码可读性.</p>\n<p>或者在使用泛型时, 导致函数头部也必须增加泛型的声明, 而使用关联类型会好很多, 对比一下下面的代码</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">trait</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Container</span><span style=\"color: #ABB2BF\">&lt;</span><span style=\"color: #E5C07B\">A</span><span style=\"color: #ABB2BF\">,</span><span style=\"color: #E5C07B\">B</span><span style=\"color: #ABB2BF\">&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">contains</span><span style=\"color: #ABB2BF\">(&amp;</span><span style=\"color: #E5C07B\">self</span><span style=\"color: #ABB2BF\">,</span><span style=\"color: #E06C75\">a</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E5C07B\">A</span><span style=\"color: #ABB2BF\">,</span><span style=\"color: #E06C75\">b</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E5C07B\">B</span><span style=\"color: #ABB2BF\">) -&gt; </span><span style=\"color: #E5C07B\">bool</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">difference</span><span style=\"color: #ABB2BF\">&lt;</span><span style=\"color: #E5C07B\">A</span><span style=\"color: #ABB2BF\">,</span><span style=\"color: #E5C07B\">B</span><span style=\"color: #ABB2BF\">,</span><span style=\"color: #E5C07B\">C</span><span style=\"color: #ABB2BF\">&gt;(</span><span style=\"color: #E06C75\">container</span><span style=\"color: #ABB2BF\">: &amp;</span><span style=\"color: #E5C07B\">C</span><span style=\"color: #ABB2BF\">) -&gt; </span><span style=\"color: #E5C07B\">i32</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #C678DD\">where</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">C</span><span style=\"color: #ABB2BF\"> : </span><span style=\"color: #E5C07B\">Container</span><span style=\"color: #ABB2BF\">&lt;</span><span style=\"color: #E5C07B\">A</span><span style=\"color: #ABB2BF\">,</span><span style=\"color: #E5C07B\">B</span><span style=\"color: #ABB2BF\">&gt; {...}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">trait</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Container</span><span style=\"color: #ABB2BF\">{</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">type</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">A</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">type</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">B</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">contains</span><span style=\"color: #ABB2BF\">(&amp;</span><span style=\"color: #E5C07B\">self</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">a</span><span style=\"color: #ABB2BF\">: &amp;</span><span style=\"color: #E5C07B\">Self</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #E5C07B\">A</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">b</span><span style=\"color: #ABB2BF\">: &amp;</span><span style=\"color: #E5C07B\">Self</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #E5C07B\">B</span><span style=\"color: #ABB2BF\">) -&gt; </span><span style=\"color: #E5C07B\">bool</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">difference</span><span style=\"color: #ABB2BF\">&lt;</span><span style=\"color: #E5C07B\">C</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E5C07B\">Container</span><span style=\"color: #ABB2BF\">&gt;(</span><span style=\"color: #E06C75\">container</span><span style=\"color: #ABB2BF\">: &amp;</span><span style=\"color: #E5C07B\">C</span><span style=\"color: #ABB2BF\">) {}</span></span></code></pre></div><p>还有一点是我们之前提过 <code>Self</code> 用来指代当前调用者的具体类型, 那么如果我们定义了 <code>type Item</code>, 就可以使用 <code>Self::Item</code> 来指代该类型实现中定义的 <code>Item</code> 类型</p>\n<h2 id=\"关于实现-Trait-的几条限制\"><a href=\"#关于实现-Trait-的几条限制\" class=\"headerlink\" title=\"关于实现 Trait 的几条限制:\"></a>关于实现 Trait 的几条限制:</h2><ul>\n<li>如果一个 Trait 不在当前作用域内, 它就不能被实现。</li>\n<li>不管是 Trait 还是 <code>impl</code>, 默认都只能在当前的 Crate 内起作用</li>\n<li>带有 Trait Bound 的泛型函数使用 <strong>单态化实现</strong>, 所以它是 <strong>静态派分</strong> 的</li>\n<li>最重要的一点, 不能为一个从外部引入的类型实现一个从外部引入的 Trait, 这两个至少要有一个是在当前作用域定义的, 这时为了防止你破环第三方库的代码或者第三方库破环你的代码, 比如你不能为 <code>String</code> 类型实现 <code>Display trait</code>. 这被称为 <strong>孤儿原则</strong></li>\n</ul>\n<h2 id=\"绕过孤儿原则\"><a href=\"#绕过孤儿原则\" class=\"headerlink\" title=\"绕过孤儿原则\"></a>绕过孤儿原则</h2><p>可以通过 New Type 模式, 在本地定义一个元组结构体包裹外部类型, 然后为这个元组结构体实现外部 Trait</p>\n<h1 id=\"容器类型\"><a href=\"#容器类型\" class=\"headerlink\" title=\"容器类型\"></a>容器类型</h1><h2 id=\"动态数组\"><a href=\"#动态数组\" class=\"headerlink\" title=\"动态数组\"></a>动态数组</h2><p>之前我们提到, Rust 的数组是不可变的, 而可变的动态数组, 我们称之为 <strong>Vec (向量)</strong>. 动态数组是一种基于堆内存申请的连续动态数据类型，拥有 O(1) 时间复杂度的索引, 压入 (push), 弹出 (pop)</p>\n<p>动态数组在连续的内存空间储存多个值, 因此访问其中某个元素的成本非常低, 但同样只能存储相同类型的元素, 如果需要存储不同类型的元素, 可以使用 <strong>重装枚举类型</strong> 或者接下来会提到的 <strong>Trait Object (特征对象)</strong></p>\n<p>通过前面几篇文章的铺垫, Vec 的学习就变得相当简单了, 这里直接通过一系列例子进行展示</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// 创建空 Vec</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// 如果仅仅是创建空 Vec ,需要手动注明类型, 但如果随后便添加了一个元素, 那么编译器就可以自动推导出类型</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">v</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E5C07B\">Vec</span><span style=\"color: #ABB2BF\">&lt;</span><span style=\"color: #E5C07B\">i32</span><span style=\"color: #ABB2BF\">&gt; </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Vec</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #61AFEF\">new</span><span style=\"color: #ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// 使用宏创建空 Vec</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">v</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E5C07B\">Vec</span><span style=\"color: #ABB2BF\">&lt;</span><span style=\"color: #E5C07B\">i32</span><span style=\"color: #ABB2BF\">&gt; </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">vec!</span><span style=\"color: #ABB2BF\">[];</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// 创建包含 5 个元素的 Vec</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">v</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">vec!</span><span style=\"color: #ABB2BF\">[</span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">2</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">3</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">4</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">5</span><span style=\"color: #ABB2BF\">];</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// 创建 10 个 0 的 Vec</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">v</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">vec!</span><span style=\"color: #ABB2BF\">[</span><span style=\"color: #D19A66\">0</span><span style=\"color: #ABB2BF\">; </span><span style=\"color: #D19A66\">10</span><span style=\"color: #ABB2BF\">];</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// 创建可变的Vec, 并 push 元素 3</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">mut</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">v</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">vec!</span><span style=\"color: #ABB2BF\">[</span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">2</span><span style=\"color: #ABB2BF\">];</span></span>\n<span class=\"line\"><span style=\"color: #E06C75\">v</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">push</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #D19A66\">3</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// 创建拥有两个元素的 Vec, 并 pop 一个元素</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">mut</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">v</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">vec!</span><span style=\"color: #ABB2BF\">[</span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">2</span><span style=\"color: #ABB2BF\">];</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">two</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">v</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">pop</span><span style=\"color: #ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// 创建包含 3 个元素的可变 Vec，并索引一个值和修改一个值</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">mut</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">v</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">vec!</span><span style=\"color: #ABB2BF\">[</span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">2</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">3</span><span style=\"color: #ABB2BF\">];</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">three</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">v</span><span style=\"color: #ABB2BF\">[</span><span style=\"color: #D19A66\">2</span><span style=\"color: #ABB2BF\">];</span></span>\n<span class=\"line\"><span style=\"color: #E06C75\">v</span><span style=\"color: #ABB2BF\">[</span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\">] </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">v</span><span style=\"color: #ABB2BF\">[</span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\">] + </span><span style=\"color: #D19A66\">5</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// 通过 get 方法安全的索引元素, 返回 Option&lt;T&gt; 枚举, 这里直接用 unwrap 方法进行解包, 但更好的做法是通过 match 进行解构</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">one</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">v</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">get</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #D19A66\">0</span><span style=\"color: #ABB2BF\">).</span><span style=\"color: #61AFEF\">unwrap</span><span style=\"color: #ABB2BF\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// 通过迭代器遍历 Vec</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">mut</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">v</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">vec!</span><span style=\"color: #ABB2BF\">[</span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">2</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">3</span><span style=\"color: #ABB2BF\">];</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">for</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">i</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">in</span><span style=\"color: #ABB2BF\"> &amp;</span><span style=\"color: #E06C75\">v</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;{i}&quot;</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// 迭代的同时修改 Vec</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">mut</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">v</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">vec!</span><span style=\"color: #ABB2BF\">[</span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">2</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">3</span><span style=\"color: #ABB2BF\">];</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">for</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">i</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">in</span><span style=\"color: #ABB2BF\"> &amp;</span><span style=\"color: #C678DD\">mut</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">v</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    *</span><span style=\"color: #E06C75\">i</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">+=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">10</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// 通过重装枚举装入不同类型的值</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">enum</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Num</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">Int</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E5C07B\">i32</span><span style=\"color: #ABB2BF\">),</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">Float</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E5C07B\">f64</span><span style=\"color: #ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">v</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">vec!</span><span style=\"color: #ABB2BF\">[</span><span style=\"color: #E5C07B\">Num</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #61AFEF\">Int</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #D19A66\">0</span><span style=\"color: #ABB2BF\">), </span><span style=\"color: #E5C07B\">Num</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #61AFEF\">Float</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #D19A66\">3.14</span><span style=\"color: #ABB2BF\">)]</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// 通过特征对象装入不同的值</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">trait</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Print</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">display</span><span style=\"color: #ABB2BF\">(&amp;</span><span style=\"color: #E5C07B\">self</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">struct</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Text</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E5C07B\">String</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">impl</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Print</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">for</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Text</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">display</span><span style=\"color: #ABB2BF\">(&amp;</span><span style=\"color: #E5C07B\">self</span><span style=\"color: #ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;The text is: {}&quot;</span><span style=\"color: #ABB2BF\">,</span><span style=\"color: #E5C07B\">self</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #D19A66\">0</span><span style=\"color: #ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">struct</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Int</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E5C07B\">i32</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">impl</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Print</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">for</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Int</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">display</span><span style=\"color: #ABB2BF\">(&amp;</span><span style=\"color: #E5C07B\">self</span><span style=\"color: #ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;The num is {}&quot;</span><span style=\"color: #ABB2BF\">,</span><span style=\"color: #E5C07B\">self</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #D19A66\">0</span><span style=\"color: #ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">v</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E5C07B\">Vec</span><span style=\"color: #ABB2BF\">&lt;</span><span style=\"color: #E5C07B\">Box</span><span style=\"color: #ABB2BF\">&lt;</span><span style=\"color: #C678DD\">dyn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">IpAddr</span><span style=\"color: #ABB2BF\">&gt;&gt; </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">vec!</span><span style=\"color: #ABB2BF\">[</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">Box</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #61AFEF\">new</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #61AFEF\">Text</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;Hello, world!&quot;</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">to_string</span><span style=\"color: #ABB2BF\">())),</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">Box</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #61AFEF\">new</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #61AFEF\">Int</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\">)),</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">for</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">ip</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">in</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">v</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">ip</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">display</span><span style=\"color: #ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span></code></pre></div><p>注意, Vec 与其内部元素是共存亡的, 一旦 Vec 离开作用域, 其自身和内部元素都将被 Drop</p>\n<h3 id=\"索引与-get-方法的区别\"><a href=\"#索引与-get-方法的区别\" class=\"headerlink\" title=\"索引与 get 方法的区别\"></a>索引与 get 方法的区别</h3><p>为什么要存在两种获取元素的方式呢? 其实这是为了解决数组越界导致的空指针问题</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">v</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">vec!</span><span style=\"color: #ABB2BF\">[</span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">2</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">3</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">4</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">5</span><span style=\"color: #ABB2BF\">];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">does_not_exist</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> &amp;</span><span style=\"color: #E06C75\">v</span><span style=\"color: #ABB2BF\">[</span><span style=\"color: #D19A66\">100</span><span style=\"color: #ABB2BF\">];</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">does_not_exist</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">v</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">get</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #D19A66\">100</span><span style=\"color: #ABB2BF\">);</span></span></code></pre></div><p>上面这两种方法, 使用索引会因为找不到元素直接 <code>panic</code>. 而使用 <code>get</code> 方法后, 最终通过解包会得到 <code>Option::None</code></p>\n<p>但总之, Rust 给了我们选择, <code>get</code> 方法既冗长不美观, 又会带来轻微的性能损失, 如果可以保证数组不越界, 那还是用索引更加方便</p>\n<h3 id=\"Vec-常用方法\"><a href=\"#Vec-常用方法\" class=\"headerlink\" title=\"Vec 常用方法\"></a>Vec 常用方法</h3><p>初始化 vec 的更多方式:</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">v</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">vec!</span><span style=\"color: #ABB2BF\">[</span><span style=\"color: #D19A66\">0</span><span style=\"color: #ABB2BF\">; </span><span style=\"color: #D19A66\">3</span><span style=\"color: #ABB2BF\">];</span><span style=\"color: #7F848E; font-style: italic\">   // 默认值为 0，初始长度为 3</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">v</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Vec</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #61AFEF\">from</span><span style=\"color: #ABB2BF\">([</span><span style=\"color: #D19A66\">0</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">0</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">0</span><span style=\"color: #ABB2BF\">]);</span><span style=\"color: #7F848E; font-style: italic\"> // 从普通数组生成</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">mut</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">v</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> [</span><span style=\"color: #D19A66\">0</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">2</span><span style=\"color: #ABB2BF\">].</span><span style=\"color: #61AFEF\">to_vec</span><span style=\"color: #ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"color: #E06C75\">v</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">is_empty</span><span style=\"color: #ABB2BF\">()</span><span style=\"color: #7F848E; font-style: italic\"> //判断是否为空</span></span>\n<span class=\"line\"><span style=\"color: #E06C75\">v</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">insert</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #D19A66\">3</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">3</span><span style=\"color: #ABB2BF\">);</span><span style=\"color: #7F848E; font-style: italic\"> // 在指定索引插入元素, 注意索引不能超过 Vec 的长度</span></span>\n<span class=\"line\"><span style=\"color: #E06C75\">v</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">remove</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #D19A66\">3</span><span style=\"color: #ABB2BF\">)</span><span style=\"color: #7F848E; font-style: italic\"> // 移除指定索引的元素并返回, 比如这里会返回 3</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">mut</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">v1</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> [</span><span style=\"color: #D19A66\">3</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">4</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">5</span><span style=\"color: #ABB2BF\">].</span><span style=\"color: #61AFEF\">to_vec</span><span style=\"color: #ABB2BF\">();</span><span style=\"color: #7F848E; font-style: italic\"> // append 会清空 v1, 需要增加可变声明</span></span>\n<span class=\"line\"><span style=\"color: #E06C75\">v</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">append</span><span style=\"color: #ABB2BF\">(&amp;</span><span style=\"color: #C678DD\">mut</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">v1</span><span style=\"color: #ABB2BF\">);</span><span style=\"color: #7F848E; font-style: italic\"> // 将 v1 的元素添加到 v</span></span>\n<span class=\"line\"><span style=\"color: #E06C75\">v</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">truncate</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #D19A66\">5</span><span style=\"color: #ABB2BF\">);</span><span style=\"color: #7F848E; font-style: italic\"> // 截断到指定长度，多余的元素被删除, v: [0, 1, 2, 3, 4]</span></span>\n<span class=\"line\"><span style=\"color: #E06C75\">v</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">retain</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #56B6C2\">|</span><span style=\"color: #E06C75\">x</span><span style=\"color: #56B6C2\">|</span><span style=\"color: #ABB2BF\"> *</span><span style=\"color: #E06C75\">x</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">&gt;</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">0</span><span style=\"color: #ABB2BF\">);</span><span style=\"color: #7F848E; font-style: italic\"> // 仅保留满足条件的元素 v: [1, 2, 3, 4]</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// 删除指定范围的元素，同时获取被删除元素的迭代器, v: [1, 2], m: [3, 4]</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">mut</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">m</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E5C07B\">Vec</span><span style=\"color: #ABB2BF\">&lt;</span><span style=\"color: #E06C75\">_</span><span style=\"color: #ABB2BF\">&gt; </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">v</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">drain</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #D19A66\">2</span><span style=\"color: #ABB2BF\">..=</span><span style=\"color: #D19A66\">4</span><span style=\"color: #ABB2BF\">).</span><span style=\"color: #61AFEF\">collect</span><span style=\"color: #ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">v2</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">v</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">split_off</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\">);</span><span style=\"color: #7F848E; font-style: italic\"> // 指定索引处切分成两个 vec, v: [1], v2: [2]</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">slice</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> &amp;</span><span style=\"color: #E06C75\">m</span><span style=\"color: #ABB2BF\">[</span><span style=\"color: #D19A66\">0</span><span style=\"color: #ABB2BF\">..=</span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\">];</span><span style=\"color: #7F848E; font-style: italic\"> // 获取切片</span></span>\n<span class=\"line\"><span style=\"color: #E06C75\">v</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">clear</span><span style=\"color: #ABB2BF\">()</span><span style=\"color: #7F848E; font-style: italic\"> // 清空数组</span></span></code></pre></div><p>动态数组在增加元素时如果容量不足就会导致 Vec 扩容 (目前的策略是重新申请一块 2 倍大小的内存, 再将所有元素拷贝到新的内存位置，同时更新指针数据), 频繁扩容或者当元素数量较多且需要扩容时, 大量的内存拷贝显然会降低程序的性能</p>\n<p>可以考虑在初始化时就指定一个实际的预估容量, 尽量减少可能的内存拷贝</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">mut</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">v</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Vec</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #61AFEF\">with_capacity</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #D19A66\">10</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #E06C75\">v</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">reserve</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #D19A66\">100</span><span style=\"color: #ABB2BF\">);</span><span style=\"color: #7F848E; font-style: italic\"> // 调整 v 的容量到至少 100</span></span>\n<span class=\"line\"><span style=\"color: #E06C75\">v</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">shrink_to_fit</span><span style=\"color: #ABB2BF\">();</span><span style=\"color: #7F848E; font-style: italic\"> // 释放剩余的容量, 一般不会主动执行</span></span></code></pre></div><h3 id=\"Vec-的排序\"><a href=\"#Vec-的排序\" class=\"headerlink\" title=\"Vec 的排序\"></a>Vec 的排序</h3><p>Rust 实现了两种排序算法, 稳定排序 <code>sort</code> 和 <code>sort_by</code>, 不稳定排序 <code>sort_unstable</code> 和 <code>sort_unstable_by</code></p>\n<p><strong>稳定</strong> 指对相等的元素, 不会对其进行重新排序, 而不稳定算法不保证这点, 但速度更快, 内存占用更低</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// 排列整数</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">mut</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">vec</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">vec!</span><span style=\"color: #ABB2BF\">[</span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">3</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">2</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">5</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">4</span><span style=\"color: #ABB2BF\">];</span></span>\n<span class=\"line\"><span style=\"color: #E06C75\">vec</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">sort_unstable</span><span style=\"color: #ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// 排列浮点数</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">mut</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">vec</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">vec!</span><span style=\"color: #ABB2BF\">[</span><span style=\"color: #D19A66\">1.0</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">0.9</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">1.1</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">2.8</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">4</span><span style=\"color: #E5C07B\">f32</span><span style=\"color: #ABB2BF\">];</span></span>\n<span class=\"line\"><span style=\"color: #E06C75\">vec</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">sort_unstable</span><span style=\"color: #ABB2BF\">();</span></span></code></pre></div><p>运行后发现后者直接报错了, 这是因为在浮点数当中存在一个 <strong>NAN (Not A Number)</strong> 的值无法与其他的浮点数比较</p>\n<p>所以浮点数并没有实现全数值可比较的 <code>Ord trait</code>, 而是实现了部分可比较的 <code>PartialOrd trait</code></p>\n<p>所以如果确定数组不包含 NAN, 可以用 <code>partial_cmp</code> 来作为大小判断的依据</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">mut</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">vec</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">vec!</span><span style=\"color: #ABB2BF\">[</span><span style=\"color: #D19A66\">1.0</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">0.9</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">1.1</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">2.8</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">4</span><span style=\"color: #E5C07B\">f32</span><span style=\"color: #ABB2BF\">];</span></span>\n<span class=\"line\"><span style=\"color: #E06C75\">vec</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">sort_unstable_by</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #56B6C2\">|</span><span style=\"color: #E06C75\">a</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">b</span><span style=\"color: #56B6C2\">|</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">a</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">partial_cmp</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">b</span><span style=\"color: #ABB2BF\">).</span><span style=\"color: #61AFEF\">unwrap</span><span style=\"color: #ABB2BF\">());</span></span></code></pre></div><p>如法炮制, 来对结构体数组进行排序</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">struct</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Num</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E5C07B\">u32</span><span style=\"color: #ABB2BF\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">mut</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">num</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">vec!</span><span style=\"color: #ABB2BF\">[</span><span style=\"color: #61AFEF\">Num</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #D19A66\">2</span><span style=\"color: #ABB2BF\">), </span><span style=\"color: #61AFEF\">Num</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\">), </span><span style=\"color: #61AFEF\">Num</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #D19A66\">3</span><span style=\"color: #ABB2BF\">)];</span></span>\n<span class=\"line\"><span style=\"color: #E06C75\">num</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">sort_unstable_by</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #56B6C2\">|</span><span style=\"color: #E06C75\">a</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">b</span><span style=\"color: #56B6C2\">|</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">b</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #D19A66\">0.</span><span style=\"color: #61AFEF\">cmp</span><span style=\"color: #ABB2BF\">(&amp;</span><span style=\"color: #E06C75\">a</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #D19A66\">0</span><span style=\"color: #ABB2BF\">));</span></span></code></pre></div><p>当然, 我们也可以手动实现 <code>Ord trait</code> 来作为排序依据, 但这还不够, 因为实现这个 Trait 还需要实现 <code>Eq, PartialEq, PartialOrd trait</code> 好消息是我们可以 <code>derive</code> 这些属性</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #ABB2BF\">#[derive(</span><span style=\"color: #E5C07B\">Ord</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E5C07B\">Eq</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E5C07B\">PartialEq</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E5C07B\">PartialOrd</span><span style=\"color: #ABB2BF\">)]</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">struct</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Num</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E5C07B\">u32</span><span style=\"color: #ABB2BF\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">mut</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">num</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">vec!</span><span style=\"color: #ABB2BF\">[</span><span style=\"color: #61AFEF\">Num</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #D19A66\">2</span><span style=\"color: #ABB2BF\">), </span><span style=\"color: #61AFEF\">Num</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\">), </span><span style=\"color: #61AFEF\">Num</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #D19A66\">3</span><span style=\"color: #ABB2BF\">)];</span></span>\n<span class=\"line\"><span style=\"color: #E06C75\">num</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">sort_unstable</span><span style=\"color: #ABB2BF\">()</span></span></code></pre></div><h2 id=\"可变长度字符串\"><a href=\"#可变长度字符串\" class=\"headerlink\" title=\"可变长度字符串\"></a>可变长度字符串</h2><p><code>String</code> 是一个带有的 <code>vec:Vec&lt;u8&gt;</code> 成员的结构体, 可以理解为 <code>str</code> 类型的动态形式. 它们的关系相当于 <code>[T]</code> 和 <code>Vec&lt;T&gt;</code> 的关系, 所以 <code>String</code> 类型也有类似 <code>push</code> 和 <code>pop</code> 的方法</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// 创建一个空的字符串</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">mut</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">s</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">String</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #61AFEF\">new</span><span style=\"color: #ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// 从 `&amp;str` 类型转化成 `String` 类型</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">mut</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">hello</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">String</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #61AFEF\">from</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;Hello, &quot;</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// 压入字符和压入字符串切片</span></span>\n<span class=\"line\"><span style=\"color: #E06C75\">hello</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">push</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&#39;w&#39;</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #E06C75\">hello</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">push_str</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;orld!&quot;</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// 弹出字符。</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">mut</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">s</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">String</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #61AFEF\">from</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;foo&quot;</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #61AFEF\">assert_eq!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">s</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">pop</span><span style=\"color: #ABB2BF\">(), </span><span style=\"color: #E5C07B\">Some</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&#39;o&#39;</span><span style=\"color: #ABB2BF\">));</span></span>\n<span class=\"line\"><span style=\"color: #61AFEF\">assert_eq!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">s</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">pop</span><span style=\"color: #ABB2BF\">(), </span><span style=\"color: #E5C07B\">Some</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&#39;o&#39;</span><span style=\"color: #ABB2BF\">));</span></span>\n<span class=\"line\"><span style=\"color: #61AFEF\">assert_eq!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">s</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">pop</span><span style=\"color: #ABB2BF\">(), </span><span style=\"color: #E5C07B\">Some</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&#39;f&#39;</span><span style=\"color: #ABB2BF\">));</span></span>\n<span class=\"line\"><span style=\"color: #61AFEF\">assert_eq!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">s</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">pop</span><span style=\"color: #ABB2BF\">(), </span><span style=\"color: #E5C07B\">None</span><span style=\"color: #ABB2BF\">);</span></span></code></pre></div><h2 id=\"KV-存储\"><a href=\"#KV-存储\" class=\"headerlink\" title=\"KV 存储\"></a>KV 存储</h2><p><strong>KV 键值对</strong> 数据结构并提供了平均复杂度为 <strong>O(1)</strong> 的查询方法, 当我们希望通过一个 Key 去查询值时, 该类型非常有用, 下面我们介绍其中一种比较常用的, <strong>HashMap (哈希表)</strong></p>\n<p>HashMap 并不在 <code>prelude</code> 中, 需要我们手动引入, 类似 Vec, 可以使用 <code>new</code> 方法来, 然后通过 <code>insert</code> 方法插入键值对</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">use</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">std</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #E5C07B\">collections</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #E5C07B\">HashMap</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">mut</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">map</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">HashMap</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #61AFEF\">new</span><span style=\"color: #ABB2BF\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// 自动类型推断, 很明显是 HashMap&lt;&amp;str,i32&gt;</span></span>\n<span class=\"line\"><span style=\"color: #E06C75\">map</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">insert</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;one&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #E06C75\">map</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">insert</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;two&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">2</span><span style=\"color: #ABB2BF\">);</span></span></code></pre></div><p>可以通过迭代器将其他类型高效的转化成 HashMap</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">use</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">std</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #E5C07B\">collections</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #E5C07B\">HashMap</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">price_list</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">vec!</span><span style=\"color: #ABB2BF\">[</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    (</span><span style=\"color: #98C379\">&quot;苹果&quot;</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">to_string</span><span style=\"color: #ABB2BF\">(), </span><span style=\"color: #D19A66\">4</span><span style=\"color: #ABB2BF\">),</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    (</span><span style=\"color: #98C379\">&quot;橘子&quot;</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">to_string</span><span style=\"color: #ABB2BF\">(), </span><span style=\"color: #D19A66\">3</span><span style=\"color: #ABB2BF\">),</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    (</span><span style=\"color: #98C379\">&quot;香蕉&quot;</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">to_string</span><span style=\"color: #ABB2BF\">(), </span><span style=\"color: #D19A66\">5</span><span style=\"color: #ABB2BF\">),</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">price_map</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E5C07B\">HashMap</span><span style=\"color: #ABB2BF\">&lt;</span><span style=\"color: #E06C75\">_</span><span style=\"color: #ABB2BF\">,</span><span style=\"color: #E06C75\">_</span><span style=\"color: #ABB2BF\">&gt; </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">price_list</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">into_iter</span><span style=\"color: #ABB2BF\">().</span><span style=\"color: #61AFEF\">collect</span><span style=\"color: #ABB2BF\">();</span></span></code></pre></div><p>创建 HashMap 有三点需要注意:</p>\n<ol>\n<li>若类型实现 <code>Copy trait</code>, 会被复制进 HashMap</li>\n<li>若没实现 <code>Copy trait</code>, 所有权将被转移给 HashMap</li>\n<li>如果将引用放入 HashMap, 请确保该引用的 <strong>生命周期</strong> 至少跟 HashMap 一样长</li>\n</ol>\n<h3 id=\"一些常用操作\"><a href=\"#一些常用操作\" class=\"headerlink\" title=\"一些常用操作\"></a>一些常用操作</h3><div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// 通过 Key 获取 Value</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// get 方法会返回一个 Option 类型, 如果未查询到会返回 None</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// 查询到会返回一个引用类型, 比如这里是 Option&lt;i32&gt;</span></span>\n<span class=\"line\"><span style=\"color: #E06C75\">price_map</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">get</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;苹果&quot;</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// 如果想直接获得 i32 类型可以用以下的方法</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// 因为 i32 是 Copy 的, 通过 copied 方法可以返回 Option&lt;i32&gt;</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// 随后通过 unwrap_or 方法解包, 如果是 Some 则返回, 如果是 None, 则返回 0</span></span>\n<span class=\"line\"><span style=\"color: #E06C75\">price_map</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">get</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;橘子&quot;</span><span style=\"color: #ABB2BF\">).</span><span style=\"color: #61AFEF\">copied</span><span style=\"color: #ABB2BF\">().</span><span style=\"color: #61AFEF\">unwrap_or</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #D19A66\">0</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// 迭代循环 HashMap</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">for</span><span style=\"color: #ABB2BF\"> (</span><span style=\"color: #E06C75\">key</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">value</span><span style=\"color: #ABB2BF\">) </span><span style=\"color: #C678DD\">in</span><span style=\"color: #ABB2BF\"> &amp;</span><span style=\"color: #E06C75\">scores</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;{} 的价格是 {}&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">key</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">value</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// 通过相同的 Key 可以更新对应的 Value</span></span>\n<span class=\"line\"><span style=\"color: #E06C75\">price_map</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">insert</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;香蕉&quot;</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">to_string</span><span style=\"color: #ABB2BF\">(), </span><span style=\"color: #D19A66\">5</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// 查询一个 Key, 如果不存在就插入, 如果存在则无事发生</span></span>\n<span class=\"line\"><span style=\"color: #E06C75\">price_map</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">entry</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;葡萄&quot;</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">to_string</span><span style=\"color: #ABB2BF\">()).</span><span style=\"color: #61AFEF\">or_insert</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #D19A66\">7</span><span style=\"color: #ABB2BF\">);</span></span></code></pre></div><h1 id=\"特征对象\"><a href=\"#特征对象\" class=\"headerlink\" title=\"特征对象\"></a>特征对象</h1><p>上面我们提到函数可以以 Trait 为返回值, 但有一个限制就是函数的所有分支返回的类型必须是相同的, 而这种限制就会让这种方法变得非常鸡肋. 有什么解决办法吗?</p>\n<p>一种方法是可以采用 Rust 独有的重装枚举. Hmm, 这确实能解决眼下的问题, 但如果你无法提前知道返回的 Trait 的所有情况呢?</p>\n<p>其实在上一篇文章中答案就已经显露了, 为了在 <code>main</code> 函数中使用 <code>?</code> 运算符, 我们通过 <code>Box&lt;dyn Error&gt;</code> 让 <code>main</code> 函数可以返回任何实现了 <code>Error</code> 的错误类型, 其中的 <code>dyn Trait</code> 就是我们接下来要讲的 <strong>Trait Object (特征对象)</strong>, 我们在前文 <strong>泛型的性能</strong> 就提到过, Trait Object 的类型是在运行时确定的, 因此会带来一定的性能损耗</p>\n<p>这种类型在 UI 库中比较常见, 因为在 UI 中, 我们需要绘制组件, 我们不可能为每个组件都实现一个绘制函数, 而且有的库也允许用户封装自己的组件, 这就更无法预知其类型了, 这时就要用到 Trait Object</p>\n<p>下面我们举一段例子</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">pub</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">trait</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Draw</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">draw</span><span style=\"color: #ABB2BF\">(&amp;</span><span style=\"color: #E5C07B\">self</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span></code></pre></div><p>任何实现了 <code>Draw trait</code> 的类型都是可以并且需要被绘制的</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">struct</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Text</span><span style=\"color: #ABB2BF\"> {}</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">impl</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Draw</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">for</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Text</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">draw</span><span style=\"color: #ABB2BF\">(&amp;</span><span style=\"color: #E5C07B\">self</span><span style=\"color: #ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">        // Drawing</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">struct</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Image</span><span style=\"color: #ABB2BF\"> {}</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">impl</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Draw</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">for</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Image</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">draw</span><span style=\"color: #ABB2BF\">(&amp;</span><span style=\"color: #E5C07B\">self</span><span style=\"color: #ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">        // Drawing</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span></code></pre></div><p>随后, 我们需要一个 View Tree, 这里我们用 Vec 来代替, 储存这些可以被绘制的对象. 但这个 Vec 应该是什么类型呢? 我们既需要绘制 <code>Text</code>, 也需要绘制 <code>Imagin</code>, 可我们不能填入两个类型. 但因为它们都实现了 <code>Draw trait</code>, 那可不可以把拥有 <code>Draw</code> 特征的对象填入呢? 答案当然是肯定的, 这就是 Trait Object</p>\n<p>再提一次, Trait Object 指向实现了 <code>Draw trait</code> 的类型的实例, 也就是指向了 <code>Text</code> 或者 <code>Imagin</code> 的实例, 这种映射关系是存储在一张表中, 可以在运行时通过特征对象找到具体调用的类型方法</p>\n<p>可以通过 <code>&amp;</code> 引用或者 <code>Box&lt;T&gt;</code> <strong>智能指针</strong> 的方式来创建特征对象</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>关于智能指针会在以后的进阶教程中提到. 这里简单概括一下, <code>Box&lt;T&gt;</code> 能把任意类型分配到堆上并返回一个指针</p></blockquote>\n<p>关于创建的具体过程让我们先举一个小例子</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">trait</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Draw</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">draw</span><span style=\"color: #ABB2BF\">(&amp;</span><span style=\"color: #E5C07B\">self</span><span style=\"color: #ABB2BF\">) -&gt; </span><span style=\"color: #E5C07B\">String</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">impl</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Draw</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">for</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">u8</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">draw</span><span style=\"color: #ABB2BF\">(&amp;</span><span style=\"color: #E5C07B\">self</span><span style=\"color: #ABB2BF\">) -&gt; </span><span style=\"color: #E5C07B\">String</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #61AFEF\">format!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;u8: {}&quot;</span><span style=\"color: #ABB2BF\">, *</span><span style=\"color: #E5C07B\">self</span><span style=\"color: #ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// 若 T 实现了 Draw trait, 则调用该函数时传入的 Box&lt;T&gt; 可以被隐式转换成函数参数签名中的 Box&lt;dyn Draw&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">draw1</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">x</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E5C07B\">Box</span><span style=\"color: #ABB2BF\">&lt;</span><span style=\"color: #C678DD\">dyn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Draw</span><span style=\"color: #ABB2BF\">&gt;) {</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">    // 由于实现了 Deref trait, Box&lt;T&gt; 会自动解引用为 T, 然后调用该值对应的类型上定义的 `draw` 方法</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">x</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">draw</span><span style=\"color: #ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">draw2</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">x</span><span style=\"color: #ABB2BF\">: &amp;</span><span style=\"color: #C678DD\">dyn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Draw</span><span style=\"color: #ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">x</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">draw</span><span style=\"color: #ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">main</span><span style=\"color: #ABB2BF\">() {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">num</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">8</span><span style=\"color: #E5C07B\">u8</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">draw1</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E5C07B\">Box</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #61AFEF\">new</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">num</span><span style=\"color: #ABB2BF\">));</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">draw2</span><span style=\"color: #ABB2BF\">(&amp;</span><span style=\"color: #E06C75\">num</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span></code></pre></div><p>下面我们可以完善这段代码了</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">pub</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">struct</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Screen</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">pub</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">components</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E5C07B\">Vec</span><span style=\"color: #ABB2BF\">&lt;</span><span style=\"color: #E5C07B\">Box</span><span style=\"color: #ABB2BF\">&lt;</span><span style=\"color: #C678DD\">dyn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Draw</span><span style=\"color: #ABB2BF\">&gt;&gt;,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// 实现一个 run 方法启动渲染</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">impl</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Screen</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">pub</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">run</span><span style=\"color: #ABB2BF\">(&amp;</span><span style=\"color: #E5C07B\">self</span><span style=\"color: #ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #C678DD\">for</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">component</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">in</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">self</span><span style=\"color: #ABB2BF\">.components.</span><span style=\"color: #61AFEF\">iter</span><span style=\"color: #ABB2BF\">() {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">            </span><span style=\"color: #E06C75\">component</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">draw</span><span style=\"color: #ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        }</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span></code></pre></div><p>有两点需要注意</p>\n<ul>\n<li>可以发现 <code>dyn</code> 关键字只用在 Trait Object 的类型声明上, 在创建时无需使用</li>\n<li>之所以能够将 Trait Object 作为参数, 是因为 <code>&amp;dyn</code> 或者 <code>Box&lt;dyn&gt;</code> 都是一种指针, 可以在编译器确定指针的大小, 而如果直接使用 <code>dyn Draw</code>, <code>Draw</code> 类型的大小还是无法在编译器确定, 进而无法编译</li>\n</ul>\n<p>那么使用 Trait Object 的好处是, 即使用户自己创建了一个组件, 只要它实现了 <code>Draw trait</code>, 就可以被加入到我们的 <code>Screen components</code> 中. 而如果使用泛型, 那么我们的 UI 就只能接受 <code>Text</code> 或者 <code>Imagin</code> 两种组件了</p>\n<p>在动态类型语言和 Go 的 <code>interface</code> 中, 有一个重要概念: <strong>Duck Typing (鸭子类型)</strong>, 就是只关心值有什么特征, 而不关心它实际是什么. 原例子是, 当一个东西走起来像鸭子, 叫起来像鸭子, 那么它就是一只鸭子, 即使它真的不是鸭子, 我们也当它是鸭子</p>\n<h2 id=\"特征对象的限制\"><a href=\"#特征对象的限制\" class=\"headerlink\" title=\"特征对象的限制\"></a>特征对象的限制</h2><p>不是所有 Trait 都能拥有 Trait Object, 只有对象安全的 Trait 才行</p>\n<p>如果一个对象时安全的, 它的 Trait 下的所有方法需要有以下特征:</p>\n<ul>\n<li>方法的返回类型不能是 <code>Self</code></li>\n<li>方法没有任何泛型参数</li>\n</ul>\n<p>对象安全对于 Trait Object 是必须的, 因为就像鸭子类型所讲的, 一旦有了特征对象, 我们就不再关心其具体类型了, 但如果 Trait 方法返回了 <code>Self</code> 类型, 但是特征对象忘记了其真正的类型, 那这个 <code>Self</code> 的处境就非常尴尬, 连它自己都不知道自己是什么了. 对于泛型参数也是同理</p>\n","feature":false,"text":"为类型实现方法. 如何使用泛型类型, 认识 Trait 和 Trait Object, 初步了解生命周期. 介绍集合类型, 动态数组, 基于动态数组的可变长度字符串, KV 存储....","permalink":"/post/RustCourse-06","photos":[],"count_time":{"symbolsCount":"17k","symbolsTime":"16 mins."},"categories":[{"name":"Course","slug":"Course","count":11,"path":"api/categories/Course.json"}],"tags":[{"name":"Rust","slug":"Rust","count":12,"path":"api/tags/Rust.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">方法</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%B3%9B%E5%9E%8B\"><span class=\"toc-text\">泛型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B3%9B%E5%9E%8B%E5%A3%B0%E6%98%8E\"><span class=\"toc-text\">泛型声明</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Const-%E6%B3%9B%E5%9E%8B\"><span class=\"toc-text\">Const 泛型</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B3%9B%E5%9E%8B%E7%9A%84%E6%80%A7%E8%83%BD\"><span class=\"toc-text\">泛型的性能</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Trait\"><span class=\"toc-text\">Trait</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%89%B9%E5%BE%81%E7%BA%A6%E6%9D%9F\"><span class=\"toc-text\">特征约束</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%9B%B4%E6%8E%A5%E7%94%A8-Trait-%E4%BD%9C%E4%B8%BA%E5%8F%82%E6%95%B0%E5%92%8C%E8%BF%94%E5%9B%9E%E5%80%BC\"><span class=\"toc-text\">直接用 Trait 作为参数和返回值</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%87%AA%E5%8A%A8%E6%B4%BE%E7%94%9F\"><span class=\"toc-text\">自动派生</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%B0%83%E7%94%A8%E6%9F%90%E4%BA%9B%E6%96%B9%E6%B3%95%E9%9C%80%E8%A6%81%E5%BC%95%E5%85%A5%E5%AF%B9%E5%BA%94%E7%9A%84-Trait\"><span class=\"toc-text\">调用某些方法需要引入对应的 Trait</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Trait-%E7%9A%84%E6%B3%9B%E5%9E%8B%E4%B8%8E%E5%85%B3%E8%81%94%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">Trait 的泛型与关联类型</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%B3%E4%BA%8E%E5%AE%9E%E7%8E%B0-Trait-%E7%9A%84%E5%87%A0%E6%9D%A1%E9%99%90%E5%88%B6\"><span class=\"toc-text\">关于实现 Trait 的几条限制:</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BB%95%E8%BF%87%E5%AD%A4%E5%84%BF%E5%8E%9F%E5%88%99\"><span class=\"toc-text\">绕过孤儿原则</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%AE%B9%E5%99%A8%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">容器类型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8A%A8%E6%80%81%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">动态数组</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%B4%A2%E5%BC%95%E4%B8%8E-get-%E6%96%B9%E6%B3%95%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">索引与 get 方法的区别</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Vec-%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">Vec 常用方法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Vec-%E7%9A%84%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">Vec 的排序</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%AF%E5%8F%98%E9%95%BF%E5%BA%A6%E5%AD%97%E7%AC%A6%E4%B8%B2\"><span class=\"toc-text\">可变长度字符串</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#KV-%E5%AD%98%E5%82%A8\"><span class=\"toc-text\">KV 存储</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">一些常用操作</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%89%B9%E5%BE%81%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">特征对象</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%89%B9%E5%BE%81%E5%AF%B9%E8%B1%A1%E7%9A%84%E9%99%90%E5%88%B6\"><span class=\"toc-text\">特征对象的限制</span></a></li></ol></li></ol>","author":{"name":"芳塔洛斯","slug":"blog-author","avatar":"https://fontlos.com/icons/avatar.jpg","link":"/","description":"来人间一趟, 为散步一场<br />待走出岁月, 何样的彼方<br />才配得上这一路的颠沛与时光","socials":{"github":"https://github.com/fontlos","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"https://fontlos.com/icons/bilibili.svg","link":"https://space.bilibili.com/362772872"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"初识 Rust(7) | 生命周期, 格式化输出与文件 IO","uid":"6fa92a5a1866681cec9c47f16fa37ac2","slug":"RustCourse-07","date":"2021-06-08T14:14:48.000Z","updated":"2024-03-06T02:36:48.107Z","comments":true,"path":"api/articles/RustCourse-07.json","keywords":"Programming, Web, Frontend, Backend ,Rust, Blog, Aurora, Fontlos, 芳塔洛斯","cover":"https://fontlos.com/cover/ferris.png","text":"简单认识一下宏. 介绍一下如何漂亮的打印各种类型以方便调试程序. 最后简单介绍一些文件IO...","permalink":"/post/RustCourse-07","photos":[],"count_time":{"symbolsCount":"17k","symbolsTime":"15 mins."},"categories":[{"name":"Course","slug":"Course","count":11,"path":"api/categories/Course.json"}],"tags":[{"name":"Rust","slug":"Rust","count":12,"path":"api/tags/Rust.json"}],"author":{"name":"芳塔洛斯","slug":"blog-author","avatar":"https://fontlos.com/icons/avatar.jpg","link":"/","description":"来人间一趟, 为散步一场<br />待走出岁月, 何样的彼方<br />才配得上这一路的颠沛与时光","socials":{"github":"https://github.com/fontlos","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"https://fontlos.com/icons/bilibili.svg","link":"https://space.bilibili.com/362772872"}}}},"feature":false},"next_post":{"title":"初识 Rust(5) | 流程控制, 模式匹配, 错误处理","uid":"fa6879e34f616dae4cddea50d2178b96","slug":"RustCourse-05","date":"2021-06-08T08:27:33.000Z","updated":"2024-03-06T02:36:48.107Z","comments":true,"path":"api/articles/RustCourse-05.json","keywords":"Programming, Web, Frontend, Backend ,Rust, Blog, Aurora, Fontlos, 芳塔洛斯","cover":"https://fontlos.com/cover/ferris.png","text":"介绍流程控制, 用于构建程序结构. 了解 Match 模式匹配, 如何用 Match 进行错误处理...","permalink":"/post/RustCourse-05","photos":[],"count_time":{"symbolsCount":"17k","symbolsTime":"16 mins."},"categories":[{"name":"Course","slug":"Course","count":11,"path":"api/categories/Course.json"}],"tags":[{"name":"Rust","slug":"Rust","count":12,"path":"api/tags/Rust.json"}],"author":{"name":"芳塔洛斯","slug":"blog-author","avatar":"https://fontlos.com/icons/avatar.jpg","link":"/","description":"来人间一趟, 为散步一场<br />待走出岁月, 何样的彼方<br />才配得上这一路的颠沛与时光","socials":{"github":"https://github.com/fontlos","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"https://fontlos.com/icons/bilibili.svg","link":"https://space.bilibili.com/362772872"}}}},"feature":false}}