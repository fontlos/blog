{"title":"初识 Rust(5) | 流程控制, 模式匹配, 错误处理","uid":"fa6879e34f616dae4cddea50d2178b96","slug":"RustCourse-05","date":"2021-06-08T08:27:33.000Z","updated":"2024-03-06T02:36:48.107Z","comments":true,"path":"api/articles/RustCourse-05.json","keywords":"Programming, Web, Frontend, Backend ,Rust, Blog, Aurora, Fontlos, 芳塔洛斯","cover":"https://fontlos.com/cover/ferris.png","content":"<h1 id=\"流程控制\"><a href=\"#流程控制\" class=\"headerlink\" title=\"流程控制\"></a>流程控制</h1><p>有了流程控制, 我们才能把代码的结构组织起来. Rust 中的流程控制都是表达式, 可以被赋值给变量</p>\n<h2 id=\"if-else-条件分支\"><a href=\"#if-else-条件分支\" class=\"headerlink\" title=\"if-else 条件分支\"></a>if-else 条件分支</h2><p><code>if</code> 是分支的一种, 可以与 <code>else</code> 和 <code>else if</code> 连用. 条件不需要小括号, 但条件后面必须跟一个代码块.</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">x</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">5</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">y</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">if</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">x</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">==</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">5</span><span style=\"color: #ABB2BF\"> { </span><span style=\"color: #D19A66\">true</span><span style=\"color: #ABB2BF\"> } </span><span style=\"color: #C678DD\">else</span><span style=\"color: #ABB2BF\"> { </span><span style=\"color: #D19A66\">false</span><span style=\"color: #ABB2BF\"> }</span></span></code></pre></div><h2 id=\"for-迭代器循环\"><a href=\"#for-迭代器循环\" class=\"headerlink\" title=\"for 迭代器循环\"></a>for 迭代器循环</h2><p>与 C 语言的三目运算符不同, <code>for</code> 的抽象结构如下</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">for</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">item</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">in</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">collection</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">    // Do something with item</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span></code></pre></div><p><code>collection</code> 拥有三种不同形式, 可以是任何实现了 <code>Iterator trait</code> 的集合类型, 因此也可以通过 <strong>Iterator (迭代器)</strong> 的形式来使用:</p>\n<ol>\n<li><code>collection</code> 等价于 <code>IntoIterator::into_iter(collection)</code>, 转移所有权到 <code>for</code> 代码块的作用域</li>\n<li><code>&amp;collection</code> 等价于 <code>collection.iter()</code>\t不可变借用</li>\n<li><code>&amp;mut collection</code> 等价于 <code>collection.iter_mut()</code>\t可变借用</li>\n</ol>\n<p>再简单提一下迭代器, 其还可以是以下两种形式</p>\n<ol>\n<li><code>1..10</code>, 表示 1 到 9 的整数</li>\n<li><code>1..=10</code>, 表示 1 到 10 的整数</li>\n</ol>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">for</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">i</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">in</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\">..=</span><span style=\"color: #D19A66\">10</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;{i}&quot;</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span></code></pre></div><p>如果想在循环中 <strong>获取元素的索引</strong> 可以使用 <code>enumerate</code> 方法</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">a</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> [</span><span style=\"color: #D19A66\">4</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">3</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">2</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\">];</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// 注意索引从 0 开始</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">for</span><span style=\"color: #ABB2BF\"> (</span><span style=\"color: #E06C75\">i</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">v</span><span style=\"color: #ABB2BF\">) </span><span style=\"color: #C678DD\">in</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">a</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">iter</span><span style=\"color: #ABB2BF\">().</span><span style=\"color: #61AFEF\">enumerate</span><span style=\"color: #ABB2BF\">() {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;第 {} 个元素是 {}&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">i</span><span style=\"color: #ABB2BF\"> + </span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">v</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span></code></pre></div><p>如果仅仅希望将一个过程重复几次, 不需要额外声明变量, 可以用 <code>_</code> 来接收</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">for</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">_</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">in</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\">..=</span><span style=\"color: #D19A66\">10</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;Print ten times&quot;</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span></code></pre></div><h3 id=\"迭代器有哪些优势\"><a href=\"#迭代器有哪些优势\" class=\"headerlink\" title=\"迭代器有哪些优势\"></a>迭代器有哪些优势</h3><p>先让我们看看这两种循环方式</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// 第一种, 通过索引访问元素</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">collection</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> [</span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">2</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">3</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">4</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">5</span><span style=\"color: #ABB2BF\">];</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">for</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">i</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">in</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">0</span><span style=\"color: #ABB2BF\">..</span><span style=\"color: #E06C75\">collection</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">len</span><span style=\"color: #ABB2BF\">() {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">item</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">collection</span><span style=\"color: #ABB2BF\">[</span><span style=\"color: #E06C75\">i</span><span style=\"color: #ABB2BF\">];</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">    // Do something with item</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// 第二种, 通过迭代器直接访问元素</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">for</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">item</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">in</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">collection</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">    // Do something with item</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span></code></pre></div><p>首先是性能差距:</p>\n<ul>\n<li>第一种做法为了避免悬垂引用, 对 <code>collection[index]</code> 的索引访问会进行 <strong>边界检查(Bounds Checking)</strong>, 确认该 <code>index</code> 确实在 <code>collection</code> 内, 导致运行时的性能损耗</li>\n<li>而第二种迭代器的方式, 由编译器确保每个元素绝对有效, 就不会触发这种检查</li>\n</ul>\n<p>安全性:</p>\n<ul>\n<li>第一种方式对 <code>collection</code> 的索引访问是 <strong>非连续的</strong>, 有可能在两次访问之间 <code>collection</code> 发生了变化, 导致脏数据产生</li>\n<li>而第二种迭代器的方式是连续访问, 通过所有权限制保证在访问过程中数据并不会发生变化</li>\n</ul>\n<p>Rust 的 <code>for</code> 循环比 C 中的更加优秀强大, 无需任何条件限制, 也不需要通过索引来访问, 再加上 Rust 的 <strong>零成本抽象</strong>, 是  Rust 中最安全且高效的循环, 因此也是最常用的循环</p>\n<h2 id=\"While-条件循环\"><a href=\"#While-条件循环\" class=\"headerlink\" title=\"While 条件循环\"></a>While 条件循环</h2><p><code>while</code> 抽象结构如下</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">while</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">bool</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">code</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span></code></pre></div><p>之前我们说 <code>for</code> 是最安全的循环, 下面我们通过用 <code>while</code> 来模仿 <code>for</code> 的功能来说明为什么</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">a</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> [</span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">2</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">3</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">4</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">5</span><span style=\"color: #ABB2BF\">];</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">mut</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">index</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">0</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">while</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">index</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">&lt;</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">5</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;the value is: {}&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">a</span><span style=\"color: #ABB2BF\">[</span><span style=\"color: #E06C75\">index</span><span style=\"color: #ABB2BF\">]);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">index</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">index</span><span style=\"color: #ABB2BF\"> + </span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span></code></pre></div><p>我们通过维护一个索引, 如期打印出了 5 条语句. 但这这很容易出错, 一旦我们错误判断了索引的范围, 就会引发 Panic</p>\n<p>而且在循环过程中, 也会不停的进行边界检查, 拖慢性能</p>\n<p>对比一下上面的, 很容易看出, <code>for</code> 更加安全, 高效, 简洁</p>\n<p>但是也不是说我们只需要 <code>for</code> 循环, 不然 Rust 为什么要设计 <code>while</code> 循环, 根据不同的场景, 选择更合适的方式</p>\n<h2 id=\"Loop-无限循环\"><a href=\"#Loop-无限循环\" class=\"headerlink\" title=\"Loop 无限循环\"></a>Loop 无限循环</h2><p>C 或者Rust 都可以通过 <code>while true</code> 来实现一个无限循环, 但 Rust 又单独专门设计了一个无限循环 — <code>loop</code></p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">/// 注: loop 同样返回一个 `!` 类型</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">loop</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">code</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span></code></pre></div><p>就 <strong>循环</strong> 这一概念而言, <code>loop</code> 毫无疑问是最纯粹的, 它仅仅是循环, 再无其他, 因此也是适用面最广的循环, 当然特定的场景下 <code>for</code> 或 <code>while</code> 才是更优解</p>\n<p>使用 <code>loop</code> 一定要打起精神来, 不然一个无限消耗资源的循环可能会让设备内存溢出</p>\n<p>对于 <code>loop</code>, 第一个问题就是, 如何结束循环? 接下来我们就会介绍两种控制循环的方式, 当然, 这对其他两种循环同样适用</p>\n<h2 id=\"Break-Continue-与-Lable\"><a href=\"#Break-Continue-与-Lable\" class=\"headerlink\" title=\"Break, Continue 与 Lable\"></a>Break, Continue 与 Lable</h2><p>对于循环, 可以使用 <code>break</code> 关键字强制退出循环, 也可以使用 <code>continue</code> 关键字结束本次循环并进入下一次循环, 这两个关键字后面也可以跟一个返回值</p>\n<p>也可以使用标签退出指定循环</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #ABB2BF\">&#39;</span><span style=\"color: #E5C07B\">outer</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #C678DD\">loop</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    &#39;</span><span style=\"color: #E5C07B\">inner</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #C678DD\">loop</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;退出外部循环&quot;</span><span style=\"color: #ABB2BF\">)；</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #C678DD\">break</span><span style=\"color: #ABB2BF\"> &#39;</span><span style=\"color: #E5C07B\">outer</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span></code></pre></div><h1 id=\"模式匹配\"><a href=\"#模式匹配\" class=\"headerlink\" title=\"模式匹配\"></a>模式匹配</h1><h2 id=\"match\"><a href=\"#match\" class=\"headerlink\" title=\"match\"></a>match</h2><h3 id=\"基本操作\"><a href=\"#基本操作\" class=\"headerlink\" title=\"基本操作\"></a>基本操作</h3><p><code>match</code> 是一个强大的匹配模式, 接下来先看几个例子</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">day</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">5</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">match</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">day</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #D19A66\">0</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">|</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">6</span><span style=\"color: #ABB2BF\"> =&gt; </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;休息日&quot;</span><span style=\"color: #ABB2BF\">)，</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\"> ... </span><span style=\"color: #D19A66\">5</span><span style=\"color: #ABB2BF\"> =&gt; </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;工作日&quot;</span><span style=\"color: #ABB2BF\">)，</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">_</span><span style=\"color: #ABB2BF\"> =&gt; </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;none&quot;</span><span style=\"color: #ABB2BF\">),</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span></code></pre></div><p><code>|</code> 用于匹配多个值, <code>...</code> 或 <code>..=</code> 用于匹配一个范围, 包括开头结尾, 因为 <code>match</code> 进行的是穷举性匹配, 所以需要一个 <code>_</code> 匹配剩下的所有值</p>\n<p>可以使用 <code>@</code> 来绑定一个变量</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">a</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">match</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">a</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">b</span><span style=\"color: #ABB2BF\"> @ </span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\">...</span><span style=\"color: #D19A66\">3</span><span style=\"color: #ABB2BF\"> =&gt; </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;a = {}&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">b</span><span style=\"color: #ABB2BF\">),</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">    // 也可以给绑定的变量起一个新的名字</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">c</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E06C75\">num</span><span style=\"color: #ABB2BF\"> @ </span><span style=\"color: #D19A66\">4</span><span style=\"color: #ABB2BF\">...</span><span style=\"color: #D19A66\">6</span><span style=\"color: #ABB2BF\"> =&gt; </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;a = {}&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">num</span><span style=\"color: #ABB2BF\">),</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">    // 绑定也可以匹配多个值, 但要记得加括号</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">d</span><span style=\"color: #ABB2BF\"> @ (</span><span style=\"color: #D19A66\">7</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">|</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">8</span><span style=\"color: #ABB2BF\">) =&gt; </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;a = {}&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">d</span><span style=\"color: #ABB2BF\">),</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">_</span><span style=\"color: #ABB2BF\"> =&gt; </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;Match failed&quot;</span><span style=\"color: #ABB2BF\">),</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span></code></pre></div><h3 id=\"获得一个引用\"><a href=\"#获得一个引用\" class=\"headerlink\" title=\"获得一个引用\"></a>获得一个引用</h3><p>之前的文章我们提到可以使用 <code>ref</code> 获得一个引用, 这里我们再次强调, 在模式匹配中只能通过 <code>ref</code> 获得一个引用, 而函数声明只能用 <code>&amp;</code> 来获得一个引用</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #ABB2BF\">#![feature(core_intrinsics)]</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">enum</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Num</span><span style=\"color: #ABB2BF\">&lt;&#39;</span><span style=\"color: #E5C07B\">a</span><span style=\"color: #ABB2BF\">&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">Nor</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E5C07B\">i32</span><span style=\"color: #ABB2BF\">),</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">NorRef</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E5C07B\">i32</span><span style=\"color: #ABB2BF\">),</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">Ref</span><span style=\"color: #ABB2BF\">(&amp;&#39;</span><span style=\"color: #E5C07B\">a</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">i32</span><span style=\"color: #ABB2BF\">),</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">RefRef</span><span style=\"color: #ABB2BF\">(&amp;&#39;</span><span style=\"color: #E5C07B\">a</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">i32</span><span style=\"color: #ABB2BF\">),</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">print_data</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">data</span><span style=\"color: #ABB2BF\">: &amp;</span><span style=\"color: #E5C07B\">u32</span><span style=\"color: #ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;log data: {}&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">data</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// fn print_data(data: ref u32){  // expected type, found keyword `ref`</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">//     println!(&quot;log data: {}&quot;, data);</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">print_type</span><span style=\"color: #ABB2BF\">&lt;</span><span style=\"color: #E5C07B\">T</span><span style=\"color: #ABB2BF\">&gt;(</span><span style=\"color: #E06C75\">_</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E5C07B\">T</span><span style=\"color: #ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;log type name: {}&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #C678DD\">unsafe</span><span style=\"color: #ABB2BF\"> { </span><span style=\"color: #E5C07B\">std</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #E5C07B\">intrinsics</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #61AFEF\">type_name</span><span style=\"color: #ABB2BF\">::&lt;</span><span style=\"color: #E5C07B\">T</span><span style=\"color: #ABB2BF\">&gt;() })</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">log</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">num</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E5C07B\">Num</span><span style=\"color: #ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">match</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">num</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #E5C07B\">Favour</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #61AFEF\">Nor</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">data</span><span style=\"color: #ABB2BF\">) =&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">            </span><span style=\"color: #61AFEF\">config</span><span style=\"color: #ABB2BF\">(&amp;</span><span style=\"color: #E06C75\">data</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">            </span><span style=\"color: #61AFEF\">print_type_name_of</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">data</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        },</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #E5C07B\">Favour</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #61AFEF\">NorRef</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #C678DD\">ref</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">data</span><span style=\"color: #ABB2BF\">) =&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">            </span><span style=\"color: #61AFEF\">config</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">data</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">            </span><span style=\"color: #61AFEF\">print_type_name_of</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">data</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        },</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #E5C07B\">Favour</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #61AFEF\">Ref</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">data</span><span style=\"color: #ABB2BF\">) =&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">            </span><span style=\"color: #61AFEF\">config</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">data</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">            </span><span style=\"color: #61AFEF\">print_type_name_of</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">data</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        },</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #E5C07B\">Favour</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #61AFEF\">RefRef</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #C678DD\">ref</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">data</span><span style=\"color: #ABB2BF\">) =&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">            </span><span style=\"color: #61AFEF\">config</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">data</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">            </span><span style=\"color: #61AFEF\">print_type_name_of</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">data</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        }</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">main</span><span style=\"color: #ABB2BF\">() {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">log</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E5C07B\">Favour</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #61AFEF\">Nor</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\">));</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">log</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E5C07B\">Favour</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #61AFEF\">Ref</span><span style=\"color: #ABB2BF\">(&amp;</span><span style=\"color: #D19A66\">2</span><span style=\"color: #ABB2BF\">));</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">log</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E5C07B\">Favour</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #61AFEF\">NorRef</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #D19A66\">3</span><span style=\"color: #ABB2BF\">));</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">log</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E5C07B\">Favour</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #61AFEF\">RefRef</span><span style=\"color: #ABB2BF\">(&amp;</span><span style=\"color: #D19A66\">4</span><span style=\"color: #ABB2BF\">));</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span></code></pre></div><p>输出结果如下:</p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #abb2bf\">log data: 1</span></span>\n<span class=\"line\"><span style=\"color: #abb2bf\">log type name: u32</span></span>\n<span class=\"line\"><span style=\"color: #abb2bf\">log data: 2</span></span>\n<span class=\"line\"><span style=\"color: #abb2bf\">log type name: &amp;u32</span></span>\n<span class=\"line\"><span style=\"color: #abb2bf\">log data: 3</span></span>\n<span class=\"line\"><span style=\"color: #abb2bf\">log type name: &amp;u32</span></span>\n<span class=\"line\"><span style=\"color: #abb2bf\">log data: 4</span></span>\n<span class=\"line\"><span style=\"color: #abb2bf\">log type name: &amp;&amp;u32</span></span></code></pre></div><p>通过 <code>ref mut</code> 在模式匹配中可以获得可变引用</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">mut</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">a</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">match</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">a</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">ref</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">mut</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">x</span><span style=\"color: #ABB2BF\"> =&gt; </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">x</span><span style=\"color: #ABB2BF\">),</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span></code></pre></div><h3 id=\"解构复合类型\"><a href=\"#解构复合类型\" class=\"headerlink\" title=\"解构复合类型\"></a>解构复合类型</h3><p>match 可用于解构复合类型, 如定长数组, 元组, 结构体或枚举 (实际上在上面的例子中已经体现)</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">point</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> (</span><span style=\"color: #D19A66\">0</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">2</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">match</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">point</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    (</span><span style=\"color: #D19A66\">0</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">y</span><span style=\"color: #ABB2BF\">) =&gt; </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;这个点在y轴上, 纵坐标为 {}&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">y</span><span style=\"color: #ABB2BF\">),</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    (</span><span style=\"color: #E06C75\">x</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">0</span><span style=\"color: #ABB2BF\">) =&gt; </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;这个点在x轴上, 横坐标为 {}&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">x</span><span style=\"color: #ABB2BF\">),</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    (</span><span style=\"color: #D19A66\">0</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">0</span><span style=\"color: #ABB2BF\">) =&gt; </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;这个点是原点&quot;</span><span style=\"color: #ABB2BF\">),</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">_</span><span style=\"color: #ABB2BF\"> =&gt; </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;这个点不在坐标轴上&quot;</span><span style=\"color: #ABB2BF\">),</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span></code></pre></div><h3 id=\"忽略变量\"><a href=\"#忽略变量\" class=\"headerlink\" title=\"忽略变量\"></a>忽略变量</h3><p>可以使用 <code>..</code> 来忽略变量</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">struct</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Point</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">x</span><span style=\"color: #ABB2BF\">:</span><span style=\"color: #E5C07B\">i32</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">y</span><span style=\"color: #ABB2BF\">:</span><span style=\"color: #E5C07B\">i32</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">point</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Point</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">x</span><span style=\"color: #ABB2BF\">:</span><span style=\"color: #D19A66\">10</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">y</span><span style=\"color: #ABB2BF\">:</span><span style=\"color: #D19A66\">10</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">match</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">point</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">Point</span><span style=\"color: #ABB2BF\"> {</span><span style=\"color: #E06C75\">x</span><span style=\"color: #ABB2BF\">,..} =&gt;</span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;x is {}&quot;</span><span style=\"color: #ABB2BF\">,</span><span style=\"color: #E06C75\">x</span><span style=\"color: #ABB2BF\">),</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">enum</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Int</span><span style=\"color: #ABB2BF\">{</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">Value</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E5C07B\">i32</span><span style=\"color: #ABB2BF\">),</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">N</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">value</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Int</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #61AFEF\">Value</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #D19A66\">10</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">match</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">value</span><span style=\"color: #ABB2BF\">{</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">Int</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #61AFEF\">Value</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">i</span><span style=\"color: #ABB2BF\">) </span><span style=\"color: #C678DD\">if</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">i</span><span style=\"color: #ABB2BF\">&gt;</span><span style=\"color: #D19A66\">5</span><span style=\"color: #ABB2BF\">=&gt;</span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;这个数字大于5&quot;</span><span style=\"color: #ABB2BF\">),</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">Int</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #61AFEF\">Value</span><span style=\"color: #ABB2BF\">(..)=&gt;</span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;是一个数字&quot;</span><span style=\"color: #ABB2BF\">),</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">Int</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #E5C07B\">N</span><span style=\"color: #ABB2BF\">=&gt;</span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;不是数字&quot;</span><span style=\"color: #ABB2BF\">),</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span></code></pre></div><p>但要注意 <code>..</code> 必须是无歧义的, 比如下面的代码无法运行</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">numbers</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> (</span><span style=\"color: #D19A66\">2</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">4</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">8</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">16</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">32</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">match</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">numbers</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">    // error: `..` can only be used once per tuple pattern</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    (.., </span><span style=\"color: #E06C75\">second</span><span style=\"color: #ABB2BF\">, ..) =&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;Some numbers: {}&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">second</span><span style=\"color: #ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    },</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span></code></pre></div><h3 id=\"变量遮蔽\"><a href=\"#变量遮蔽\" class=\"headerlink\" title=\"变量遮蔽\"></a>变量遮蔽</h3><p>无论是 <code>match</code> 还是接下来会提到的 <code>if let</code>, 它们都将开辟一个新的代码块, 这将会绑定新变量, 同名外部变量会被暂时遮蔽:</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">age</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Some</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #D19A66\">0</span><span style=\"color: #ABB2BF\">);</span><span style=\"color: #7F848E; font-style: italic\"> // 此时 age 是 Some(T) 类型</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">match</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">age</span><span style=\"color: #ABB2BF\"> {</span><span style=\"color: #7F848E; font-style: italic\"> // match 作用域开始</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">    // 下一行 age 是 i32 类型, 但或许我们本想使用 Some(T) 类型</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">Some</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">age</span><span style=\"color: #ABB2BF\">) =&gt;  </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;匹配出来的age是{}&quot;</span><span style=\"color: #ABB2BF\">,</span><span style=\"color: #E06C75\">age</span><span style=\"color: #ABB2BF\">),</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">_</span><span style=\"color: #ABB2BF\"> =&gt; ()</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span><span style=\"color: #7F848E; font-style: italic\">// match 作用域结束</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// 此时 age 是 Some(T) 类型</span></span></code></pre></div><h3 id=\"匹配守卫\"><a href=\"#匹配守卫\" class=\"headerlink\" title=\"匹配守卫\"></a>匹配守卫</h3><p><strong>Match Guard</strong> 可以让我们在一个 <code>match</code> 分支模式之后额外添加一个 <code>if</code> 条件, 进行进一步更加精准的匹配, 这个条件也可以使用在匹配模式中创建的变量. 记住, 模式的优先级大于匹配守卫, 只有先满足模式, 才会考虑是否满足匹配守卫</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">num</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Some</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #D19A66\">4</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">match</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">num</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">Some</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">x</span><span style=\"color: #ABB2BF\">) </span><span style=\"color: #C678DD\">if</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">x</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">&gt;</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">0</span><span style=\"color: #ABB2BF\"> =&gt; </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;A positive num: {}&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">x</span><span style=\"color: #ABB2BF\">),</span><span style=\"color: #7F848E; font-style: italic\"> // 只有这一行会打印输出</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">Some</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">x</span><span style=\"color: #ABB2BF\">) =&gt; </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;A negative num: {}&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">x</span><span style=\"color: #ABB2BF\">),</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">None</span><span style=\"color: #ABB2BF\"> =&gt; </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;No num&quot;</span><span style=\"color: #ABB2BF\">),</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span></code></pre></div><p>当匹配模式无法提供类如 <code>if x &gt; 0</code> 的表达能力时可以考虑这种方式</p>\n<p>匹配守卫还能解决上面变量遮蔽导致无法使用外部变量的问题</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">x</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Some</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #D19A66\">5</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">y</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">10</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">match</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">x</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">Some</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #D19A66\">50</span><span style=\"color: #ABB2BF\">) =&gt; </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;50&quot;</span><span style=\"color: #ABB2BF\">),</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">Some</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">n</span><span style=\"color: #ABB2BF\">) </span><span style=\"color: #C678DD\">if</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">n</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">==</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">y</span><span style=\"color: #ABB2BF\"> =&gt; </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;Matched, n = {}&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">n</span><span style=\"color: #ABB2BF\">),</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">_</span><span style=\"color: #ABB2BF\"> =&gt; </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;Default case, x = {:?}&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">x</span><span style=\"color: #ABB2BF\">),</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span></code></pre></div><p>上面的代码只有第三个匹配分支会打印输出. 因为第二个匹配分支中的模式不会像 <code>Some(y)</code> 那样引入一个覆盖外部 <code>y</code> 的新变量. 这意味着可以在匹配守卫中使用外部的 <code>y</code>. 而匹配守卫 <code>if n == y</code> 并不是一个模式所以没有引入新变量, 这个 <code>y</code> 正是 <strong>外部的</strong> <code>y</code> 而不是新的覆盖变量 <code>y</code></p>\n<p>也可以在匹配守卫中使用 <code>|</code> 运算符来指定多个模式, 匹配守卫的条件会作用于所有的模式</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">x</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">4</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">y</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">false</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">match</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">x</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">    // 匹配守卫并非只作用于 6</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #D19A66\">4</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">|</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">5</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">|</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">6</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">if</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">y</span><span style=\"color: #ABB2BF\"> =&gt; </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;yes&quot;</span><span style=\"color: #ABB2BF\">),</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">_</span><span style=\"color: #ABB2BF\"> =&gt; </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;no&quot;</span><span style=\"color: #ABB2BF\">),</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span></code></pre></div><h3 id=\"拓展-match-宏\"><a href=\"#拓展-match-宏\" class=\"headerlink\" title=\"拓展: match! 宏\"></a>拓展: match! 宏</h3><p>这里含有许多未提到的知识, 可以先看以后的文章再回过头来看</p>\n<p>考虑以下这种情况</p>\n<p>有一个动态数组，里面存有以下枚举：</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">enum</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Bin</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">Zero</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">One</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">main</span><span style=\"color: #ABB2BF\">() {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">bin</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">vec!</span><span style=\"color: #ABB2BF\">[</span><span style=\"color: #E5C07B\">Bin</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #E5C07B\">One</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E5C07B\">Bin</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #E5C07B\">One</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E5C07B\">Bin</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #E5C07B\">Zero</span><span style=\"color: #ABB2BF\">];</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span></code></pre></div><p>如果想对 <code>bin</code> 进行过滤，只保留类型是 <code>Bin::One</code> 的元素, 这种做法是不行的</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #E06C75\">bin</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">iter</span><span style=\"color: #ABB2BF\">().</span><span style=\"color: #61AFEF\">filter</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #56B6C2\">|</span><span style=\"color: #E06C75\">b</span><span style=\"color: #56B6C2\">|</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">b</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">==</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Bin</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #E5C07B\">One</span><span style=\"color: #ABB2BF\">);</span></span></code></pre></div><p>因为无法将 x 直接跟一个枚举成员进行比较. 虽然也可以用 <code>match</code> 来解决, 但在迭代器链式调用中略显啰嗦, 好在 Rust 标准库提供了一个非常实用的宏: <code>matches!</code>, 可以将一个 <strong>表达式</strong> 跟 <strong>模式</strong> 进行匹配, 并根据是否匹配成功返回 <code>true</code> 或 <code>false</code>. 因此上面的代码可以改成这样</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #E06C75\">bin</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">iter</span><span style=\"color: #ABB2BF\">().</span><span style=\"color: #61AFEF\">filter</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #56B6C2\">|</span><span style=\"color: #E06C75\">b</span><span style=\"color: #56B6C2\">|</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">matches!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">b</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E5C07B\">Bin</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #E5C07B\">One</span><span style=\"color: #ABB2BF\">));</span></span></code></pre></div><p>还有许多更强大的功能</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">f</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #98C379\">&#39;f&#39;</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// assert! 宏用于判断一个表达式是否为 true</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// 同样可以指定多个模式</span></span>\n<span class=\"line\"><span style=\"color: #61AFEF\">assert!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #61AFEF\">matches!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">foo</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #98C379\">&#39;A&#39;</span><span style=\"color: #ABB2BF\">..=</span><span style=\"color: #98C379\">&#39;Z&#39;</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">|</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #98C379\">&#39;a&#39;</span><span style=\"color: #ABB2BF\">..=</span><span style=\"color: #98C379\">&#39;z&#39;</span><span style=\"color: #ABB2BF\">));</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">four</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Some</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #D19A66\">4</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// 同样可以使用匹配守卫</span></span>\n<span class=\"line\"><span style=\"color: #61AFEF\">assert!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #61AFEF\">matches!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">four</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E5C07B\">Some</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">x</span><span style=\"color: #ABB2BF\">) </span><span style=\"color: #C678DD\">if</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">x</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">&gt;</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">2</span><span style=\"color: #ABB2BF\">));</span></span></code></pre></div><h2 id=\"if-let-与-while-let\"><a href=\"#if-let-与-while-let\" class=\"headerlink\" title=\"if let 与 while let\"></a>if let 与 while let</h2><p><code>if let</code> (单次) 与 <code>while let</code> (循环) 相当于精简版的 <code>match</code>, 用于解决一些匹配项很少或者只关心其中几个值时的匹配</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">enum</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Int</span><span style=\"color: #ABB2BF\">{</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">Value</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E5C07B\">i32</span><span style=\"color: #ABB2BF\">),</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">N</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">a</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Int</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #61AFEF\">Value</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #D19A66\">10</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">if</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Int</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #61AFEF\">Value</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">v</span><span style=\"color: #ABB2BF\">) </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">a</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;The value is {}&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">v</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">mut</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">b</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Int</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #61AFEF\">Value</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">while</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Int</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #61AFEF\">Value</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">v</span><span style=\"color: #ABB2BF\">) </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">b</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">if</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">v</span><span style=\"color: #ABB2BF\">&gt;</span><span style=\"color: #D19A66\">3</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;b is over 3&quot;</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #E06C75\">b</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">N</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    } </span><span style=\"color: #C678DD\">else</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;b is {:?}, add one&quot;</span><span style=\"color: #ABB2BF\">,</span><span style=\"color: #E06C75\">i</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #E06C75\">b</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Int</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #61AFEF\">Value</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">i</span><span style=\"color: #ABB2BF\">+</span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span></code></pre></div><p>实际上类似 <code>match</code>, <code>if let</code> 也支持变量绑定, 而且还有一种称为 <strong>绑定时解构</strong> 的操作</p>\n<p>还记得我们之前也通过 <code>let</code> 解构过复合类型吗, 我们说过 <code>let</code> 也是一种匹配模式, 因此也拥有一些强大的功能, 比如, 绑定时解构</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #ABB2BF\">#[derive(</span><span style=\"color: #E5C07B\">Debug</span><span style=\"color: #ABB2BF\">)]</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">struct</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Point</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">x</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E5C07B\">i32</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">y</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E5C07B\">i32</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// 绑定新变量 `p`，同时对 `Point` 进行解构</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">point</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Point</span><span style=\"color: #ABB2BF\"> {</span><span style=\"color: #E06C75\">x</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #D19A66\">10</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">y</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #D19A66\">5</span><span style=\"color: #ABB2BF\">};</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">if</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">p</span><span style=\"color: #ABB2BF\"> @ </span><span style=\"color: #E5C07B\">Point</span><span style=\"color: #ABB2BF\"> {</span><span style=\"color: #E06C75\">x</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #D19A66\">10</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">y</span><span style=\"color: #ABB2BF\">} </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">point</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;x is 10 and y is {} in {:?}&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">y</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">p</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">} </span><span style=\"color: #C678DD\">else</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;x was not 10 :(&quot;</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// 对了, 还记得我们之前也通过 `let` 解构过复合类型吗</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// 我们还说过 `let` 也是一种匹配模式, 所以 ...</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">p</span><span style=\"color: #ABB2BF\"> @ </span><span style=\"color: #E5C07B\">Point</span><span style=\"color: #ABB2BF\"> {</span><span style=\"color: #E06C75\">x</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E06C75\">px</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">y</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E06C75\">py</span><span style=\"color: #ABB2BF\"> } </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Point</span><span style=\"color: #ABB2BF\"> {</span><span style=\"color: #E06C75\">x</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #D19A66\">10</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">y</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #D19A66\">23</span><span style=\"color: #ABB2BF\">};</span></span>\n<span class=\"line\"><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;x: {}, y: {}&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">px</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">py</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;{:?}&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">p</span><span style=\"color: #ABB2BF\">);</span></span></code></pre></div><h1 id=\"可能存在的值\"><a href=\"#可能存在的值\" class=\"headerlink\" title=\"可能存在的值\"></a>可能存在的值</h1><p><strong>Null (空值)</strong> 是一个让人又爱又恨的东西, 很多时候它都太重要了, 但是又由于空值过于灵活, 带来了无穷无尽的内存安全问题</p>\n<p>作为一门现代语言, 没有空值不行, 但作为一门注重安全的语言, 有空值又不好, 于是 Rust 通过枚举巧妙地解决了这个问题, 构造了一个 <strong>Option (可能存在的值)</strong></p>\n<p><code>Option</code> 在结构上非常类似我们上面所举的最后一个例子</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">enum</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Option</span><span style=\"color: #ABB2BF\">&lt;</span><span style=\"color: #E5C07B\">T</span><span style=\"color: #ABB2BF\">&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">Some</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E5C07B\">T</span><span style=\"color: #ABB2BF\">),</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">None</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span></code></pre></div><p>其中 <code>T</code> 是一个 <strong>泛型类型</strong>, 表示 <strong>任意符合限制的类型</strong>, 我们将在后面的文章提到. 总之, 一个 <code>Option</code>, 要么存在 <code>Some(T)</code> 要么是 <code>None</code></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>注: <code>Option</code> 的变体成员 <code>Some</code> 和 <code>None</code> 都通过 <code>prelude</code> 导入默认作用域了, 可以直接使用, 但不要忘记它们是来自 <code>Option</code> 的哦</p></blockquote>\n<p>上面提到的 <strong>匹配模式</strong> 就是用于解构 <code>Option</code> 的绝佳方式</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">v</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Some</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">match</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">v</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">Some</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\">) =&gt; </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;One!&quot;</span><span style=\"color: #ABB2BF\">),</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">_</span><span style=\"color: #ABB2BF\"> =&gt; (),</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// 当然在我们仅仅关心一个值时不要忘了这个更加简洁的写法</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">if</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Some</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\">) </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">v</span><span style=\"color: #ABB2BF\">{</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;One!&quot;</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span></code></pre></div><h1 id=\"错误处理\"><a href=\"#错误处理\" class=\"headerlink\" title=\"错误处理\"></a>错误处理</h1><h2 id=\"不可恢复的错误与-panic-宏的简单介绍\"><a href=\"#不可恢复的错误与-panic-宏的简单介绍\" class=\"headerlink\" title=\"不可恢复的错误与 panic! 宏的简单介绍\"></a>不可恢复的错误与 panic! 宏的简单介绍</h2><p>面对复杂的生产环境, 我们的程序几乎不可能是毫无错误的, 比如程序自身逻辑出现严重问题. 即使程序本身正常, 谁知道用户会做出什么奇怪的操作呢, 比如一个手滑删掉了程序所依赖的动态库, 这种时候就不是很适合让我们的程序靠自身来解决这个问题, 被称为 <strong>Panic (不可恢复的错误)</strong></p>\n<p>造成 Panic 有两种方式</p>\n<h3 id=\"被动触发\"><a href=\"#被动触发\" class=\"headerlink\" title=\"被动触发\"></a>被动触发</h3><div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">main</span><span style=\"color: #ABB2BF\">() {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">array</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> [</span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">2</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">3</span><span style=\"color: #ABB2BF\">];</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;{}&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">v</span><span style=\"color: #ABB2BF\">[</span><span style=\"color: #D19A66\">10</span><span style=\"color: #ABB2BF\">]);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span></code></pre></div><p>一个经典的数组越界错误, 这时我们的程序就会被动的触发 Panic. 这在编程语言中无一例外, 都会报出严重的异常, 部分语言包括 Rust 甚至导致程序直接崩溃关闭。</p>\n<p>报错信息如下</p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #abb2bf\">$ cargo run</span></span>\n<span class=\"line\"><span style=\"color: #abb2bf\">   Compiling ...</span></span>\n<span class=\"line\"><span style=\"color: #abb2bf\">    Finished ...</span></span>\n<span class=\"line\"><span style=\"color: #abb2bf\">     Running ...</span></span>\n<span class=\"line\"><span style=\"color: #abb2bf\">thread &#39;main&#39; panicked at &#39;index out of bounds: the len is 3 but the index is 10&#39;, src/main.rs:3:20</span></span>\n<span class=\"line\"><span style=\"color: #abb2bf\">note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace</span></span></code></pre></div><p>报错信息很详细, 这多亏于 Rust 强大到一骑绝尘的编译器, 编译器手把手叫你写代码可不是乱吹的, 告诉我们崩溃线程, 崩溃原因, 对应的源码位置, 以及如何查看更详细报错信息的命令</p>\n<p>被动触发是最常见的 Panic 方式. 主动报错总是好的, 总不会有人希望代码里藏着一个随时可能会爆的雷吧</p>\n<h3 id=\"主动调用\"><a href=\"#主动调用\" class=\"headerlink\" title=\"主动调用\"></a>主动调用</h3><p>有时候处于一些特殊原因, 比如程序依赖的重要文件丢失了, 但既靠程序自己来还原可能会带来功能膨胀, 这时我们就可以手动调用 <code>panic!</code> 宏, 调用后程序会打印出一个错误信息,随后开始进行栈展开, 最后清理并退出程序.</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>切记, 一定是不可恢复的错误才能调用 <code>panic!</code>, 就像酒吧总不能因为客人点份炒饭就爆炸吧</p></blockquote>\n<h3 id=\"Backtrace-栈展开\"><a href=\"#Backtrace-栈展开\" class=\"headerlink\" title=\"Backtrace 栈展开\"></a>Backtrace 栈展开</h3><p>实际开发中, 因为函数的层层调用, 错误往往涉及到很长的调用链甚至会深入第三方库, 如果没有栈展开技术, 错误将难以追踪溯源. 还是来看这个简单的错误</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">main</span><span style=\"color: #ABB2BF\">() {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">v</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">vec!</span><span style=\"color: #ABB2BF\">[</span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">2</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">3</span><span style=\"color: #ABB2BF\">];</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">v</span><span style=\"color: #ABB2BF\">[</span><span style=\"color: #D19A66\">10</span><span style=\"color: #ABB2BF\">];</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span></code></pre></div><div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #abb2bf\">thread &#39;main&#39; panicked at &#39;index out of bounds: the len is 3 but the index is 10&#39;, src/main.rs:3:5</span></span>\n<span class=\"line\"><span style=\"color: #abb2bf\">note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace</span></span></code></pre></div><p>有人可能不以为然, 但实际上数组越界是一个非常严重的问题, 比如 C 语言中, 数组越界一样可以访问对应地址的内存, 但结果可就不是一个数组的元素了, 这种情况被称为缓冲区溢出, 并可能会导致安全漏洞.</p>\n<p>还是那句话, 主动报错总是好的, 比如这种情况, 如果真的访问到了一个未知的值, 这在很多时候会导致程序上的逻辑 Bug, 而众所周知, 逻辑 Bug 是最难被发现和修复的, 因此程序直接崩溃, 告诉我们问题所在, 然后我们进行修复, 这才是最合理的开发流程, 而不是把选择掩耳盗铃</p>\n<p>现在, 我们已经知道错误发生的位置了, 为了获取更详细的信息, 让我们按照提示使用添加一个临时环境变量, 再次运行程序:  <code>RUST_BACKTRACE=1 cargo run</code> (Linux&#x2F;Mac shell) 或 <code>$env:RUST_BACKTRACE=1 ; cargo run</code> (Windows PowerShell)</p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #abb2bf\">thread &#39;main&#39; panicked at &#39;index out of bounds: the len is 3 but the index is 10&#39;, src/main.rs:4:5</span></span>\n<span class=\"line\"><span style=\"color: #abb2bf\">stack backtrace:</span></span>\n<span class=\"line\"><span style=\"color: #abb2bf\">   0: rust_begin_unwind</span></span>\n<span class=\"line\"><span style=\"color: #abb2bf\">             at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/panicking.rs:517:5</span></span>\n<span class=\"line\"><span style=\"color: #abb2bf\">   1: core::panicking::panic_fmt</span></span>\n<span class=\"line\"><span style=\"color: #abb2bf\">             at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/core/src/panicking.rs:101:14</span></span>\n<span class=\"line\"><span style=\"color: #abb2bf\">   2: core::panicking::panic_bounds_check</span></span>\n<span class=\"line\"><span style=\"color: #abb2bf\">             at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/core/src/panicking.rs:77:5</span></span>\n<span class=\"line\"><span style=\"color: #abb2bf\">   3: &lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index</span></span>\n<span class=\"line\"><span style=\"color: #abb2bf\">             at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/core/src/slice/index.rs:184:10</span></span>\n<span class=\"line\"><span style=\"color: #abb2bf\">   4: core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index</span></span>\n<span class=\"line\"><span style=\"color: #abb2bf\">             at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/core/src/slice/index.rs:15:9</span></span>\n<span class=\"line\"><span style=\"color: #abb2bf\">   5: &lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index</span></span>\n<span class=\"line\"><span style=\"color: #abb2bf\">             at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/vec/mod.rs:2465:9</span></span>\n<span class=\"line\"><span style=\"color: #abb2bf\">   6: world_hello::main</span></span>\n<span class=\"line\"><span style=\"color: #abb2bf\">             at ./src/main.rs:4:5</span></span>\n<span class=\"line\"><span style=\"color: #abb2bf\">   7: core::ops::function::FnOnce::call_once</span></span>\n<span class=\"line\"><span style=\"color: #abb2bf\">             at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/core/src/ops/function.rs:227:5</span></span>\n<span class=\"line\"><span style=\"color: #abb2bf\">note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.</span></span></code></pre></div><p>上面打印的内容就是一次 <strong>栈展开 (栈回溯)</strong>, 包含了函数调用的顺序 (<strong>逆序</strong>), 排在最顶部最后一个调用的函数是 <code>rust_begin_unwind</code>，该函数的目的就是进行栈展开, 并呈现这些信息给我们</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>注: 获取到栈回溯信息需要开启 <code>debug</code> 标志, 只要在使用 <code>cargo run</code> 或 <code>cargo build</code> 不加 <code>--release</code> Flag 即可, 这两个操作默认是 Debug 运行方式. 而且栈展开信息在不同操作系统或者 Rust 版本上也有所不同</p></blockquote>\n<h3 id=\"Panic-终止方式\"><a href=\"#Panic-终止方式\" class=\"headerlink\" title=\"Panic 终止方式\"></a>Panic 终止方式</h3><p>当出现 <code>panic!</code> 时, 程序提供了两种方式来处理终止流程: 栈展开和直接终止。</p>\n<ul>\n<li><strong>栈展开</strong> 是默认的方式, 这意味着 Rust 会回溯栈上数据和函数调用, 做更多的善后工作. 好处是可以给出充分的报错信息和栈调用信息, 便于事后的问题复盘</li>\n<li><strong>直接终止</strong> 顾名思义就是不清理数据直接退出程序, 善后工作交与操作系统来负责</li>\n</ul>\n<p>大多数情况使用默认选择就好, 但当你关心最终编译出的二进制可执行文件大小或者进行嵌入式开发时, 那么可以尝试去使用直接终止的方式, 例如下面的配置修改 <code>Cargo.toml</code> 文件, 实现在 Release 模式下遇到 Panic 直接终止</p>\n<div class=\"language-toml\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">toml</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #ABB2BF\">[</span><span style=\"color: #61AFEF\">profile</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">release</span><span style=\"color: #ABB2BF\">]</span></span>\n<span class=\"line\"><span style=\"color: #E06C75\">panic</span><span style=\"color: #ABB2BF\"> = </span><span style=\"color: #98C379\">&#39;abort&#39;</span></span></code></pre></div><h3 id=\"Panic-后会怎么样\"><a href=\"#Panic-后会怎么样\" class=\"headerlink\" title=\"Panic 后会怎么样\"></a>Panic 后会怎么样</h3><p>如果是 Main 线程 Panic, 则程序会终止, 如果是其它子线程, 则该线程终止, 不会影响 Main 线程. 因此, 尽量不要在 Main 线程中做太多任务, 可以将这些任务交由子线程去做, 防止整个程序崩溃</p>\n<h2 id=\"可恢复的错误与-Result-枚举\"><a href=\"#可恢复的错误与-Result-枚举\" class=\"headerlink\" title=\"可恢复的错误与 Result 枚举\"></a>可恢复的错误与 Result 枚举</h2><p>就像上面提到的, 遇到一些简单的错误时, 我们应该尝试着用一种更温和的方式捕获并解决这个问题, 而不是让我们的程序直接崩溃, 比如 <code>Result</code> 枚举, 其定义如下</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">enum</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Result</span><span style=\"color: #ABB2BF\">&lt;</span><span style=\"color: #E5C07B\">T</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E5C07B\">E</span><span style=\"color: #ABB2BF\">&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">Ok</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E5C07B\">T</span><span style=\"color: #ABB2BF\">),</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">Err</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E5C07B\">E</span><span style=\"color: #ABB2BF\">),</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span></code></pre></div><p>类似于 <code>Option</code>, <code>Ok</code> 变体代表成功执行, <code>T</code> 泛型代表执行成功后返回的内容, <code>Err</code> 变体代表执行失败, <code>E</code> 泛型存放着错误信息. 而这两个变体也通过 <code>prelude</code> 导入了默认作用域, 可以直接使用</p>\n<p><code>Result</code> 与 <code>match</code> 等匹配模式结合起来, 就构成了 Rust 中优雅强大健壮的错误处理系统</p>\n<p>举一个尝试打开文件的例子</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">use</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">std</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #E5C07B\">fs</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #E5C07B\">File</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">use</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">std</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #E5C07B\">io</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #E5C07B\">ErrorKind</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">main</span><span style=\"color: #ABB2BF\">() {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">f</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">File</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #61AFEF\">open</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;hello.txt&quot;</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">f</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">match</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">f</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #E5C07B\">Ok</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">file</span><span style=\"color: #ABB2BF\">) =&gt; </span><span style=\"color: #E06C75\">file</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #E5C07B\">Err</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">error</span><span style=\"color: #ABB2BF\">) =&gt; </span><span style=\"color: #C678DD\">match</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">error</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">kind</span><span style=\"color: #ABB2BF\">() {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">            </span><span style=\"color: #E5C07B\">ErrorKind</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #E5C07B\">NotFound</span><span style=\"color: #ABB2BF\"> =&gt; </span><span style=\"color: #C678DD\">match</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">File</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #61AFEF\">create</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;hello.txt&quot;</span><span style=\"color: #ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">                </span><span style=\"color: #E5C07B\">Ok</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">fc</span><span style=\"color: #ABB2BF\">) =&gt; </span><span style=\"color: #E06C75\">fc</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">                </span><span style=\"color: #E5C07B\">Err</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">e</span><span style=\"color: #ABB2BF\">) =&gt; </span><span style=\"color: #61AFEF\">panic!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;Problem creating the file: {:?}&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">e</span><span style=\"color: #ABB2BF\">),</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">            },</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">            </span><span style=\"color: #E06C75\">other_error</span><span style=\"color: #ABB2BF\"> =&gt; </span><span style=\"color: #61AFEF\">panic!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;Problem opening the file: {:?}&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">other_error</span><span style=\"color: #ABB2BF\">),</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        },</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    };</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span></code></pre></div><p>简单明了, 上面代码在匹配出 Error 并没有直接选择 Panic, 而是对 Error 进行了进一步匹配解析</p>\n<ul>\n<li>如果文件存在且成功打开就返回文件句柄</li>\n<li>如果是文件不存在错误 <code>ErrorKind::NotFound</code> 就创建文件, 这里创建文件. <code>File::create</code> 也是返回 <code>Result</code>, 因此继续用 <code>match</code> 进行匹配<ul>\n<li>创建成功, 将新的文件句柄赋值给 <code>f</code></li>\n<li>如果失败, 则 Panic</li>\n</ul>\n</li>\n<li>剩下的错误，一律 Panic</li>\n</ul>\n<p>事实上这样写也有一点啰嗦. 在初识 Rust 后的一些进阶学习中, 我们会讲到 <strong>组合器</strong> 这个强大的工具</p>\n<p>有时, 在代码原型设计阶段我们不想处理错误, 或者我们不需要处理这个错误, 或者我们能保证这个操作不会触发错误, 那么我们就可以通过以下两个方法简化错误处理</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">use</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">std</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #E5C07B\">fs</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #E5C07B\">File</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">f</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">File</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #61AFEF\">open</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;hello.txt&quot;</span><span style=\"color: #ABB2BF\">).</span><span style=\"color: #61AFEF\">unwrap</span><span style=\"color: #ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">f</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">File</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #61AFEF\">open</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;hello.txt&quot;</span><span style=\"color: #ABB2BF\">).</span><span style=\"color: #61AFEF\">expect</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;Failed to open hello.txt&quot;</span><span style=\"color: #ABB2BF\">);</span></span></code></pre></div><p>其中 <code>unwrap</code> 方法代表直接解构 <code>Result</code>, 成功就返回, 不成功就 Panic. <code>expect</code> 方法与之类似, 只不过可以附带一段额外的错误信息</p>\n<h2 id=\"错误传播\"><a href=\"#错误传播\" class=\"headerlink\" title=\"错误传播\"></a>错误传播</h2><p>有时我们可能不需要在某个函数内部就地解决问题, 需要把错误层层向上传递, 让上层决策者决定如何处理问题, 这个时候我们可以考虑将错误信息封装进 <code>Result</code> 作为函数返回值移交给上层调用者</p>\n<p>比如我们想要将文件的内容读取到字符串中</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">use</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">std</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #E5C07B\">fs</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #E5C07B\">File</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">use</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">std</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #E5C07B\">io</span><span style=\"color: #ABB2BF\">::{</span><span style=\"color: #E5C07B\">self</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E5C07B\">Read</span><span style=\"color: #ABB2BF\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">read_file</span><span style=\"color: #ABB2BF\">() -&gt; </span><span style=\"color: #E5C07B\">Result</span><span style=\"color: #ABB2BF\">&lt;</span><span style=\"color: #E5C07B\">String</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">io</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #E5C07B\">Error</span><span style=\"color: #ABB2BF\">&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">f</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">File</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #61AFEF\">open</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;hello.txt&quot;</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">mut</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">f</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">match</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">f</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">        // 打开文件成功, 将 file 句柄绑定给 f</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #E5C07B\">Ok</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">file</span><span style=\"color: #ABB2BF\">) =&gt; </span><span style=\"color: #E06C75\">file</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">        // 打开文件失败, 将错误返回(向上传播)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #E5C07B\">Err</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">e</span><span style=\"color: #ABB2BF\">) =&gt; </span><span style=\"color: #C678DD\">return</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Err</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">e</span><span style=\"color: #ABB2BF\">),</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    };</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">    // 创建动态字符串</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">mut</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">s</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">String</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #61AFEF\">new</span><span style=\"color: #ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">    // 从 f 文件句柄读取数据并写入动态字符串</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">match</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">f</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">read_to_string</span><span style=\"color: #ABB2BF\">(&amp;</span><span style=\"color: #C678DD\">mut</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">s</span><span style=\"color: #ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">        // 读取成功, 返回 Ok 封装的字符串</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #E5C07B\">Ok</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">_</span><span style=\"color: #ABB2BF\">) =&gt; </span><span style=\"color: #E5C07B\">Ok</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">s</span><span style=\"color: #ABB2BF\">),</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">        // 读取失败, 将错误向上传播</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #E5C07B\">Err</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">e</span><span style=\"color: #ABB2BF\">) =&gt; </span><span style=\"color: #E5C07B\">Err</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">e</span><span style=\"color: #ABB2BF\">),</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span></code></pre></div><p>上面的代码很好的实现了我们的需求, 但还有一个问题 ,有些过于冗长. 幸运的是, Rust为我们提供了一个很甜的 <strong>语法糖</strong> — <code>?</code> 运算符</p>\n<p>下面让我们来看看这颗语法糖到底有多甜, 同样的功能用 <code>?</code> 重新实现:</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">use</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">std</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #E5C07B\">fs</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #E5C07B\">File</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">use</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">std</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #E5C07B\">io</span><span style=\"color: #ABB2BF\">::{</span><span style=\"color: #E5C07B\">self</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E5C07B\">Read</span><span style=\"color: #ABB2BF\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">read_username_from_file</span><span style=\"color: #ABB2BF\">() -&gt; </span><span style=\"color: #E5C07B\">Result</span><span style=\"color: #ABB2BF\">&lt;</span><span style=\"color: #E5C07B\">String</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">io</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #E5C07B\">Error</span><span style=\"color: #ABB2BF\">&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">mut</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">f</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">File</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #61AFEF\">open</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;hello.txt&quot;</span><span style=\"color: #ABB2BF\">)?;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">mut</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">s</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">String</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #61AFEF\">new</span><span style=\"color: #ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">f</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">read_to_string</span><span style=\"color: #ABB2BF\">(&amp;</span><span style=\"color: #C678DD\">mut</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">s</span><span style=\"color: #ABB2BF\">)?;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">Ok</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">s</span><span style=\"color: #ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span></code></pre></div><p>简洁而高效, 实际上 <code>?</code> 的本质是一个宏, 实现了与 <code>match</code> 类似的功能, 但在某些方面更加强大</p>\n<p>比如 <code>?</code> 是可以链式调用的, 上面的代码可以进一步缩短:</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">use</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">std</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #E5C07B\">fs</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #E5C07B\">File</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">use</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">std</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #E5C07B\">io</span><span style=\"color: #ABB2BF\">::{</span><span style=\"color: #E5C07B\">self</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E5C07B\">Read</span><span style=\"color: #ABB2BF\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">read_username_from_file</span><span style=\"color: #ABB2BF\">() -&gt; </span><span style=\"color: #E5C07B\">Result</span><span style=\"color: #ABB2BF\">&lt;</span><span style=\"color: #E5C07B\">String</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">io</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #E5C07B\">Error</span><span style=\"color: #ABB2BF\">&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">mut</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">s</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">String</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #61AFEF\">new</span><span style=\"color: #ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">File</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #61AFEF\">open</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;hello.txt&quot;</span><span style=\"color: #ABB2BF\">)?.</span><span style=\"color: #61AFEF\">read_to_string</span><span style=\"color: #ABB2BF\">(&amp;</span><span style=\"color: #C678DD\">mut</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">s</span><span style=\"color: #ABB2BF\">)?;</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">    // 事实上 Rust 标准库提供了 `fs::read_to_string()` 函数提供了以上一条龙服务</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">Ok</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">s</span><span style=\"color: #ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span></code></pre></div><h3 id=\"关于-的拓展\"><a href=\"#关于-的拓展\" class=\"headerlink\" title=\"关于 ? 的拓展\"></a>关于 ? 的拓展</h3><p>比如一个设计良好的系统中, 肯定有自定义的错误特征, 错误之间存在着上下级关系, 例如标准库中的 <code>std::io::Error</code> 和 <code>std::error::Error</code>, 前者是 <code>IO</code> 相关的错误结构体, 而后者是一个最最通用的 <strong>标准错误特征</strong>, 同时前者实现了后者, 因此 <code>std::io::Error</code> 可以转换为 <code>std:error::Error</code></p>\n<p>明白了以上的错误转换就能更好地理解 <code>?</code> 的强大了, 首先它可以自动进行类型提升</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">open_file</span><span style=\"color: #ABB2BF\">() -&gt; </span><span style=\"color: #E5C07B\">Result</span><span style=\"color: #ABB2BF\">&lt;</span><span style=\"color: #E5C07B\">File</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E5C07B\">Box</span><span style=\"color: #ABB2BF\">&lt;</span><span style=\"color: #C678DD\">dyn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">std</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #E06C75\">error</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #E5C07B\">Error</span><span style=\"color: #ABB2BF\">&gt;&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">mut</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">f</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">File</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #61AFEF\">open</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;hello.txt&quot;</span><span style=\"color: #ABB2BF\">)?;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">Ok</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">f</span><span style=\"color: #ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span></code></pre></div><p>上面代码中 <code>File::open</code> 报错时返回的错误是 <code>std::io::Error</code> 类型, 但是 <code>open_file</code> 函数最终返回了一个实现了 <code>std::error::Error</code> 的 Trait Object. 一个错误类型通过 <code>?</code> 返回成了另一个错误类型. 这是因为标准库中有一个 <code>From trait</code>, 该 Trait 有一个 <code>from</code> 方法用于把一个类型转成另外一个类型, 而 <code>?</code> 可以自动调用该方法, 然后进行隐式类型转换. 因此只要函数返回的错误 <code>ReturnError</code> 实现了 <code>From&lt;OtherError&gt; trait</code>, 那么 <code>?</code> 就会自动把 <code>OtherError</code> 转换为 <code>ReturnError</code></p>\n<p>这种转换非常好用, 意味着你可以构建一个大而全的 <code>ReturnError</code> 来覆盖所有错误类型, 只需为各种子错误类型实现这种转换即可</p>\n<p>实际上 <code>?</code> 不仅仅可以用于 <code>Result</code> 的传播, 还能用于 <code>Option</code> 的传播. 成功返回 <code>Some(T)</code>, 失败返回 <code>None</code></p>\n<p>最后有两点需要注意:</p>\n<ul>\n<li><code>?</code> 需要一个变量来承载正确的值, 只有发生了错误才能直接返回, 因此类似 <code>func()?</code> 的表达式作为最终的返回值是不可以的</li>\n<li><code>?</code> 只能在以 <code>Result</code> 为返回值的函数中使用. 那是不是代表着 <code>main</code> 函数与 <code>?</code> 无缘了呢? 不会的, 事实上 Rust 也支持返回 <code>Result</code> 的 <code>main</code> 函数:</li>\n</ul>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">use</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">std</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #E5C07B\">error</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #E5C07B\">Error</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">main</span><span style=\"color: #ABB2BF\">() -&gt; </span><span style=\"color: #E5C07B\">Result</span><span style=\"color: #ABB2BF\">&lt;(), </span><span style=\"color: #E5C07B\">Box</span><span style=\"color: #ABB2BF\">&lt;</span><span style=\"color: #C678DD\">dyn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Error</span><span style=\"color: #ABB2BF\">&gt;&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">Ok</span><span style=\"color: #ABB2BF\">(())</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span></code></pre></div><p>这样就能使用 <code>?</code> 了. 可以看到返回的错误是 <code>Box&lt;dyn Error&gt;</code> , 因为 <code>std::error:Error</code> 是 Rust 中抽象层次最高的错误, 所以就算 <code>main</code> 函数中调用任何标准库函数发生错误, 都可以进行返回。</p>\n<p>至于 <code>main</code> 函数可以有多种返回值, 那是因为实现了 <code>std::process::Termination trait</code> , 只是目前为止该特征尚未稳定</p>\n<p>最后提一下, 事实上在 <code>?</code> 之前, Rust 有一个 <code>try!</code> 宏用于捕获错误, 只是如今这个宏在所有方面都不如 <code>?</code>, 因此还是不要使用的好</p>\n","feature":false,"text":"介绍流程控制, 用于构建程序结构. 了解 Match 模式匹配, 如何用 Match 进行错误处理...","permalink":"/post/RustCourse-05","photos":[],"count_time":{"symbolsCount":"17k","symbolsTime":"16 mins."},"categories":[{"name":"Course","slug":"Course","count":11,"path":"api/categories/Course.json"}],"tags":[{"name":"Rust","slug":"Rust","count":12,"path":"api/tags/Rust.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6\"><span class=\"toc-text\">流程控制</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#if-else-%E6%9D%A1%E4%BB%B6%E5%88%86%E6%94%AF\"><span class=\"toc-text\">if-else 条件分支</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#for-%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%BE%AA%E7%8E%AF\"><span class=\"toc-text\">for 迭代器循环</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%9C%89%E5%93%AA%E4%BA%9B%E4%BC%98%E5%8A%BF\"><span class=\"toc-text\">迭代器有哪些优势</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#While-%E6%9D%A1%E4%BB%B6%E5%BE%AA%E7%8E%AF\"><span class=\"toc-text\">While 条件循环</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Loop-%E6%97%A0%E9%99%90%E5%BE%AA%E7%8E%AF\"><span class=\"toc-text\">Loop 无限循环</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Break-Continue-%E4%B8%8E-Lable\"><span class=\"toc-text\">Break, Continue 与 Lable</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D\"><span class=\"toc-text\">模式匹配</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#match\"><span class=\"toc-text\">match</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">基本操作</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%8E%B7%E5%BE%97%E4%B8%80%E4%B8%AA%E5%BC%95%E7%94%A8\"><span class=\"toc-text\">获得一个引用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E6%9E%84%E5%A4%8D%E5%90%88%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">解构复合类型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BF%BD%E7%95%A5%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">忽略变量</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%98%E9%87%8F%E9%81%AE%E8%94%BD\"><span class=\"toc-text\">变量遮蔽</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8C%B9%E9%85%8D%E5%AE%88%E5%8D%AB\"><span class=\"toc-text\">匹配守卫</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8B%93%E5%B1%95-match-%E5%AE%8F\"><span class=\"toc-text\">拓展: match! 宏</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#if-let-%E4%B8%8E-while-let\"><span class=\"toc-text\">if let 与 while let</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%8F%AF%E8%83%BD%E5%AD%98%E5%9C%A8%E7%9A%84%E5%80%BC\"><span class=\"toc-text\">可能存在的值</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86\"><span class=\"toc-text\">错误处理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%8D%E5%8F%AF%E6%81%A2%E5%A4%8D%E7%9A%84%E9%94%99%E8%AF%AF%E4%B8%8E-panic-%E5%AE%8F%E7%9A%84%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">不可恢复的错误与 panic! 宏的简单介绍</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%A2%AB%E5%8A%A8%E8%A7%A6%E5%8F%91\"><span class=\"toc-text\">被动触发</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%BB%E5%8A%A8%E8%B0%83%E7%94%A8\"><span class=\"toc-text\">主动调用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Backtrace-%E6%A0%88%E5%B1%95%E5%BC%80\"><span class=\"toc-text\">Backtrace 栈展开</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Panic-%E7%BB%88%E6%AD%A2%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">Panic 终止方式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Panic-%E5%90%8E%E4%BC%9A%E6%80%8E%E4%B9%88%E6%A0%B7\"><span class=\"toc-text\">Panic 后会怎么样</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%AF%E6%81%A2%E5%A4%8D%E7%9A%84%E9%94%99%E8%AF%AF%E4%B8%8E-Result-%E6%9E%9A%E4%B8%BE\"><span class=\"toc-text\">可恢复的错误与 Result 枚举</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%94%99%E8%AF%AF%E4%BC%A0%E6%92%AD\"><span class=\"toc-text\">错误传播</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%B3%E4%BA%8E-%E7%9A%84%E6%8B%93%E5%B1%95\"><span class=\"toc-text\">关于 ? 的拓展</span></a></li></ol></li></ol></li></ol>","author":{"name":"芳塔洛斯","slug":"blog-author","avatar":"https://fontlos.com/icons/avatar.jpg","link":"/","description":"来人间一趟, 为散步一场<br />待走出岁月, 何样的彼方<br />才配得上这一路的颠沛与时光","socials":{"github":"https://github.com/fontlos","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"https://fontlos.com/icons/bilibili.svg","link":"https://space.bilibili.com/362772872"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"初识 Rust(6) | 方法, 泛型, Trait, 生命周期, 集合类型","uid":"91ba0ade330f247ed224e1b5c95f6039","slug":"RustCourse-06","date":"2021-06-08T12:32:17.000Z","updated":"2024-03-06T02:36:48.107Z","comments":true,"path":"api/articles/RustCourse-06.json","keywords":"Programming, Web, Frontend, Backend ,Rust, Blog, Aurora, Fontlos, 芳塔洛斯","cover":"https://fontlos.com/cover/ferris.png","text":"为类型实现方法. 如何使用泛型类型, 认识 Trait 和 Trait Object, 初步了解生命周期. 介绍集合类型, 动态数组, 基于动态数组的可变长度字符串, KV 存储....","permalink":"/post/RustCourse-06","photos":[],"count_time":{"symbolsCount":"17k","symbolsTime":"16 mins."},"categories":[{"name":"Course","slug":"Course","count":11,"path":"api/categories/Course.json"}],"tags":[{"name":"Rust","slug":"Rust","count":12,"path":"api/tags/Rust.json"}],"author":{"name":"芳塔洛斯","slug":"blog-author","avatar":"https://fontlos.com/icons/avatar.jpg","link":"/","description":"来人间一趟, 为散步一场<br />待走出岁月, 何样的彼方<br />才配得上这一路的颠沛与时光","socials":{"github":"https://github.com/fontlos","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"https://fontlos.com/icons/bilibili.svg","link":"https://space.bilibili.com/362772872"}}}},"feature":false},"next_post":{"title":"初识 Rust(3) | 变量, 常量, 语句和表达式, 原生类型","uid":"4982b3ac55a9e6b7056efc0b28169dff","slug":"RustCourse-03","date":"2021-06-08T04:10:27.000Z","updated":"2024-03-06T02:36:48.107Z","comments":true,"path":"api/articles/RustCourse-03.json","keywords":"Programming, Web, Frontend, Backend ,Rust, Blog, Aurora, Fontlos, 芳塔洛斯","cover":"https://fontlos.com/cover/ferris.png","text":"对变量进行绑定, 解构与遮蔽. 什么是不可变变量, 为什么变量默认不可变, 与常量的区别是什么. 如何声明常量. 什么是语句和表达式. Rust 底层实现的原生类型有哪些...","permalink":"/post/RustCourse-03","photos":[],"count_time":{"symbolsCount":"7.6k","symbolsTime":"7 mins."},"categories":[{"name":"Course","slug":"Course","count":11,"path":"api/categories/Course.json"}],"tags":[{"name":"Rust","slug":"Rust","count":12,"path":"api/tags/Rust.json"}],"author":{"name":"芳塔洛斯","slug":"blog-author","avatar":"https://fontlos.com/icons/avatar.jpg","link":"/","description":"来人间一趟, 为散步一场<br />待走出岁月, 何样的彼方<br />才配得上这一路的颠沛与时光","socials":{"github":"https://github.com/fontlos","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"https://fontlos.com/icons/bilibili.svg","link":"https://space.bilibili.com/362772872"}}}},"feature":false}}