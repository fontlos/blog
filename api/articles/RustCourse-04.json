{"title":"初识 Rust(4) | 作用域, 所有权机制, 函数与返回值, 复合类型, Module 与可见性","uid":"692ddd8a7f3465e5861ddef99bf86d5f","slug":"RustCourse-04","date":"2021-06-08T04:10:27.000Z","updated":"2024-03-06T02:36:48.107Z","comments":true,"path":"api/articles/RustCourse-04.json","keywords":"Programming, Web, Frontend, Backend ,Rust, Blog, Aurora, Fontlos, 芳塔洛斯","cover":"https://fontlos.com/cover/ferris.png","content":"<h1 id=\"变量作用域\"><a href=\"#变量作用域\" class=\"headerlink\" title=\"变量作用域\"></a>变量作用域</h1><p>这是一个简单的概念, 在绝大多数编程语言中都有作用域, 且几乎相同, 让我们通过一个小例子来理解</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #ABB2BF\">{</span><span style=\"color: #7F848E; font-style: italic\"> // a 在这里尚未声明</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">a</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">0</span><span style=\"color: #ABB2BF\">;</span><span style=\"color: #7F848E; font-style: italic\"> // a 的作用域从这里开始</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    {</span><span style=\"color: #7F848E; font-style: italic\"> // b 在这里尚未声明, a 在这里仍然有效</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">b</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">0</span><span style=\"color: #ABB2BF\">;</span><span style=\"color: #7F848E; font-style: italic\"> // b 的作用域从这里开始</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">        // 使用 b</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    }</span><span style=\"color: #7F848E; font-style: italic\"> // b 的作用域到此结束, 不再有效</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">    // 使用 a</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span><span style=\"color: #7F848E; font-style: italic\"> // a 的作用域到此结束, 不再有效</span></span>\n<span class=\"line\"></span></code></pre></div><h1 id=\"所有权机制\"><a href=\"#所有权机制\" class=\"headerlink\" title=\"所有权机制\"></a>所有权机制</h1><p>程序的本质就是计算机按照一定的规则来操作内存, 如何申请新的内存, 释放不必要的内存, 保证需要的内存时刻可用, 成为了所有编程语言的重中之重</p>\n<p>如何管理内存, 在编程语言的发展中摸索出了两条主流做法:</p>\n<ol>\n<li><strong>手动管理内存</strong>, 如 C&#x2F;C++, 需要通过函数调用来申请和释放内存, 心智负担最大, 但性能最高, 新生的 Zig 语言更是一个典型, 甚至没有隐式的内存分配</li>\n<li><strong>GC (垃圾回收机制)</strong>,如 Java, 新生的 Go, 通过在程序运行期间不断寻找不再需要的内存并释放, 心智负担最小, 但性能一般较低</li>\n</ol>\n<p>而 Rust 语言探索出了第三条方法, 就是我们要介绍的 <strong>所有权机制</strong>: 通过指定一系列规则, 让编译器在编辑期就做好绝大多数内存安全检查, 对于初学者心智负担较大, 但这种检查只发生在编译期, 因此对于程序运行时没有任何性能损失</p>\n<p>由于这是一个新的概念, 无论有无编程基础都需要一段时间来习惯, 而一旦掌握这些规则, 写起来会越发顺手, 海阔天空</p>\n<h2 id=\"一段内存不安全的-C-代码\"><a href=\"#一段内存不安全的-C-代码\" class=\"headerlink\" title=\"一段内存不安全的 C 代码\"></a>一段内存不安全的 C 代码</h2><div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">int*</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">return_one</span><span style=\"color: #ABB2BF\">() {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">int</span><span style=\"color: #ABB2BF\"> one </span><span style=\"color: #C678DD\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\">;</span><span style=\"color: #7F848E; font-style: italic\"> // one 作用域的开始</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">char</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">*</span><span style=\"color: #ABB2BF\">hello </span><span style=\"color: #C678DD\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #98C379\">&quot;hello&quot;</span><span style=\"color: #ABB2BF\">;</span><span style=\"color: #7F848E; font-style: italic\"> // hello 作用域的开始</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">return</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">&amp;</span><span style=\"color: #ABB2BF\">one;</span><span style=\"color: #7F848E; font-style: italic\"> // 尝试返回一个在函数内部创建的值得引用</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span><span style=\"color: #7F848E; font-style: italic\"> // one 和 hello 的作用域结束, 内存被回收销毁</span></span></code></pre></div><p>虽然这段代码可以被编译, 但事实上充满了内存安全问题</p>\n<p>函数内部创建 <code>one</code> 这个变量并存储在 <strong>栈</strong> 上, 但栈上的内存在离开作用域后会被系统回收, 而最后函数返回 <code>one</code> 的地址, 这段地址将会指向一片未知的空间, 这就是 <strong>Dangling Pointer (悬垂引用)</strong>, 最后获得的 <code>one</code> 究竟是什么是无法预知的</p>\n<p>随后, 变量 <code>hello</code>, 这这常量字符串将会被编码到常量区, 但这个字符串并没有任何作用, 可位于常量区的内存将会在整个程序结束后才被回收</p>\n<p>根据微软公开的报告, 近 <strong>70%</strong> 的 Bug 都是 <strong>内存安全问题</strong>, 可见这个问题影响之深远.</p>\n<p>但随着 Rust 的出现, 这类问题几乎可以被杜绝, 这到底是如何做到的呢</p>\n<h2 id=\"预备知识-Stack-and-Heap-堆栈\"><a href=\"#预备知识-Stack-and-Heap-堆栈\" class=\"headerlink\" title=\"预备知识: Stack and Heap (堆栈)\"></a>预备知识: Stack and Heap (堆栈)</h2><p>堆栈是内存的两种不同形式, 在大多数现代语言中无需了解, 但 Rust 作为一门偏底层的系统级语言, 以及为了更好的了解所有权机制, 了解堆栈, 知道内存分配在何处是十分重要的, 这将直接影响程序的性能</p>\n<h3 id=\"栈\"><a href=\"#栈\" class=\"headerlink\" title=\"栈\"></a>栈</h3><p>存储在栈中的内存 <strong>先进后出</strong> 就像在一根螺丝上拧上一个个螺母, 不可能在最后拧上的螺母被取下之前去除螺丝上的第一个螺母</p>\n<p>向栈中存入数据称为 <strong>进栈或压栈 (Push)</strong>, 取出数据称为 <strong>出栈 (Pop)</strong></p>\n<p>栈要求每一个数据的大小都是已知且固定的, 以方便顺序压入和取出</p>\n<h3 id=\"堆\"><a href=\"#堆\" class=\"headerlink\" title=\"堆\"></a>堆</h3><p>堆主要用于弥补栈的不足, 用于存储大小未知, 或者可能发生改变的数据</p>\n<p>存入数据时, 堆会寻找一块足够大的空间, 将其标记为已使用, 并返回一个指向这里的 <strong>内存地址 (也称指针 Pointer)</strong>, 这个过程称为 <strong>分配 (Allocating)</strong>, 随后将返回的内存地址压入栈中, 后续通过访问栈中的指针来访问实际内存</p>\n<h3 id=\"性能对比\"><a href=\"#性能对比\" class=\"headerlink\" title=\"性能对比\"></a>性能对比</h3><p>很容易发现, 栈是一种更高效的内存分配方式:</p>\n<ul>\n<li>写入数据: 因为每次压入新的数据无需分配新的空间, 只需要在栈顶进行操作即可, 而堆分配需要寻找空间, 标记空间, 为下一次分配作准备等等</li>\n<li>读取数据: 得益于 CPU 高速 Cache, 栈上的内存多数时候可以直接存放到 Catch, 减少 CPU 对内存的直接访问, 有时可以带来数十倍的性能差距. 而堆内存只能存储在内存中, 而且需要先访问栈获得指针才能使用</li>\n</ul>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>在栈中分配的内存, 在函数调用时顺序压入, 在函数调用结束时逆序弹出, 内存失效, 此时再进行引用操作就会产生悬垂引用</p>\n<p>而堆上的内存缺乏组织, 因此对堆内存的追踪管理时十分重要的, 否则将会产生 <strong>内存泄漏</strong>, 导致一部分内存永远无法通过程序自身进行回收</p>\n<p>而 Rust 的所有权机制就为解决以上这些问题提供了强大的保障</p>\n<p>最后, 再大多数语言, 以及 Rust 开发中, 都不是必须理解堆栈的原理</p>\n<p>但理解这些, 对我们 <strong>剖析所有权</strong> 的工作原理有很大的帮助</p>\n<h2 id=\"所有权原则\"><a href=\"#所有权原则\" class=\"headerlink\" title=\"所有权原则\"></a>所有权原则</h2><p>Rust 为了实现所有权内存管理, 在编译器层面制定了三条规则:</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ol>\n<li>每个值都被一个变量所拥有, 称为 Owner</li>\n<li>每个值在同一时间仅能被一个 Owner 所拥有</li>\n<li>当Owner 离开作用域时, 这个值将被 <strong>Drop (丢弃)</strong></li>\n</ol></blockquote>\n<p>这里我们先用 <code>String</code> 类型进行举例, 详细内容将会在后面的文章介绍</p>\n<p>Rust 中最常用的字符串之一 <code>&amp;str</code> 我们已经见过了, 它将被硬编码到程序里. 字符串字面量很好用, 但也有一些缺陷, 比如, 它无法被改变</p>\n<p>这种时候就需要可变长度字符串 <code>String</code> 类型了</p>\n<p>可以通过标准库中的函数来创建它</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">hello</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">String</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #61AFEF\">from</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;Hello&quot;</span><span style=\"color: #ABB2BF\">);</span></span></code></pre></div><p>下面让我们以 <code>String</code> 为基础了解一下变量绑定背后的事</p>\n<h3 id=\"转移所有权\"><a href=\"#转移所有权\" class=\"headerlink\" title=\"转移所有权\"></a>转移所有权</h3><p>先来看看原生类型</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">a</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">b</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">a</span><span style=\"color: #ABB2BF\">;</span></span></code></pre></div><p>很简单, 首先将值 <code>1</code> 绑定给 <code>a</code>, 接下来 <strong>Copy (拷贝)</strong> <code>a</code> 的值并绑定给 <code>b</code>, 这样 <code>a</code> 和 <code>b</code> 的值均为 <code>1</code></p>\n<p>因为原生类型都是大小固定的简单值, 在后面的文章我们会了解到他们都实现了 <code>Copy trait</code>, 因此这两个变量是通过自动拷贝进行变量绑定的, 整个过程完全在栈上完成. 对这种简单值得拷贝并不会带来性能影响而且速度非常快, 比如示例中得 <code>i32</code> 类型, 只需要复制 4 个字节得内存即可</p>\n<p>接下来看看 <code>String</code> 类型</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">a</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">String</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #61AFEF\">from</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;Hello&quot;</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">b</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">a</span><span style=\"color: #ABB2BF\">;</span></span></code></pre></div><p>看起来似乎和上面完全一样, 但实际上背后的工作流程完全不同</p>\n<p><code>String</code> 是一个复杂类型, 为了实现可变, 必须被分配到堆上, 因此这个类型由 <strong>指向堆内存得指针, 字符串长度, 字符串容量</strong> 组成</p>\n<p>显而易见, 如果要完全拷贝 <code>String</code> 与 <strong>,实际储存在堆上的字节数组</strong>, 涉及到内存分配, 对性能会带来很大的影响</p>\n<p>但如果只拷贝 <code>String</code> 类型本身, 那么就只需要拷贝以上三个内存大小固定且已知得量即可, 方便快捷, 所以 Rust 毫无疑问的选择了这一种做法</p>\n<p>但这带来一个新的问题, 想想所有权原则的第二条, 那么此时, 将会有两个指针指向同一片堆内存, 即一个值有了两个 Owner. 但是这又如何呢</p>\n<p>想象一下, 如果这件事发生了, 当 <code>a</code> 离开作用域时, 对应的内存被 Drop, 而当 <code>b</code> 离开作用域时, 程序会尝试在已被 Drop 的内存上再次进行 Drop, 这被称为 <strong>Double Free (二次释放)</strong> 错误, 同样可能导致内存安全问题</p>\n<p>因此, Rust 的解决方式是, 将 <code>a</code> 赋值给 <code>b</code> 的同时, 将 <code>a</code> 手中的 <strong>所有权转交给</strong> 了 <code>b</code>, 此时 <code>a</code> 不再有效, 原来的值只有 <code>b</code> 一个 Owner, 所以以下的代码无法运行</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">a</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">String</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #61AFEF\">from</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;Hello&quot;</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">b</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">a</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;{}, world!&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">a</span><span style=\"color: #ABB2BF\">);</span></span></code></pre></div><p>如果你有一些编程基础, 可能听过类似 <strong>Shallow Copy (浅拷贝)</strong> 和 <strong>Deep Copy (深拷贝)</strong>, 那么 <code>String</code> 类型的这种转移所有权的机制看起来有点像浅拷贝, 但是别忘了在 <code>a</code> 赋值给 <code>b</code> 后 <code>a</code> 的值就失效了, 因此这里我们用一个更形象的说法, 将这个操作称之为 <strong>Move (移动)</strong></p>\n<p>了解了这些, 就应该能更清楚的明白为什么 Rust 称呼 <code>let valuable = value</code> 为 <strong>绑定</strong> 而非 <strong>赋值</strong> 了吧</p>\n<p>而事实上, Rust 中也有与深拷贝和浅拷贝对应的概念</p>\n<h3 id=\"克隆\"><a href=\"#克隆\" class=\"headerlink\" title=\"克隆\"></a>克隆</h3><p><strong>Clone</strong> 对应着一般意义上的深拷贝, Rust 永远不会自动执行这一过程, 深拷贝必须是显示的, 比如 <code>String</code> 类型如果真的有必要进行深度复制, 可以使用 <code>clone</code> 方法, 当然, 这涉及到高昂的内存分配, 请谨慎使用</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">a</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">String</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #61AFEF\">from</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;Hello&quot;</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">b</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">a</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">clone</span><span style=\"color: #ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;a = {}, b = {}&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">a</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">b</span><span style=\"color: #ABB2BF\">);</span></span></code></pre></div><p>对于其他类型的深拷贝, 可能需要实现 <code>Clone trait</code></p>\n<h3 id=\"拷贝\"><a href=\"#拷贝\" class=\"headerlink\" title=\"拷贝\"></a>拷贝</h3><p><strong>Copy</strong> 对应着一般意义上的浅拷贝, 这只发生在栈上, 因此性能很高</p>\n<p>让我们再看一遍字符串字面量</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">a</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #98C379\">&quot;Hello&quot;</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">b</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">a</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;{}, world!&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">a</span><span style=\"color: #ABB2BF\">);</span></span></code></pre></div><p>如果参考之前的 <code>String</code> 的例子, 没有调用 <code>clone</code> 方法那这段代码也应该报错才是</p>\n<p>但这和之前的例子有一个本质上的区别: 在 <code>String</code> 的例子中 <code>a</code> 是持有所有权的, 而这个例子中 <code>a</code> 只是引用了硬编码在二进制中的字符串 <code>&quot;Hello&quot;</code>, 并没有持有所有权</p>\n<p>因此 <code>let b = a</code> 中, 仅仅是对该引用进行了拷贝, 此时 <code>a</code> 和 <code>b</code> 都引用了同一个字符串</p>\n<p>能进行拷贝的值都需要实现 <code>Copy trait</code>, 实现了这个 Trait 的类型主要有以下这些: 任何基本类型的组合, 不需要分配内存或某种形式资源的类型</p>\n<p>具体如下:</p>\n<ol>\n<li>所有整数类型, 如 <code>i32</code></li>\n<li>布尔类型 <code>bool</code></li>\n<li>所有浮点数类型, 如 <code>f64</code></li>\n<li>字符类型 <code>char</code></li>\n<li>元组, 当且仅当其包含所有元素的类型也都是 Copy 的时候</li>\n<li>不可变引用 <code>&amp;T</code> ,例如上面的最后一个例子, 但是注意, 可变引用 <code>&amp;mut T</code> 是不可以 Copy 的</li>\n</ol>\n<h3 id=\"引用与借用\"><a href=\"#引用与借用\" class=\"headerlink\" title=\"引用与借用\"></a>引用与借用</h3><p>在上面的例子中, 我们提到了一个概念 — <strong>引用</strong></p>\n<p>事实上, 如果仅仅支持通过移动所有权来获得一个值, 程序将变得更加复杂, 所幸, Rust 也像大多数语言那样, 提供了对某个变量的引用. 只不过, 在 Rust 中, 我们更习惯将它称为 <strong>Borrowing (借用)</strong>, 就像字面意思, <strong>有借有还</strong>, 而且 <strong>借</strong> 能发生的前提是这个量是有主人的</p>\n<p>通过 <code>&amp;</code> 运算符可以获得一个借用, 或者说常规意义上的 <strong>引用</strong>, 这是一个指针类型, 指向了对象存储的内存地址, <strong>引用仅仅允许使用该值, 而没有所有权</strong></p>\n<p>引用默认是不可变的, 离开作用域不会导致值的 Drop</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">x</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">0</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">{</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">y</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> &amp;</span><span style=\"color: #E06C75\">x</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">    // Do something with y</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span><span style=\"color: #7F848E; font-style: italic\"> // y 离开作用域但无事发生</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// x 仍然可用</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// assert_eq 宏用于判断两个变量是否完全相同</span></span>\n<span class=\"line\"><span style=\"color: #61AFEF\">assert_eq!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #D19A66\">0</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">x</span><span style=\"color: #ABB2BF\">);</span></span></code></pre></div><p>Rust 中还提供了一个专门的 <strong>Reference (引用)</strong> 关键字 <code>ref</code>, 这与 <code>&amp;</code> 有什么区别呢? 举一个例子, 就像我们写作文引用名人名言那样, 有的时候实在想不出来了, 那就引用一个不存在的名人吧 (你说对吧, 沃斯机所得先生). <code>ref</code> 就允许在对象被声明之前先获得一个引用</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// 下面就展示了两者的区别</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">ref</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">a</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E5C07B\">i32</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #E06C75\">a</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> &amp;</span><span style=\"color: #D19A66\">3</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">b</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> &amp;</span><span style=\"color: #D19A66\">2</span><span style=\"color: #ABB2BF\">;</span></span></code></pre></div><p>但是需要注意一点, <code>ref</code> 只能用于变量声明, 不能用来声明类型, 比如 <code>&amp;i32</code> 是一个合法的引用类型, 但 <code>ref i32</code> 不是</p>\n<p>事实上, 和 <code>ref</code> 与接下来要提到的 <code>*</code> 一样, <code>&amp;</code> 同样可以用于变量声明, 比如:</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// &amp;a 这个整体是一个 &amp;i32 类型</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> &amp;</span><span style=\"color: #E06C75\">a</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">0</span><span style=\"color: #ABB2BF\">;</span></span></code></pre></div><p>关于 <code>ref</code> 与 <code>&amp;</code> 的细节问题可以看下面这个例子</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// 注意, 目前这段代码只能在 Nightly 版本运行</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">#![feature(core_intrinsics)]</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">main</span><span style=\"color: #ABB2BF\">() {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">x</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> &amp;</span><span style=\"color: #D19A66\">false</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">print_type_name_of</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">x</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> &amp;</span><span style=\"color: #E06C75\">y</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> &amp;</span><span style=\"color: #D19A66\">false</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">print_type_name_of</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">y</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">ref</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">z</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> &amp;</span><span style=\"color: #D19A66\">false</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">print_type_name_of</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">z</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">print_type_name_of</span><span style=\"color: #ABB2BF\">&lt;</span><span style=\"color: #E5C07B\">T</span><span style=\"color: #ABB2BF\">&gt;(</span><span style=\"color: #E06C75\">_</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E5C07B\">T</span><span style=\"color: #ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;The type of the value is {}&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #C678DD\">unsafe</span><span style=\"color: #ABB2BF\"> { </span><span style=\"color: #E5C07B\">std</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #E5C07B\">intrinsics</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #61AFEF\">type_name</span><span style=\"color: #ABB2BF\">::&lt;</span><span style=\"color: #E5C07B\">T</span><span style=\"color: #ABB2BF\">&gt;() })</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span></code></pre></div><p>运行结果如下:</p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #abb2bf\">The type of the value is &amp;bool</span></span>\n<span class=\"line\"><span style=\"color: #abb2bf\">The type of the value is bool</span></span>\n<span class=\"line\"><span style=\"color: #abb2bf\">The type of the value is &amp;&amp;bool</span></span></code></pre></div><p>其中第二条是最有趣的, 可以理解为 <strong>y 的引用是一个 Bool 类型的引用, 所以 y 是 Bool 类型</strong>, 似乎也有一点解引用的味道</p>\n<p>小小的总结一下:</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>作用于表达式, <code>&amp;</code> 表示借用, <code>ref</code> 无效<br>作用于变量绑定, <code>&amp;</code> 类似于下面会提到的 <code>*</code>, <code>ref</code> 表示引用类型<br>作用于类型声明, <code>&amp;</code> 表示引用类型, <code>ref</code> 无效<br>作用于模式匹配, <code>&amp;</code> 无效, <code>ref</code> 表示引用类型 (这将会在后面的文章提到)</p></blockquote>\n<h3 id=\"解引用\"><a href=\"#解引用\" class=\"headerlink\" title=\"解引用\"></a>解引用</h3><p>可以通过 <code>*</code> 运算符进行解引用, 来访问原始对象</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">x</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">0</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">y</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> &amp;</span><span style=\"color: #E06C75\">x</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #61AFEF\">assert_eq!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #D19A66\">0</span><span style=\"color: #ABB2BF\">, *</span><span style=\"color: #E06C75\">y</span><span style=\"color: #ABB2BF\">);</span></span></code></pre></div><h3 id=\"可变引用\"><a href=\"#可变引用\" class=\"headerlink\" title=\"可变引用\"></a>可变引用</h3><p>通过 <code>&amp;mut</code> (或者 <code>ref mut</code>) 来获得一个可变引用, 当然, 被引用的值也应该是可变的</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">mut</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">a</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">b</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> &amp;</span><span style=\"color: #C678DD\">mut</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">a</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">*</span><span style=\"color: #E06C75\">b</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">2</span></span>\n<span class=\"line\"><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;{}&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">b</span><span style=\"color: #ABB2BF\">);</span></span></code></pre></div><p>但要注意一点, 在 <strong>不存在可变引用</strong> 的情况下不可变引用可以存在 <strong>任意多个</strong></p>\n<p>而一旦存在可变引用, 就 <strong>不能存在</strong> 不可变引用, 且 <strong>同一个作用域</strong> 只能有一个可变引用</p>\n<p>前一个很好理解, 毕竟我们也不希望一个不可变的引用在某处突然莫名其妙的被修改了</p>\n<p>后一个对新手来说也是一个重难点, 被称为 <strong>Borrow Checker (编译器借用检查机制)</strong></p>\n<p>这种限制的好处就是使 Rust 在编译期就避免数据竞争, 数据竞争可由以下行为造成:</p>\n<ul>\n<li>两个或更多的指针同时访问同一数据</li>\n<li>至少有一个指针被用来写入数据</li>\n<li>没有同步数据访问的机制</li>\n</ul>\n<p>数据竞争会导致 <strong>UB(未定义行为)</strong>, 这种行为很可能超出我们的预期, 难以在运行时追踪, 并且难以诊断和修复, 所有 Rust 为了避免了这种情况直接拒绝编译存在数据竞争的代码</p>\n<p>但有的时候, 出于一些需要, 可能需要存在对变量的可变引用和不可变引用, 只要这两个不是同时发生就好</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>在 Rust 1.31 以后, 变量的作用域持续于整个 <code>{}</code>, 而引用不同, 在最后一次被使用后即离开作用域</p></blockquote>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">mut</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">s</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">String</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #61AFEF\">from</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;hello&quot;</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">ref1</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> &amp;</span><span style=\"color: #E06C75\">s</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;{}, world!&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">r1</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// 在 Rust 1.31 以后, r1 作用域在这里结束, 所以下面我们可以创建一个可变引用</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">r2</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> &amp;</span><span style=\"color: #C678DD\">mut</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">s</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;{}, world!&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">r2</span><span style=\"color: #ABB2BF\">);</span></span></code></pre></div><p>这种编译器优化行为被称为 <strong>Non-Lexical Lifetimes (NLL)</strong>, 专门用于找到某个引用在作用域结束前就不再被使用的代码位置</p>\n<p>或者需要多个可变引用, 就像上面提到的 “同一作用域”, 我们可以通过 <code>{}</code> 开辟新的作用域来实现这个需求</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">mut</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">hello</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">String</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #61AFEF\">from</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;hello&quot;</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">{</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">ref1</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> &amp;</span><span style=\"color: #C678DD\">mut</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">s</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span><span style=\"color: #7F848E; font-style: italic\"> // r1 在这里被 Drop, 所以我们可以创建一个新的可变引用</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">ref2</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> &amp;</span><span style=\"color: #C678DD\">mut</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">s</span><span style=\"color: #ABB2BF\">;</span></span></code></pre></div><h3 id=\"悬垂引用\"><a href=\"#悬垂引用\" class=\"headerlink\" title=\"悬垂引用\"></a>悬垂引用</h3><p>在本文的开头就提到了这个概念. Rust 编译器的 <strong>借用检查</strong> 可以确保引用永远也不会变成悬垂状态: 当你获取数据的引用后, 编译器会检查以确保数据不会在引用结束前被释放. 要想释放数据, 必须先停止其引用的使用</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">reference_to_nothing</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">strs</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">String</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #61AFEF\">from</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;hello&quot;</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">    // 下面这一行无法运行!</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    &amp;</span><span style=\"color: #E06C75\">strs</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">    // 改成这样移动所有权才可以</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">    // strs</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span></code></pre></div><h3 id=\"总结-1\"><a href=\"#总结-1\" class=\"headerlink\" title=\"总结\"></a>总结</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ol>\n<li>每个值都被一个变量所拥有, 称为 Owner</li>\n<li>每个值在同一时间仅能被一个 Owner 所拥有</li>\n<li>当Owner 离开作用域时, 这个值将被 <strong>Drop (丢弃)</strong></li>\n<li>同一时刻, 对一个值要么拥有一个可变引用, 要么拥有任意个不可变引用</li>\n</ol></blockquote>\n<p>介绍完所有权, 就方便我们介绍函数与一些复杂的类型了</p>\n<h1 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h1><h2 id=\"函数签名与声明\"><a href=\"#函数签名与声明\" class=\"headerlink\" title=\"函数签名与声明\"></a>函数签名与声明</h2><div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">function_name</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">arg</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E06C75\">arg_type</span><span style=\"color: #ABB2BF\">, ...) -&gt; </span><span style=\"color: #E06C75\">return_type</span><span style=\"color: #ABB2BF\">{</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">body</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span></code></pre></div><p>函数通过 <code>fn</code> 关键字声明, 后跟一个函数名称, 采用蛇形命名法, 小括号是 <strong>必须</strong> 的, 内部的参数是可选的, 参数需要有参数名称和参数类型, 多个参数通过 <code>,</code> 隔开. <code>-&gt; return_type</code> 表示返回一个值, 同样是可选的, 不需要名称, 只需要注明类型, 但注意, 一次 <strong>最多只能返回一个值</strong>, 多个返回值可以通过 <strong>返回元组</strong> 来实现, 最后必须跟上一个 <code>{}</code> 函数体</p>\n<p>函数声明的位置随意, 全局甚至在另一个函数内部, 即使在调用函数后才声明也无所谓, 只要有定义即可, Rust 不关心我们把函数放在哪</p>\n<p>函数默认会将最后一条表达式返回, 如果有需要也可以通过 <code>return</code> 关键字在任意位置提前返回</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">return_one</span><span style=\"color: #ABB2BF\">() -&gt; </span><span style=\"color: #E5C07B\">i32</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">one</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">one</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">return_two</span><span style=\"color: #ABB2BF\">() -&gt; </span><span style=\"color: #E5C07B\">i32</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">return</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">2</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;This will print nothing&quot;</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span></code></pre></div><h2 id=\"函数调用\"><a href=\"#函数调用\" class=\"headerlink\" title=\"函数调用\"></a>函数调用</h2><p>函数调用很简单, 只需要函数名后跟小括号, 内部按顺序传入参数即可</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">add</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">num1</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E5C07B\">i32</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">num2</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E5C07B\">i32</span><span style=\"color: #ABB2BF\">) -&gt; </span><span style=\"color: #E5C07B\">i32</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">num1</span><span style=\"color: #ABB2BF\"> + </span><span style=\"color: #E06C75\">num2</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">two</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">return_one</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\">);</span></span></code></pre></div><h2 id=\"特殊的返回类型\"><a href=\"#特殊的返回类型\" class=\"headerlink\" title=\"特殊的返回类型\"></a>特殊的返回类型</h2><h3 id=\"无返回值\"><a href=\"#无返回值\" class=\"headerlink\" title=\"无返回值\"></a>无返回值</h3><p>实际上对于每一个无返回值的函数, 都隐式的返回了一个 <strong>单元类型()</strong>, 本质是一个零长度的元组, 没有任何作用, 仅仅表示一个函数没有返回值</p>\n<p>实际上以分号 <code>;</code> 结尾的表达式同样隐式的返回了这个类型</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">return_nothing</span><span style=\"color: #ABB2BF\">(){</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;Return nothing&quot;</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// 显式指定, 但谁会闲得无聊这样做呢</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">return_nothing</span><span style=\"color: #ABB2BF\">() -&gt; () {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;Return nothing&quot;</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span></code></pre></div><h3 id=\"永不返回的发散函数\"><a href=\"#永不返回的发散函数\" class=\"headerlink\" title=\"永不返回的发散函数\"></a>永不返回的发散函数</h3><p>当用 <code>!</code> 作函数返回类型的时候, 表示该函数永不返回 (diverge function), 这种语法往往用做会导致程序崩溃的函数</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">dead_end</span><span style=\"color: #ABB2BF\">() -&gt; </span><span style=\"color: #56B6C2\">!</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">panic!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;Never return&quot;</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span></code></pre></div><h2 id=\"函数传值与所有权\"><a href=\"#函数传值与所有权\" class=\"headerlink\" title=\"函数传值与所有权\"></a>函数传值与所有权</h2><p>将值传入函数传出一样会发生 <strong>移动</strong> 或 <strong>复制</strong></p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">main</span><span style=\"color: #ABB2BF\">() {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">strs</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">String</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #61AFEF\">from</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;hello&quot;</span><span style=\"color: #ABB2BF\">);</span><span style=\"color: #7F848E; font-style: italic\"> // strs 进入作用域</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">takes_ownership</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">strs</span><span style=\"color: #ABB2BF\">);</span><span style=\"color: #7F848E; font-style: italic\"> // strs 的所有权移动到函数里</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">    // strs 不再有效</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">num</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">0</span><span style=\"color: #ABB2BF\">;</span><span style=\"color: #7F848E; font-style: italic\"> // num 进入作用域</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">copy</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">num</span><span style=\"color: #ABB2BF\">);</span><span style=\"color: #7F848E; font-style: italic\"> // num 应该移动函数里, 但 i32 实现了 Copy 所以在后面可继续使用 num</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span><span style=\"color: #7F848E; font-style: italic\"> // 这里 num 先被 Drop, 然后是 strs, 但 strs 的所有权已被移走</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">takes_ownership</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">strs</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E5C07B\">String</span><span style=\"color: #ABB2BF\">) {</span><span style=\"color: #7F848E; font-style: italic\"> // strs 进入作用域</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;{}&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">strs</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span><span style=\"color: #7F848E; font-style: italic\"> // strs 被 Drop</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">copy</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">num</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E5C07B\">i32</span><span style=\"color: #ABB2BF\">) {</span><span style=\"color: #7F848E; font-style: italic\"> // num 进入作用域</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;{}&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">some_integer</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span><span style=\"color: #7F848E; font-style: italic\"> // num 被 Drop</span></span></code></pre></div><p>返回值也同理</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">main</span><span style=\"color: #ABB2BF\">() {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">str1</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">gives_ownership</span><span style=\"color: #ABB2BF\">();</span><span style=\"color: #7F848E; font-style: italic\"> // gives_ownership 将返回值所有权移给 str1, str1进入作用域</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">    // str1 的所有权被移动到 takes_and_gives_back 中, 且也将返回值移给 str2</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">str2</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">takes_and_gives_back</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">str1</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span><span style=\"color: #7F848E; font-style: italic\"> // str1 已被移出, str2 被Drop</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">gives_ownership</span><span style=\"color: #ABB2BF\">() -&gt; </span><span style=\"color: #E5C07B\">String</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">strs</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">String</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #61AFEF\">from</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;hello&quot;</span><span style=\"color: #ABB2BF\">);</span><span style=\"color: #7F848E; font-style: italic\"> // strs 进入作用域.</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">strs</span><span style=\"color: #7F848E; font-style: italic\"> // 返回 strs 并移出所有权给函数调用者</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">takes_and_gives_back</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">strs</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E5C07B\">String</span><span style=\"color: #ABB2BF\">) -&gt; </span><span style=\"color: #E5C07B\">String</span><span style=\"color: #ABB2BF\"> {</span><span style=\"color: #7F848E; font-style: italic\"> // strs 进入作用域</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">strs</span><span style=\"color: #7F848E; font-style: italic\">  // 返回 strs 并移出所有权给函数调用者</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span></code></pre></div><p>但这样总是把值传来传去会让语法变得啰嗦, 很不优雅, 这时我们可以传递引用</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">main</span><span style=\"color: #ABB2BF\">() {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">mut</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">strs</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">String</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #61AFEF\">from</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;hello&quot;</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">len</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">calculate_length</span><span style=\"color: #ABB2BF\">(&amp;</span><span style=\"color: #E06C75\">strs</span><span style=\"color: #ABB2BF\">);</span><span style=\"color: #7F848E; font-style: italic\"> // &amp;strs 作用域结束</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;The length of &#39;{}&#39; is {}.&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">strs</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">len</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">change</span><span style=\"color: #ABB2BF\">(&amp;</span><span style=\"color: #C678DD\">mut</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">strs</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;{}&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">strs</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">calculate_length</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">s</span><span style=\"color: #ABB2BF\">: &amp;</span><span style=\"color: #E5C07B\">String</span><span style=\"color: #ABB2BF\">) -&gt; </span><span style=\"color: #E5C07B\">usize</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">s</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">len</span><span style=\"color: #ABB2BF\">()</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">change</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">some_string</span><span style=\"color: #ABB2BF\">: &amp;</span><span style=\"color: #C678DD\">mut</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">String</span><span style=\"color: #ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">some_string</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">push_str</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;, world&quot;</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span></code></pre></div><h2 id=\"匿名函数\"><a href=\"#匿名函数\" class=\"headerlink\" title=\"匿名函数\"></a>匿名函数</h2><p>Rust 使用 <strong>Closure (闭包)</strong> 创建匿名函数</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">out</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">12</span><span style=\"color: #ABB2BF\">;</span><span style=\"color: #7F848E; font-style: italic\"> // 闭包可使用外部变量</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">num1</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">|</span><span style=\"color: #E06C75\">i</span><span style=\"color: #ABB2BF\">,</span><span style=\"color: #E06C75\">j</span><span style=\"color: #56B6C2\">|</span><span style=\"color: #E06C75\">i</span><span style=\"color: #ABB2BF\">+</span><span style=\"color: #E06C75\">j</span><span style=\"color: #ABB2BF\">+</span><span style=\"color: #E06C75\">out</span><span style=\"color: #ABB2BF\">;</span><span style=\"color: #7F848E; font-style: italic\"> // 闭包可根据上下文自动推导类型</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">num2</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">|</span><span style=\"color: #E06C75\">i</span><span style=\"color: #ABB2BF\">:</span><span style=\"color: #E5C07B\">i32</span><span style=\"color: #ABB2BF\">,</span><span style=\"color: #E06C75\">j</span><span style=\"color: #ABB2BF\">:</span><span style=\"color: #E5C07B\">i32</span><span style=\"color: #56B6C2\">|</span><span style=\"color: #E06C75\">i</span><span style=\"color: #ABB2BF\">*</span><span style=\"color: #E06C75\">j</span><span style=\"color: #ABB2BF\">+</span><span style=\"color: #E06C75\">out</span><span style=\"color: #ABB2BF\">;</span><span style=\"color: #7F848E; font-style: italic\"> // 也可以指定类型</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">a</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">b</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">2</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">c</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">num1</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">a</span><span style=\"color: #ABB2BF\">,</span><span style=\"color: #E06C75\">b</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">d</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">num2</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">a</span><span style=\"color: #ABB2BF\">,</span><span style=\"color: #E06C75\">b</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;{},{}&quot;</span><span style=\"color: #ABB2BF\">,</span><span style=\"color: #E06C75\">c</span><span style=\"color: #ABB2BF\">,</span><span style=\"color: #E06C75\">d</span><span style=\"color: #ABB2BF\">);</span></span></code></pre></div><p>其中 <code>||</code> 之间是闭包的参数, 其后是函数的主体, 闭包 <code>num1</code> 借用了它作用域中的 <code>let</code> 绑定 <code>out</code>. 如果要让闭包获得所有权, 可以使用 <code>move</code> 关键字</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">mut</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">num</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">5</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">{</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">mut</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">add</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">move</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">|</span><span style=\"color: #E06C75\">x</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E5C07B\">i32</span><span style=\"color: #56B6C2\">|</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">num</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">+=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">x</span><span style=\"color: #ABB2BF\">;</span><span style=\"color: #7F848E; font-style: italic\">   // 闭包通过 move 获取了 num 的所有权</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">add</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #D19A66\">5</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// 下面的 num 在被 move 之后还能继续使用是因为其实现了 Copy trait</span></span>\n<span class=\"line\"><span style=\"color: #61AFEF\">assert_eq!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #D19A66\">5</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">num</span><span style=\"color: #ABB2BF\">);</span></span></code></pre></div><h1 id=\"高阶函数\"><a href=\"#高阶函数\" class=\"headerlink\" title=\"高阶函数\"></a>高阶函数</h1><p>Rust 支持高阶函数, 允许闭包作为参数</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">add_one</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">x</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E5C07B\">i32</span><span style=\"color: #ABB2BF\">) -&gt; </span><span style=\"color: #E5C07B\">i32</span><span style=\"color: #ABB2BF\"> { </span><span style=\"color: #E06C75\">x</span><span style=\"color: #ABB2BF\"> + </span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\"> }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">apply</span><span style=\"color: #ABB2BF\">&lt;</span><span style=\"color: #E5C07B\">F</span><span style=\"color: #ABB2BF\">&gt;(</span><span style=\"color: #E06C75\">f</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E5C07B\">F</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">y</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E5C07B\">i32</span><span style=\"color: #ABB2BF\">) -&gt; </span><span style=\"color: #E5C07B\">i32</span><span style=\"color: #7F848E; font-style: italic\"> // 接受一个类型F与i32, 返回i32</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">where</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">F</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #61AFEF\">Fn</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E5C07B\">i32</span><span style=\"color: #ABB2BF\">) -&gt; </span><span style=\"color: #E5C07B\">i32</span><span style=\"color: #7F848E; font-style: italic\">// 对类型 F 的约束</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">{</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">f</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">y</span><span style=\"color: #ABB2BF\">) * </span><span style=\"color: #E06C75\">y</span><span style=\"color: #7F848E; font-style: italic\"> // 函数体</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">factory</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">x</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E5C07B\">i32</span><span style=\"color: #ABB2BF\">) -&gt; </span><span style=\"color: #E5C07B\">Box</span><span style=\"color: #ABB2BF\">&lt;</span><span style=\"color: #E5C07B\">Fn</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E5C07B\">i32</span><span style=\"color: #ABB2BF\">) -&gt; </span><span style=\"color: #E5C07B\">i32</span><span style=\"color: #ABB2BF\">&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">    //返回一个函数</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">Box</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #61AFEF\">new</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #C678DD\">move</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">|</span><span style=\"color: #E06C75\">y</span><span style=\"color: #56B6C2\">|</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">x</span><span style=\"color: #ABB2BF\"> + </span><span style=\"color: #E06C75\">y</span><span style=\"color: #ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">main</span><span style=\"color: #ABB2BF\">() {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">transform</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #61AFEF\">fn</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E5C07B\">i32</span><span style=\"color: #ABB2BF\">) -&gt; </span><span style=\"color: #E5C07B\">i32</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">add_one</span><span style=\"color: #ABB2BF\">;</span><span style=\"color: #7F848E; font-style: italic\">//函数指针</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">f0</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">add_one</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #D19A66\">2</span><span style=\"color: #E5C07B\">i32</span><span style=\"color: #ABB2BF\">) * </span><span style=\"color: #D19A66\">2</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">f1</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">apply</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">add_one</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">2</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">f2</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">apply</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">transform</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">2</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;{}, {}, {}&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">f0</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">f1</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">f2</span><span style=\"color: #ABB2BF\">);</span><span style=\"color: #7F848E; font-style: italic\">//这三个是相等的</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">closure</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">|</span><span style=\"color: #E06C75\">x</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E5C07B\">i32</span><span style=\"color: #56B6C2\">|</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">x</span><span style=\"color: #ABB2BF\"> + </span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">c0</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">closure</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #D19A66\">2</span><span style=\"color: #E5C07B\">i32</span><span style=\"color: #ABB2BF\">) * </span><span style=\"color: #D19A66\">2</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">c1</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">apply</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">closure</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">2</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">c2</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">apply</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #56B6C2\">|</span><span style=\"color: #E06C75\">x</span><span style=\"color: #56B6C2\">|</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">x</span><span style=\"color: #ABB2BF\"> + </span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">2</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;{}, {}, {}&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">c0</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">c1</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">c2</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">box_fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">factory</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #D19A66\">1</span><span style=\"color: #E5C07B\">i32</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">b0</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">box_fn</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #D19A66\">2</span><span style=\"color: #E5C07B\">i32</span><span style=\"color: #ABB2BF\">) * </span><span style=\"color: #D19A66\">2</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">b1</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> (*</span><span style=\"color: #E06C75\">box_fn</span><span style=\"color: #ABB2BF\">)(</span><span style=\"color: #D19A66\">2</span><span style=\"color: #E5C07B\">i32</span><span style=\"color: #ABB2BF\">) * </span><span style=\"color: #D19A66\">2</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">b2</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> (&amp;</span><span style=\"color: #E06C75\">box_fn</span><span style=\"color: #ABB2BF\">)(</span><span style=\"color: #D19A66\">2</span><span style=\"color: #E5C07B\">i32</span><span style=\"color: #ABB2BF\">) * </span><span style=\"color: #D19A66\">2</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;{}, {}, {}&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">b0</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">b1</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">b2</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">add_num</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> &amp;(*</span><span style=\"color: #E06C75\">box_fn</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">translate</span><span style=\"color: #ABB2BF\">: &amp;</span><span style=\"color: #61AFEF\">Fn</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E5C07B\">i32</span><span style=\"color: #ABB2BF\">) -&gt; </span><span style=\"color: #E5C07B\">i32</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">add_num</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">z0</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">add_num</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #D19A66\">2</span><span style=\"color: #E5C07B\">i32</span><span style=\"color: #ABB2BF\">) * </span><span style=\"color: #D19A66\">2</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">z1</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">apply</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">add_num</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">2</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">z2</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">apply</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">translate</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">2</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;{}, {}, {}&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">z0</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">z1</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">z2</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span></code></pre></div><h1 id=\"复合类型\"><a href=\"#复合类型\" class=\"headerlink\" title=\"复合类型\"></a>复合类型</h1><h2 id=\"结构体\"><a href=\"#结构体\" class=\"headerlink\" title=\"结构体\"></a>结构体</h2><p><strong>Struct</strong> 是一种记录类型, 所包含的每个 <strong>Field (域)</strong> 都有一个名称, 每个结构体也都有一个名称, 通常以 <strong>大写字母</strong> 开头, 使用 <strong>驼峰命名法</strong>. 元组结构体是由 <strong>元组</strong> 和 <strong>结构体</strong> 混合构成, 元组结构体有名称, 但是它的域没有. 当元组结构体只有一个域时, 称为<strong>New Type (新类型)</strong>. 没有域的结构体, 称为类单元结构体. 结构体中的值默认是不可变的, 需要给结构体加上 <code>mut</code> 使其可变</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">struct</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Student</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">name</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E5C07B\">String</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">grade</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E5C07B\">i8</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">class</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E5C07B\">i8</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">id</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E5C07B\">i8</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">mut</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">bob</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Student</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">name</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E5C07B\">String</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #61AFEF\">from</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;Bob&quot;</span><span style=\"color: #ABB2BF\">),</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">class</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">grade</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #D19A66\">2</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">id</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #D19A66\">123</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">};</span></span>\n<span class=\"line\"><span style=\"color: #E06C75\">bob</span><span style=\"color: #ABB2BF\">.grade </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">struct</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Color</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E5C07B\">u8</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E5C07B\">u8</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E5C07B\">u8</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">android_green</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">Color</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #D19A66\">0xa4</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">0xc6</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">0x39</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// 解构</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">Color</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">red</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">green</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">blue</span><span style=\"color: #ABB2BF\">) </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">android_green</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">struct</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Inches</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E5C07B\">i32</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">length</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">Inches</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #D19A66\">10</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">Inches</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">integer_length</span><span style=\"color: #ABB2BF\">) </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">length</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">struct</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">EmptyStruct</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">empty</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">EmptyStruct</span><span style=\"color: #ABB2BF\">;</span></span></code></pre></div><h2 id=\"枚举\"><a href=\"#枚举\" class=\"headerlink\" title=\"枚举\"></a>枚举</h2><p><strong>枚举</strong> 是一种代表一系列子数据类型的集合, 可用于分类, 但是相较于其他语言, 还可以携带数据类型, 可以被称为 <strong>重装枚举</strong>. 枚举可以通过 <code>::</code>来获得每个元素的名称</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">enum</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Book</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">Pbook</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E5C07B\">u32</span><span style=\"color: #ABB2BF\">),</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">Ebook</span><span style=\"color: #ABB2BF\"> { </span><span style=\"color: #E06C75\">url</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E5C07B\">String</span><span style=\"color: #ABB2BF\"> },</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">book</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Book</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #61AFEF\">Pbook</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #D19A66\">1010</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">_ebook</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Book</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #E5C07B\">Ebook</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">url</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E5C07B\">String</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #61AFEF\">from</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;https://xx.xx&quot;</span><span style=\"color: #ABB2BF\">),</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">};</span></span></code></pre></div><p>与结构体一样, 枚举中的元素默认不能使用关系运算符进行比较 (如 <code>==</code>, <code>!=</code>, <code>&gt;=</code>), 也不支持像 <code>+</code> 和 <code>*</code> 这样的双目运算符, 均需要自己实现, 或者使用 <code>match</code> 进行匹配。</p>\n<h3 id=\"C-语言风格的枚举\"><a href=\"#C-语言风格的枚举\" class=\"headerlink\" title=\"C 语言风格的枚举\"></a>C 语言风格的枚举</h3><p>Rust 的枚举也可以像 C 语言那样</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// 拥有隐式辨别值 (implicit discriminator, 从 0 开始) 的 enum</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">enum</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Number</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">Zero</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">One</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">Two</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// 拥有显式辨别值 (explicit discriminator) 的 enum</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">enum</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Color</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">Red</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">0xff0000</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">Green</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">0x00ff00</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">Blue</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">0x0000ff</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">main</span><span style=\"color: #ABB2BF\">() {</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">    // `enum` 可以转成整型。</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;zero 是 {}&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E5C07B\">Number</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #E5C07B\">Zero</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">as</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">i32</span><span style=\"color: #ABB2BF\">);</span><span style=\"color: #7F848E; font-style: italic\">//as 用来类型转换</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;one 是 {}&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E5C07B\">Number</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #E5C07B\">One</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">as</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">i32</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;玫瑰是 #{:06x} 色的&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E5C07B\">Color</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #E5C07B\">Red</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">as</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">i32</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;天空是 #{:06x} 色的&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E5C07B\">Color</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #E5C07B\">Blue</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">as</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">i32</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span></code></pre></div><h1 id=\"Module-与可见性\"><a href=\"#Module-与可见性\" class=\"headerlink\" title=\"Module 与可见性\"></a>Module 与可见性</h1><p>当项目越来越大, 把所有代码都塞进 <code>main.rs</code> 或 <code>lib.rs</code> 几乎是不可能的, 或者有的时候我们需要人为控制代码的可见性, 这个时候我们就需要 <strong>Module (模块)</strong> 来管理我们的项目结构</p>\n<p>可以通过 <code>mod</code> 关键字 + <code>mod_name</code> 来开辟一个新的 Module, 默认情况下父 Module 或同级 Module 无法访问子 Module, 而子 Module 可以访问所有的父 Module</p>\n<p>如果是在单个文件中, <code>mod_name</code> 后面直接跟一个 <code>{}</code>, 并在内部放入其成员</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">mod</span><span style=\"color: #ABB2BF\"> a_module {</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">    // Some code</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span></code></pre></div><p>当然, Module 最重要的功能还是将代码分到不同的文件中, 这种情况下 <code>mod_name</code> 后面直接加 <code>;</code> 即可, 我们在 <code>main.rs</code> 中声明三个 Module</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">mod</span><span style=\"color: #ABB2BF\"> mod1;</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">mod</span><span style=\"color: #ABB2BF\"> mod2;</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">mod</span><span style=\"color: #ABB2BF\"> mod3;</span></span></code></pre></div><p>下面是一段文件树示例</p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #abb2bf\">src</span></span>\n<span class=\"line\"><span style=\"color: #abb2bf\">├─ main.rs</span></span>\n<span class=\"line\"><span style=\"color: #abb2bf\">├─ mod3.rs // 内容: mod file3;</span></span>\n<span class=\"line\"><span style=\"color: #abb2bf\">├─ mod3</span></span>\n<span class=\"line\"><span style=\"color: #abb2bf\">│  └─ file3.rs</span></span>\n<span class=\"line\"><span style=\"color: #abb2bf\">├─ mod2</span></span>\n<span class=\"line\"><span style=\"color: #abb2bf\">│  ├─ mod.rs // 内容: mod file2;</span></span>\n<span class=\"line\"><span style=\"color: #abb2bf\">│  └─ file2.rs</span></span>\n<span class=\"line\"><span style=\"color: #abb2bf\">└─ mod1.rs</span></span></code></pre></div><p>我们能发现有三种不同的方式用于将代码分入不同的文件:</p>\n<ol>\n<li>直接在 <code>src</code> 文件夹下新建与 Module 同名的文件</li>\n<li>在 <code>src</code> 文件夹下新建与 Module 同名的文件夹并在内部新建 <code>mod.rs</code> 文件, 同时这个文件夹内也可以新建其他 Module 并在 <code>mod.rs</code> 文件中声明</li>\n<li>同时在 <code>src</code> 文件夹中新建与 Module 同名的文件和文件夹, 而这个同名的文件可以起到上一条中 <code>mod.rs</code> 文件的作用</li>\n</ol>\n<p>Crate 本身就是其下所有模块的父模块, Module 层层嵌套就组成了模块树</p>\n<h2 id=\"通过路径引用模块\"><a href=\"#通过路径引用模块\" class=\"headerlink\" title=\"通过路径引用模块\"></a>通过路径引用模块</h2><p>路径通过 <code>::</code> 操作符进行分隔, 分为两种:</p>\n<ul>\n<li>相对路径:<ul>\n<li>由当前模块的同级模块出发, 引用其内部成员. <code>current_mod::inner_function()</code></li>\n<li>由父模块出发引用其他子模块内部成员, 需要 <code>super</code> 关键字. <code>super::another_mod::inner_function()</code></li>\n<li>由当前模块出发, 引入自己的内部成员, 需要 <code>self</code> 关键字. <code>self::my_function()</code>. 比如在 Module 内部的一个函数需要引用这个 Module 的另一个函数时</li>\n</ul>\n</li>\n<li>绝对路径: 就像之前说的, Crate 就是最高的父模块, 可以直接由 Crate 出发一步步走向内部成员, 需要 <code>crate</code> 关键字. <code>crate::sub_mod::inner_function()</code></li>\n</ul>\n<h2 id=\"代码可见性\"><a href=\"#代码可见性\" class=\"headerlink\" title=\"代码可见性\"></a>代码可见性</h2><p>下面这段代码看似合理, 但实际上并不能运行, 就像我们之前说的, Module 默认是对父 Module 不可见的</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">struct</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Int</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E5C07B\">i32</span><span style=\"color: #ABB2BF\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">mod</span><span style=\"color: #ABB2BF\"> inner {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">return_one</span><span style=\"color: #ABB2BF\">() -&gt; </span><span style=\"color: #E5C07B\">Int</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #61AFEF\">Int</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">one</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">inner</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #61AFEF\">return_one</span><span style=\"color: #ABB2BF\">();</span></span></code></pre></div><p>可以通过 <code>pub</code> 关键字使内部成员公开</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">mod</span><span style=\"color: #ABB2BF\"> inner {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">pub</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">return_one</span><span style=\"color: #ABB2BF\">() -&gt; </span><span style=\"color: #E5C07B\">Int</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #61AFEF\">Int</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span></code></pre></div><p>注意, Struct 即使对外公开, 其内部 Field 仍然默认私有, 也需要 <code>pub</code> 关键字才能访问, 而 Enum 类型一旦公开, 其内部所有变体自动公开</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">mod</span><span style=\"color: #ABB2BF\"> inner {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">pub</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">struct</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Point</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #C678DD\">pub</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">x</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E5C07B\">i32</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #E06C75\">y</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E5C07B\">i32</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">pub</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">enum</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Bool</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #E5C07B\">True</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #E5C07B\">False</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">p</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">inner</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #E5C07B\">Point</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">    // x 是 pub 的, 可以访问</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">x</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #D19A66\">0</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">    // y 是 private 的, 无法访问, 此行会报错, 应给给 Point 的 y 也加上 pub</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">y</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #D19A66\">0</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">b</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">inner</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #E5C07B\">Bool</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #E5C07B\">True</span><span style=\"color: #ABB2BF\">;</span></span></code></pre></div><p><code>pub</code> 关键字还可以在后面加上一些限制</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">pub</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #C678DD\">crate</span><span style=\"color: #ABB2BF\">)</span><span style=\"color: #7F848E; font-style: italic\"> // 只在当前 Crate 公开</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">pub</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E5C07B; font-style: italic\">super</span><span style=\"color: #ABB2BF\">)</span><span style=\"color: #7F848E; font-style: italic\"> // 只在当前父 Module 公开</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">pub</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E5C07B\">self</span><span style=\"color: #ABB2BF\">)</span><span style=\"color: #7F848E; font-style: italic\"> // 只在当前 Module 公开</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">pub</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #C678DD\">in</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">a</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #E06C75\">b</span><span style=\"color: #ABB2BF\">)</span><span style=\"color: #7F848E; font-style: italic\"> // 在指定模块公开</span></span></code></pre></div><p>如果是多重嵌套的 Module, 为了访问最里面的 Module, 同样需要在 <code>mod</code> 前加上 <code>pub</code> 关键字</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">mod</span><span style=\"color: #ABB2BF\"> out_mod{</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">pub</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">mod</span><span style=\"color: #ABB2BF\"> inner_mod{</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #C678DD\">pub</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">func</span><span style=\"color: #ABB2BF\">(){</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">            // Do something</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        }</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #E5C07B\">out_mod</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #E5C07B\">inner_mod</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #61AFEF\">func</span><span style=\"color: #ABB2BF\">()</span></span></code></pre></div><h2 id=\"引入作用域\"><a href=\"#引入作用域\" class=\"headerlink\" title=\"引入作用域\"></a>引入作用域</h2><p>上面我们已经成功地将代码拆分到了不同的文件中. 但是有一个问题, 比如 <code>out_mod::inner_mod::func()</code>, 要是每次调用函数都要用上这一坨, 那任谁也受不了</p>\n<p>这种时候, 我们就可以通过 <code>use</code> 关键字将一个成员引入我们的作用域, 使其在当前 Module 以及所有子 Module 持续可用</p>\n<p>还是上面的例子</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">mod</span><span style=\"color: #ABB2BF\"> out_mod{</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">pub</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">mod</span><span style=\"color: #ABB2BF\"> inner_mod{</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #C678DD\">pub</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">func</span><span style=\"color: #ABB2BF\">(){</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">            // Do something</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        }</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">use</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">out_mod</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #E5C07B\">inner_mod</span><span style=\"color: #ABB2BF\">::func;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">use1</span><span style=\"color: #ABB2BF\">() {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">func</span><span style=\"color: #ABB2BF\">()</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">use2</span><span style=\"color: #ABB2BF\">() {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">func</span><span style=\"color: #ABB2BF\">()</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// ...</span></span></code></pre></div><p>我们知道 Crate 本身就是一个顶级 Module, 因此我们也可以使用 <code>use</code> 将第三方库中的代码引入我们的作用域</p>\n<p>可以通过 <code>{}</code> 一次引入多个成员, 用 <code>,</code> 隔开, 可以通过 <code>*</code> 引入一个模块下所有的公开成员. 同样可以通过 <code>self</code> 关键字引入 Module 自身</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">use</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">crate1</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #E5C07B\">mod1</span><span style=\"color: #ABB2BF\">::{</span><span style=\"color: #E5C07B\">self</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E5C07B\">mod2</span><span style=\"color: #ABB2BF\">::*, item};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #E5C07B\">mod1</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #61AFEF\">some_func</span><span style=\"color: #ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"color: #61AFEF\">item</span><span style=\"color: #ABB2BF\">();</span></span></code></pre></div><h2 id=\"重导出\"><a href=\"#重导出\" class=\"headerlink\" title=\"重导出\"></a>重导出</h2><p>可以通过 <code>pub</code> 关键字将 <code>use</code> 引入的成员在当前 Module 再次公开, 以让 Module 可以通过这个 Module 来访问那些成员</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">mod</span><span style=\"color: #ABB2BF\"> mod1 {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">func</span><span style=\"color: #ABB2BF\">() {</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">        // Do something</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">mod</span><span style=\"color: #ABB2BF\"> mod2 {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">pub</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">use</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">mod1</span><span style=\"color: #ABB2BF\">::func;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #E5C07B\">mod2</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #E06C75\">func</span><span style=\"color: #ABB2BF\">;</span></span></code></pre></div><p>这对于集中管理公开成员非常有帮助, 事实上, Rust 为每一个项目都隐式的添加了 <code>use std::prelude::*</code>, 它就通过重导出其他模块的常用成员, 可以非常方便快捷的引入这些常用的功能. 在编写 Lib Crate 时也可以创建一个 <code>prelude</code> Module 来集中管理常用成员</p>\n","feature":false,"text":"回顾作用域, 初步了解作用域和堆栈相关知识, 熟悉 Rust 首创的所有权机制. 函数的初步认识. 介绍一下复合类型, 结构体, 枚举. 最后了解一下包, 模块, 以及结构体和枚举内部成员的可见性, 以及如何公开并引入成员...","permalink":"/post/RustCourse-04","photos":[],"count_time":{"symbolsCount":"16k","symbolsTime":"15 mins."},"categories":[{"name":"Course","slug":"Course","count":11,"path":"api/categories/Course.json"}],"tags":[{"name":"Rust","slug":"Rust","count":12,"path":"api/tags/Rust.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%8F%98%E9%87%8F%E4%BD%9C%E7%94%A8%E5%9F%9F\"><span class=\"toc-text\">变量作用域</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%89%80%E6%9C%89%E6%9D%83%E6%9C%BA%E5%88%B6\"><span class=\"toc-text\">所有权机制</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80%E6%AE%B5%E5%86%85%E5%AD%98%E4%B8%8D%E5%AE%89%E5%85%A8%E7%9A%84-C-%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">一段内存不安全的 C 代码</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%84%E5%A4%87%E7%9F%A5%E8%AF%86-Stack-and-Heap-%E5%A0%86%E6%A0%88\"><span class=\"toc-text\">预备知识: Stack and Heap (堆栈)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A0%88\"><span class=\"toc-text\">栈</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A0%86\"><span class=\"toc-text\">堆</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%80%A7%E8%83%BD%E5%AF%B9%E6%AF%94\"><span class=\"toc-text\">性能对比</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%89%80%E6%9C%89%E6%9D%83%E5%8E%9F%E5%88%99\"><span class=\"toc-text\">所有权原则</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BD%AC%E7%A7%BB%E6%89%80%E6%9C%89%E6%9D%83\"><span class=\"toc-text\">转移所有权</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%8B%E9%9A%86\"><span class=\"toc-text\">克隆</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8B%B7%E8%B4%9D\"><span class=\"toc-text\">拷贝</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BC%95%E7%94%A8%E4%B8%8E%E5%80%9F%E7%94%A8\"><span class=\"toc-text\">引用与借用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E5%BC%95%E7%94%A8\"><span class=\"toc-text\">解引用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%AF%E5%8F%98%E5%BC%95%E7%94%A8\"><span class=\"toc-text\">可变引用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%82%AC%E5%9E%82%E5%BC%95%E7%94%A8\"><span class=\"toc-text\">悬垂引用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93-1\"><span class=\"toc-text\">总结</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">函数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0%E7%AD%BE%E5%90%8D%E4%B8%8E%E5%A3%B0%E6%98%8E\"><span class=\"toc-text\">函数签名与声明</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8\"><span class=\"toc-text\">函数调用</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%89%B9%E6%AE%8A%E7%9A%84%E8%BF%94%E5%9B%9E%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">特殊的返回类型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%97%A0%E8%BF%94%E5%9B%9E%E5%80%BC\"><span class=\"toc-text\">无返回值</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B0%B8%E4%B8%8D%E8%BF%94%E5%9B%9E%E7%9A%84%E5%8F%91%E6%95%A3%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">永不返回的发散函数</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0%E4%BC%A0%E5%80%BC%E4%B8%8E%E6%89%80%E6%9C%89%E6%9D%83\"><span class=\"toc-text\">函数传值与所有权</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">匿名函数</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">高阶函数</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%A4%8D%E5%90%88%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">复合类型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BB%93%E6%9E%84%E4%BD%93\"><span class=\"toc-text\">结构体</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9E%9A%E4%B8%BE\"><span class=\"toc-text\">枚举</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#C-%E8%AF%AD%E8%A8%80%E9%A3%8E%E6%A0%BC%E7%9A%84%E6%9E%9A%E4%B8%BE\"><span class=\"toc-text\">C 语言风格的枚举</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Module-%E4%B8%8E%E5%8F%AF%E8%A7%81%E6%80%A7\"><span class=\"toc-text\">Module 与可见性</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%80%9A%E8%BF%87%E8%B7%AF%E5%BE%84%E5%BC%95%E7%94%A8%E6%A8%A1%E5%9D%97\"><span class=\"toc-text\">通过路径引用模块</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E5%8F%AF%E8%A7%81%E6%80%A7\"><span class=\"toc-text\">代码可见性</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BC%95%E5%85%A5%E4%BD%9C%E7%94%A8%E5%9F%9F\"><span class=\"toc-text\">引入作用域</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%87%8D%E5%AF%BC%E5%87%BA\"><span class=\"toc-text\">重导出</span></a></li></ol></li></ol>","author":{"name":"芳塔洛斯","slug":"blog-author","avatar":"https://fontlos.com/icons/avatar.jpg","link":"/","description":"来人间一趟, 为散步一场<br />待走出岁月, 何样的彼方<br />才配得上这一路的颠沛与时光","socials":{"github":"https://github.com/fontlos","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"https://fontlos.com/icons/bilibili.svg","link":"https://space.bilibili.com/362772872"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"初识 Rust(3) | 变量, 常量, 语句和表达式, 原生类型","uid":"4982b3ac55a9e6b7056efc0b28169dff","slug":"RustCourse-03","date":"2021-06-08T04:10:27.000Z","updated":"2024-03-06T02:36:48.107Z","comments":true,"path":"api/articles/RustCourse-03.json","keywords":"Programming, Web, Frontend, Backend ,Rust, Blog, Aurora, Fontlos, 芳塔洛斯","cover":"https://fontlos.com/cover/ferris.png","text":"对变量进行绑定, 解构与遮蔽. 什么是不可变变量, 为什么变量默认不可变, 与常量的区别是什么. 如何声明常量. 什么是语句和表达式. Rust 底层实现的原生类型有哪些...","permalink":"/post/RustCourse-03","photos":[],"count_time":{"symbolsCount":"7.6k","symbolsTime":"7 mins."},"categories":[{"name":"Course","slug":"Course","count":11,"path":"api/categories/Course.json"}],"tags":[{"name":"Rust","slug":"Rust","count":12,"path":"api/tags/Rust.json"}],"author":{"name":"芳塔洛斯","slug":"blog-author","avatar":"https://fontlos.com/icons/avatar.jpg","link":"/","description":"来人间一趟, 为散步一场<br />待走出岁月, 何样的彼方<br />才配得上这一路的颠沛与时光","socials":{"github":"https://github.com/fontlos","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"https://fontlos.com/icons/bilibili.svg","link":"https://space.bilibili.com/362772872"}}}},"feature":false},"next_post":{"title":"初识 Rust(2) | 你好, 世界!","uid":"4b0f692f776f3adc938ca1b3146c2dd5","slug":"RustCourse-02","date":"2021-04-05T04:36:07.000Z","updated":"2024-03-06T02:36:48.107Z","comments":true,"path":"api/articles/RustCourse-02.json","keywords":"Programming, Web, Frontend, Backend ,Rust, Blog, Aurora, Fontlos, 芳塔洛斯","cover":"https://fontlos.com/cover/ferris.png","text":"Rust 与 Cargo 的基本操作, 注释与文档...","permalink":"/post/RustCourse-02","photos":[],"count_time":{"symbolsCount":"5.4k","symbolsTime":"5 mins."},"categories":[{"name":"Course","slug":"Course","count":11,"path":"api/categories/Course.json"}],"tags":[{"name":"Rust","slug":"Rust","count":12,"path":"api/tags/Rust.json"}],"author":{"name":"芳塔洛斯","slug":"blog-author","avatar":"https://fontlos.com/icons/avatar.jpg","link":"/","description":"来人间一趟, 为散步一场<br />待走出岁月, 何样的彼方<br />才配得上这一路的颠沛与时光","socials":{"github":"https://github.com/fontlos","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"https://fontlos.com/icons/bilibili.svg","link":"https://space.bilibili.com/362772872"}}}},"feature":false}}