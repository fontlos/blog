{"title":"初识 Rust(7) | 生命周期, 格式化输出与文件 IO","uid":"6fa92a5a1866681cec9c47f16fa37ac2","slug":"RustCourse-07","date":"2021-06-08T14:14:48.000Z","updated":"2024-03-06T02:36:48.107Z","comments":true,"path":"api/articles/RustCourse-07.json","keywords":"Programming, Web, Frontend, Backend ,Rust, Blog, Aurora, Fontlos, 芳塔洛斯","cover":"https://fontlos.com/cover/ferris.png","content":"<h1 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h1><p>生命周期是 Rust 中的一个特殊概念, 简而言之, 它标注了作用域的范围. 早期的 Rust 需要手动标注所有生命周期, 但后来人们发现有一些生命周期格式经常重复性出现, 于是 Rust 就制定了一些规则, 在非必要是通过编译器推理消除生命周期参数</p>\n<p>生命周期的标注通常是单引号 <code>&#39;</code> 加上一个小写字母, 下面一段会造成悬垂引用的代码, 让我们加上生命周期标注看看为什么</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #ABB2BF\">{</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">r</span><span style=\"color: #ABB2BF\">;</span><span style=\"color: #7F848E; font-style: italic\">                // ---------+-- &#39;a</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">                          //          |</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    {</span><span style=\"color: #7F848E; font-style: italic\">                     //          |</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">x</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">5</span><span style=\"color: #ABB2BF\">;</span><span style=\"color: #7F848E; font-style: italic\">        // -+-- &#39;b  |</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #E06C75\">r</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> &amp;</span><span style=\"color: #E06C75\">x</span><span style=\"color: #ABB2BF\">;</span><span style=\"color: #7F848E; font-style: italic\">           //  |       |</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    }</span><span style=\"color: #7F848E; font-style: italic\">                     // -+       |</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">                          //          |</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;r: {}&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">r</span><span style=\"color: #ABB2BF\">);</span><span style=\"color: #7F848E; font-style: italic\"> //          |</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span><span style=\"color: #7F848E; font-style: italic\">                         // ---------+</span></span></code></pre></div><p><code>r</code> 的生命周期范围是 <code>&#39;a</code>, <code>x</code> 的生命周期范围是 <code>&#39;b</code>, 很明显, <code>x</code> 的生命周期更短, 我们将 <code>x</code> 的引用赋值给 <code>r</code>, 当 <code>x</code> 的生命结束时, <code>r</code> 依然存在, 但此时这个被引用的 <code>x</code> 已经被 Drop 了, 因此就会报错</p>\n<h2 id=\"手动标注生命周期与生命周期消除\"><a href=\"#手动标注生命周期与生命周期消除\" class=\"headerlink\" title=\"手动标注生命周期与生命周期消除\"></a>手动标注生命周期与生命周期消除</h2><p>生命周期的标注只发生在引用中, 使用前像泛型那样须要事先声明, 使用时标注需要紧随 <code>&amp;</code> 操作符, 各一个空格后跟上具体的引用类型, 而声明时不需要</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">func</span><span style=\"color: #ABB2BF\">&lt;&#39;</span><span style=\"color: #E5C07B\">a</span><span style=\"color: #ABB2BF\">&gt;(</span><span style=\"color: #E06C75\">arg</span><span style=\"color: #ABB2BF\">: &amp;&#39;</span><span style=\"color: #E5C07B\">a</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">str</span><span style=\"color: #ABB2BF\">) -&gt; &amp;&#39;</span><span style=\"color: #E5C07B\">a</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">str</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">struct</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Strs</span><span style=\"color: #ABB2BF\">&lt;&#39;</span><span style=\"color: #E5C07B\">a</span><span style=\"color: #ABB2BF\">&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">strs</span><span style=\"color: #ABB2BF\">: &amp;&#39;</span><span style=\"color: #E5C07B\">a</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">str</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span></code></pre></div><p>就像我们说过的, 生命周期的格式经常重复, 通过实践我们可以发现, 有些生命周期标注就没有存在的必要, 因此我们制定了三条规则, 满足以下条件的, 即使删除生命周期, 编译器也可以进行推导</p>\n<ol>\n<li>每一个引用都有自己的生命周期<ul>\n<li>例如: <code>fn foo&lt;&#39;a&gt;(x: &amp;&#39;a i32)</code>, <code>fn foo&lt;&#39;a, &#39;b&gt;(x: &amp;&#39;a i32, y: &amp;&#39;b i32)</code></li>\n</ul>\n</li>\n<li>若只有一个输入生命周期, 那么该生命周期会被赋给所有的输出生命周期<ul>\n<li>例如 <code>fn foo(x: &amp;i32) -&gt; &amp;i32</code>, <code>x</code> 的生命周期会被自动赋给返回值 <code>&amp;i32</code>, 即 <code>fn foo&lt;&#39;a&gt;(x: &amp;&#39;a i32) -&gt; &amp;&#39;a i32</code></li>\n</ul>\n</li>\n<li>若存在多个输入生命周期, 且其中一个是 <code>&amp;self</code> 或 <code>&amp;mut self</code>, 则 <code>&amp;self</code> 的生命周期被赋给所有的输出生命周期<ul>\n<li>拥有 <code>&amp;self</code>参数, 说明该函数是一个 <strong>方法</strong>, 该规则让方法的使用便利度大幅提升</li>\n<li>若一个方法，它的返回值的生命周期就是跟参数 &amp;self 的不一样, 这时答案就很简单了: 手动标注生命周期. 因为这些规则只是当你没标注时编译器默认加上的</li>\n</ul>\n</li>\n</ol>\n<p>让我们通过模拟编译器理解一下这些规则</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// 单引用参数</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">foo</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">s</span><span style=\"color: #ABB2BF\">: &amp;</span><span style=\"color: #E5C07B\">str</span><span style=\"color: #ABB2BF\">) -&gt; &amp;</span><span style=\"color: #E5C07B\">str</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// 首先, 为每个参数标注一个生命周期</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">foo</span><span style=\"color: #ABB2BF\">&lt;&#39;</span><span style=\"color: #E5C07B\">a</span><span style=\"color: #ABB2BF\">&gt;(</span><span style=\"color: #E06C75\">s</span><span style=\"color: #ABB2BF\">: &amp;&#39;</span><span style=\"color: #E5C07B\">a</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">str</span><span style=\"color: #ABB2BF\">) -&gt; &amp;</span><span style=\"color: #E5C07B\">str</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// 函数只有一个输入生命周期, 被赋予所有的输出生命周期</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">foo</span><span style=\"color: #ABB2BF\">&lt;&#39;</span><span style=\"color: #E5C07B\">a</span><span style=\"color: #ABB2BF\">&gt;(</span><span style=\"color: #E06C75\">s</span><span style=\"color: #ABB2BF\">: &amp;&#39;</span><span style=\"color: #E5C07B\">a</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">str</span><span style=\"color: #ABB2BF\">) -&gt; &amp;&#39;</span><span style=\"color: #E5C07B\">a</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">str</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// 编译器自动为返回值添加生命周期, 检查通过</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// 多引用参数</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">bar</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">x</span><span style=\"color: #ABB2BF\">: &amp;</span><span style=\"color: #E5C07B\">str</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">y</span><span style=\"color: #ABB2BF\">: &amp;</span><span style=\"color: #E5C07B\">str</span><span style=\"color: #ABB2BF\">) -&gt; &amp;</span><span style=\"color: #E5C07B\">str</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// 首先, 为每个参数标注一个生命周期</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">bar</span><span style=\"color: #ABB2BF\">&lt;&#39;</span><span style=\"color: #E5C07B\">a</span><span style=\"color: #ABB2BF\">, &#39;</span><span style=\"color: #E5C07B\">b</span><span style=\"color: #ABB2BF\">&gt;(</span><span style=\"color: #E06C75\">x</span><span style=\"color: #ABB2BF\">: &amp;&#39;</span><span style=\"color: #E5C07B\">a</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">str</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">y</span><span style=\"color: #ABB2BF\">: &amp;&#39;</span><span style=\"color: #E5C07B\">b</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">str</span><span style=\"color: #ABB2BF\">) -&gt; &amp;</span><span style=\"color: #E5C07B\">str</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// 第二条规则失效, 因为输入生命周期有两个</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// 第三条规则也不符合</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// 编译器依然无法为返回值标注合适的生命周期</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">//标错并提示我们需要手动标注生命周期</span></span></code></pre></div><p>注意: 通过函数签名指定生命周期参数只是给编译器的提示性标注, 并不能真正改变变量的作用域, 而是告诉编译器当不满足此约束条件时, 就拒绝编译通过, 比如下面的代码会报错</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">return_str</span><span style=\"color: #ABB2BF\">&lt;&#39;</span><span style=\"color: #E5C07B\">a</span><span style=\"color: #ABB2BF\">&gt;(</span><span style=\"color: #E06C75\">x</span><span style=\"color: #ABB2BF\">: &amp;</span><span style=\"color: #E5C07B\">str</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">y</span><span style=\"color: #ABB2BF\">: &amp;</span><span style=\"color: #E5C07B\">str</span><span style=\"color: #ABB2BF\">) -&gt; &amp;&#39;</span><span style=\"color: #E5C07B\">a</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">str</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">result</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">String</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #61AFEF\">from</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;string&quot;</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">result</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">as_str</span><span style=\"color: #ABB2BF\">()</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span></code></pre></div><h2 id=\"不总是靠谱的生命周期检查\"><a href=\"#不总是靠谱的生命周期检查\" class=\"headerlink\" title=\"不总是靠谱的生命周期检查\"></a>不总是靠谱的生命周期检查</h2><div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #ABB2BF\">#[derive(</span><span style=\"color: #E5C07B\">Debug</span><span style=\"color: #ABB2BF\">)]</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">struct</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Foo</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">impl</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Foo</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">take_mutable</span><span style=\"color: #ABB2BF\">(&amp;</span><span style=\"color: #C678DD\">mut</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">self</span><span style=\"color: #ABB2BF\">) -&gt; &amp;</span><span style=\"color: #E5C07B\">Self</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        &amp;*</span><span style=\"color: #E5C07B\">self</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">take_immutable</span><span style=\"color: #ABB2BF\">(&amp;</span><span style=\"color: #E5C07B\">self</span><span style=\"color: #ABB2BF\">) {}</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">main</span><span style=\"color: #ABB2BF\">() {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">mut</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">foo</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Foo</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">bar</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">foo</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">take_mutable</span><span style=\"color: #ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">foo</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">take_immutable</span><span style=\"color: #ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;{:?}&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">bar</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span></code></pre></div><p>虽然 <code>take_mutable</code> 方法借用了 <code>&amp;mut self</code>, 但是它最终返回的是一个 <code>&amp;Self</code>, 因此理论上带来的结果只是一个不可变借用, 同时 <code>take_immutable</code> 也进行了不可变借用, 那根据借用规则, 这段代码是合理的, 只发生了两次不可变借用. 然而却无法编译通过, 编译器仍然会固执的认为 <code>take_mutable</code> 借用了可变的 <code>foo</code>, 所以下面不可以再发生不可变借用. 但是按照逻辑, 可变借用的作用域仅在 <code>take_mutable</code> 内, 离开该作用域回到 <code>main</code> 函数后应该已经不存在了</p>\n<p>对于这个反直觉的事情, 可以用生命周期来解释</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">struct</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Foo</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">impl</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Foo</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">take_mutable</span><span style=\"color: #ABB2BF\">&lt;&#39;</span><span style=\"color: #E5C07B\">a</span><span style=\"color: #ABB2BF\">&gt;(&amp;&#39;</span><span style=\"color: #E5C07B\">a</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">mut</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">self</span><span style=\"color: #ABB2BF\">) -&gt; &amp;&#39;</span><span style=\"color: #E5C07B\">a</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Self</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        &amp;&#39;</span><span style=\"color: #E5C07B\">a</span><span style=\"color: #ABB2BF\"> *</span><span style=\"color: #E5C07B\">self</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">take_immutable</span><span style=\"color: #ABB2BF\">&lt;&#39;</span><span style=\"color: #E5C07B\">a</span><span style=\"color: #ABB2BF\">&gt;(&amp;&#39;</span><span style=\"color: #E5C07B\">a</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">self</span><span style=\"color: #ABB2BF\">) {}</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">main</span><span style=\"color: #ABB2BF\">() {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    &#39;</span><span style=\"color: #E5C07B\">b</span><span style=\"color: #ABB2BF\">: {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">mut</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">foo</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E5C07B\">Foo</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Foo</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        &#39;</span><span style=\"color: #E5C07B\">c</span><span style=\"color: #ABB2BF\">: {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">            </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">bar</span><span style=\"color: #ABB2BF\">: &amp;&#39;</span><span style=\"color: #E5C07B\">c</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Foo</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Foo</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #61AFEF\">take_mutable</span><span style=\"color: #ABB2BF\">::&lt;&#39;</span><span style=\"color: #E5C07B\">c</span><span style=\"color: #ABB2BF\">&gt;(&amp;&#39;</span><span style=\"color: #E5C07B\">c</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">mut</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">foo</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">            &#39;</span><span style=\"color: #E5C07B\">d</span><span style=\"color: #ABB2BF\">: {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">                </span><span style=\"color: #E5C07B\">Foo</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #61AFEF\">take_immutable</span><span style=\"color: #ABB2BF\">::&lt;&#39;</span><span style=\"color: #E5C07B\">d</span><span style=\"color: #ABB2BF\">&gt;(&amp;&#39;</span><span style=\"color: #E5C07B\">d</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">foo</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">            }</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">            </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;{:?}&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">bar</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        }</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span></code></pre></div><p>我们发现 <code>&amp;mut foo</code> 和 <code>bar</code> 的生命周期都是 <code>&#39;c</code>. 还记得 <strong>生命周期消除规则</strong> 第三条吗, 这导致了 <code>take_mutable</code> 方法中参数 <code>&amp;mut self</code> 和返回值 <code>&amp;Self</code> 拥有相同的生命周期, 因此, 若返回值的生命周期在 <code>main</code> 函数有效, 那 <code>&amp;mut self</code> 的借用也是在 <code>main</code> 函数有效, 于是就违背了可变借用与不可变借用不能同时存在的规则, 最终导致了编译错误</p>\n<p>实际上, 上述代码逻辑上完全正确, 但是因为生命周期系统的的死板, 导致了编译错误, 不幸的是, 截止到现在, 遇到这种因为生命周期系统的不靠谱导致的编译错误没有什么特别好的解决办法, 基本只能去修改代码. 期待后续堆生命周期系统继续完善, 让它足够聪明来理解这个问题</p>\n<h2 id=\"无界生命周期\"><a href=\"#无界生命周期\" class=\"headerlink\" title=\"无界生命周期\"></a>无界生命周期</h2><p><code>Unsafe</code> 块经常会凭空产生引用或生命周期, 这些生命周期被称为是 <strong>Unbound (无界)</strong> 的</p>\n<p>比如解引用一个 <strong>Raw Pointer (裸指针)</strong>, 它并没有任何生命周期, 然后通过 <code>unsafe</code> 关键字操作后, 它被进行了解引用, 变成了一个 Rust 的标准引用类型, 该类型必须要有生命周期, 也就是 <code>&#39;a</code>, 这个生命周期就是凭空产生的, 因为输入参数根本就没有这个生命周期</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">foo</span><span style=\"color: #ABB2BF\">&lt;&#39;</span><span style=\"color: #E5C07B\">a</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E5C07B\">T</span><span style=\"color: #ABB2BF\">&gt;(</span><span style=\"color: #E06C75\">x</span><span style=\"color: #ABB2BF\">: *</span><span style=\"color: #C678DD\">const</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">T</span><span style=\"color: #ABB2BF\">) -&gt; &amp;&#39;</span><span style=\"color: #E5C07B\">a</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">T</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">unsafe</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        &amp;*</span><span style=\"color: #E06C75\">x</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span></code></pre></div><p>这种生命周期由于没有受到任何约束, 因此它想要多大就多大, 它实际上比 <code>&#39;static</code> 还要强大. 例如 <code>&amp;&#39;static &amp;&#39;a T</code> 是无效类型, 但是无界生命周期 <code>&amp;&#39;unbounded &amp;&#39;a T</code> 会被视为 <code>&amp;&#39;a &amp;&#39;a T</code> 从而通过编译检查, 因为它的大小完全取决于需要它多大</p>\n<p>因此我们要尽量避免这种无界生命周期. 最简单方式就是在函数声明中运用生命周期消除规则. 若一个输出生命周期被消除了, 那么必定因为有一个输入生命周期与之对应</p>\n<h2 id=\"生命周期约束-HRTB\"><a href=\"#生命周期约束-HRTB\" class=\"headerlink\" title=\"生命周期约束 HRTB\"></a>生命周期约束 HRTB</h2><p>生命周期约束跟特征约束类似, 都是通过形如 <code>&#39;a: &#39;b</code> 的语法, 来说明两个生命周期的长短关系, 比如这里就是 <code>&#39;a &gt;= &#39;b</code></p>\n<p>被引用者的生命周期必须要比引用长, 比如</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">struct</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Ref</span><span style=\"color: #ABB2BF\">&lt;&#39;</span><span style=\"color: #E5C07B\">a</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E5C07B\">T</span><span style=\"color: #ABB2BF\">: &#39;</span><span style=\"color: #E5C07B\">a</span><span style=\"color: #ABB2BF\">&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">r</span><span style=\"color: #ABB2BF\">: &amp;&#39;</span><span style=\"color: #E5C07B\">a</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">T</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span></code></pre></div><p>因为 <code>r</code> 引用了 <code>T</code>, 因此 <code>r</code> 的生命周期 <code>&#39;a</code> 必须要比 <code>T</code> 的生命周期更短. 在早期版本的 Rust 中上述标注是必须的, 而在新版本中, 编译器可以自动推导 T: ‘a 类型的约束, 因此我们只需这样写即可</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">struct</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Ref</span><span style=\"color: #ABB2BF\">&lt;&#39;</span><span style=\"color: #E5C07B\">a</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E5C07B\">T</span><span style=\"color: #ABB2BF\">&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">r</span><span style=\"color: #ABB2BF\">: &amp;&#39;</span><span style=\"color: #E5C07B\">a</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">T</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span></code></pre></div><p>实际上这也被称作 <strong>结构体生命周期消除</strong></p>\n<h2 id=\"Impl-块生命周期消除\"><a href=\"#Impl-块生命周期消除\" class=\"headerlink\" title=\"Impl 块生命周期消除\"></a>Impl 块生命周期消除</h2><div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">impl</span><span style=\"color: #ABB2BF\">&lt;&#39;</span><span style=\"color: #E5C07B\">a</span><span style=\"color: #ABB2BF\">&gt; </span><span style=\"color: #E5C07B\">Foo</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">for</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Bar</span><span style=\"color: #ABB2BF\">&lt;&#39;</span><span style=\"color: #E5C07B\">a</span><span style=\"color: #ABB2BF\">&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">    // 内部实际上没有用到 &#39;a</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span></code></pre></div><p>如果发现写出了这样的代码, 那实际上可以改写成下面这样</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">impl</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Foo</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">for</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Bar</span><span style=\"color: #ABB2BF\">&lt;&#39;</span><span style=\"color: #E5C07B\">_</span><span style=\"color: #ABB2BF\">&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">    // Methods ...</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span></code></pre></div><p><code>&#39;_</code> 生命周期表示 <code>BufReader</code> 有一个不使用的生命周期, 我们可以忽略它, 无需为它创建一个名称, 那既然用不到为何还要写出来呢? 别忘了, <strong>生命周期参数也是类型的一部分</strong>, 因此 <code>BufReader&lt;&#39;a&gt;</code> 是一个完整的类型, 在实现它的时候, 你不能把 <code>&#39;a</code> 给丢了</p>\n<h2 id=\"闭包的生命周期消除规则\"><a href=\"#闭包的生命周期消除规则\" class=\"headerlink\" title=\"闭包的生命周期消除规则\"></a>闭包的生命周期消除规则</h2><p>先来看一段简单的代码</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">foo</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">x</span><span style=\"color: #ABB2BF\">: &amp;</span><span style=\"color: #E5C07B\">i32</span><span style=\"color: #ABB2BF\">) -&gt; &amp;</span><span style=\"color: #E5C07B\">i32</span><span style=\"color: #ABB2BF\"> { </span><span style=\"color: #E06C75\">x</span><span style=\"color: #ABB2BF\"> }</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">bar</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">|</span><span style=\"color: #E06C75\">x</span><span style=\"color: #ABB2BF\">: &amp;</span><span style=\"color: #E5C07B\">i32</span><span style=\"color: #56B6C2\">|</span><span style=\"color: #ABB2BF\"> -&gt; &amp;</span><span style=\"color: #E5C07B\">i32</span><span style=\"color: #ABB2BF\"> { </span><span style=\"color: #E06C75\">x</span><span style=\"color: #ABB2BF\"> };</span></span></code></pre></div><p>乍一看, 这不一样吗? 编译下试试? 编译不通过! 错误原因是编译器无法推测返回的引用和传入的引用谁活得更久</p>\n<p>回忆一下生命周期消除规则: 如果函数参数中只有一个引用类型, 那该引用的生命周期会被自动分配给所有的返回引用. 完全一致, 而且 <code>foo</code> 函数也没有报错, 那这是为什么呢?</p>\n<p>这是因为对于函数的生命周期而言, 它的消除规则之所以能生效是因为它的 <strong>生命周期完全体现在签名的引用类型</strong> 上, 在函数体中无需任何体现, 因此编译器可以做各种编译优化, 也很容易根据参数和返回值进行生命周期的分析, 最终得出消除规则</p>\n<p>可闭包的生命周期分散在参数和闭包函数体中, 编译器就必须深入到函数体中, 去分析和推导, 复杂度因此急剧提升</p>\n<p>日常遇到这个问题, 还是老老实实用函数吧. 这个问题很难解决, 但不是无法解决, 比如通过使用 <code>Fn trait</code></p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">fun</span><span style=\"color: #ABB2BF\">&lt;</span><span style=\"color: #E5C07B\">T</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E5C07B\">F</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #61AFEF\">Fn</span><span style=\"color: #ABB2BF\">(&amp;</span><span style=\"color: #E5C07B\">T</span><span style=\"color: #ABB2BF\">) -&gt; &amp;</span><span style=\"color: #E5C07B\">T</span><span style=\"color: #ABB2BF\">&gt;(</span><span style=\"color: #E06C75\">f</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E5C07B\">F</span><span style=\"color: #ABB2BF\">) -&gt; </span><span style=\"color: #E5C07B\">F</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">   </span><span style=\"color: #E06C75\">f</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">closure_slision</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">fun</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #56B6C2\">|</span><span style=\"color: #E06C75\">x</span><span style=\"color: #ABB2BF\">: &amp;</span><span style=\"color: #E5C07B\">i32</span><span style=\"color: #56B6C2\">|</span><span style=\"color: #ABB2BF\"> -&gt; &amp;</span><span style=\"color: #E5C07B\">i32</span><span style=\"color: #ABB2BF\"> { </span><span style=\"color: #E06C75\">x</span><span style=\"color: #ABB2BF\"> });</span></span></code></pre></div><h2 id=\"NLL-Non-Lexical-Lifetime\"><a href=\"#NLL-Non-Lexical-Lifetime\" class=\"headerlink\" title=\"NLL (Non-Lexical Lifetime)\"></a>NLL (Non-Lexical Lifetime)</h2><p>引用的生命周期正常来说应该从借用开始一直持续到作用域结束, 但是这种规则会让多引用共存的情况变得更复杂. 好在新版 Rust 提供了 <strong>NLL</strong>, 我们在之前已经提过这个概念, 这里再解释一下: 引用的生命周期从借用处开始, 一直持续到最后一次使用的地方</p>\n<p>再来看一段关于 NLL 的代码解释</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">mut</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">u</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">0</span><span style=\"color: #E5C07B\">i32</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">mut</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">v</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">1</span><span style=\"color: #E5C07B\">i32</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">mut</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">w</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">2</span><span style=\"color: #E5C07B\">i32</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// lifetime of `a` = α ∪ β ∪ γ</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">mut</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">a</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> &amp;</span><span style=\"color: #C678DD\">mut</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">u</span><span style=\"color: #ABB2BF\">;</span><span style=\"color: #7F848E; font-style: italic\">     // --+ α. lifetime of `&amp;mut u`  --+ lexical &quot;lifetime&quot; of `&amp;mut u`,`&amp;mut u`, `&amp;mut w` and `a`</span></span>\n<span class=\"line\"><span style=\"color: #61AFEF\">use</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">a</span><span style=\"color: #ABB2BF\">);</span><span style=\"color: #7F848E; font-style: italic\">                 //   |                            |</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">*</span><span style=\"color: #E06C75\">a</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">3</span><span style=\"color: #ABB2BF\">;</span><span style=\"color: #7F848E; font-style: italic\"> // &lt;-----------------+                            |</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">...</span><span style=\"color: #7F848E; font-style: italic\">                     //                                |</span></span>\n<span class=\"line\"><span style=\"color: #E06C75\">a</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> &amp;</span><span style=\"color: #C678DD\">mut</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">v</span><span style=\"color: #ABB2BF\">;</span><span style=\"color: #7F848E; font-style: italic\">             // --+ β. lifetime of `&amp;mut v`    |</span></span>\n<span class=\"line\"><span style=\"color: #61AFEF\">use</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">a</span><span style=\"color: #ABB2BF\">);</span><span style=\"color: #7F848E; font-style: italic\">                 //   |                            |</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">*</span><span style=\"color: #E06C75\">a</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">4</span><span style=\"color: #ABB2BF\">;</span><span style=\"color: #7F848E; font-style: italic\"> // &lt;-----------------+                            |</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">...</span><span style=\"color: #7F848E; font-style: italic\">                     //                                |</span></span>\n<span class=\"line\"><span style=\"color: #E06C75\">a</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> &amp;</span><span style=\"color: #C678DD\">mut</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">w</span><span style=\"color: #ABB2BF\">;</span><span style=\"color: #7F848E; font-style: italic\">             // --+ γ. lifetime of `&amp;mut w`    |</span></span>\n<span class=\"line\"><span style=\"color: #61AFEF\">use</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">a</span><span style=\"color: #ABB2BF\">);</span><span style=\"color: #7F848E; font-style: italic\">                 //   |                            |</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">*</span><span style=\"color: #E06C75\">a</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">5</span><span style=\"color: #ABB2BF\">;</span><span style=\"color: #7F848E; font-style: italic\"> // &lt;-----------------+ &lt;--------------------------+</span></span></code></pre></div><p>这段代码一目了然, <code>a</code> 有三段生命周期：<code>α, β, γ</code>, 每一段生命周期都随着当前值的最后一次使用而结束</p>\n<h2 id=\"再借用\"><a href=\"#再借用\" class=\"headerlink\" title=\"再借用\"></a>再借用</h2><p>以 NLL 为基础, 让我们再了解一个高级概念: <strong>Reborrow (再借用)</strong></p>\n<p>直接先上码</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #ABB2BF\">#[derive(</span><span style=\"color: #E5C07B\">Debug</span><span style=\"color: #ABB2BF\">)]</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">struct</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Point</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">x</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E5C07B\">i32</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">y</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E5C07B\">i32</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">impl</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Point</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">uodate</span><span style=\"color: #ABB2BF\">(&amp;</span><span style=\"color: #C678DD\">mut</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">self</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">x</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E5C07B\">i32</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">y</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E5C07B\">i32</span><span style=\"color: #ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #E5C07B\">self</span><span style=\"color: #ABB2BF\">.x </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">x</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #E5C07B\">self</span><span style=\"color: #ABB2BF\">.y </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">y</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">main</span><span style=\"color: #ABB2BF\">() {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">mut</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">p</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Point</span><span style=\"color: #ABB2BF\"> { </span><span style=\"color: #E06C75\">x</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #D19A66\">0</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">y</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #D19A66\">0</span><span style=\"color: #ABB2BF\"> };</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">r</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> &amp;</span><span style=\"color: #C678DD\">mut</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">p</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">rr</span><span style=\"color: #ABB2BF\">: &amp;</span><span style=\"color: #E5C07B\">Point</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> &amp;*</span><span style=\"color: #E06C75\">r</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;{:?}&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">rr</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">r</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">update</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #D19A66\">10</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">10</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;{:?}&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">r</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span></code></pre></div><p>乍一看, 同时有了可变引用 <code>r</code> 和不可变引用 <code>rr</code>, 这不是违反了借用规则吗? 但实际上并没有, 因为 <code>rr</code> 是对 <code>r</code> 的再借用</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">mut</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">p</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Point</span><span style=\"color: #ABB2BF\"> { </span><span style=\"color: #E06C75\">x</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #D19A66\">0</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">y</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #D19A66\">0</span><span style=\"color: #ABB2BF\"> };</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">r</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> &amp;</span><span style=\"color: #C678DD\">mut</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">p</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// Reborrow! 此时借用 r 与 r 借用 p 不冲突</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">rr</span><span style=\"color: #ABB2BF\">: &amp;</span><span style=\"color: #E5C07B\">Point</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> &amp;*</span><span style=\"color: #E06C75\">r</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// rr 最后一次使用在这里, 期间我们并没有使用原来的借用 r , 因此不会报错, 根据 NLL, rr 在这里离开作用域</span></span>\n<span class=\"line\"><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;{:?}&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">rr</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// rr 已 Drop, 使用 r 完全没有问题</span></span>\n<span class=\"line\"><span style=\"color: #E06C75\">r</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">move_to</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #D19A66\">10</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">10</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;{:?}&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">r</span><span style=\"color: #ABB2BF\">);</span></span></code></pre></div><h2 id=\"’static-和-T-‘static\"><a href=\"#’static-和-T-‘static\" class=\"headerlink\" title=\"&amp;’static 和 T: ‘static\"></a>&amp;’static 和 T: ‘static</h2><p><code>&#39;static</code> 在 Rust 中是相当常见的, 例如字符串字面值, 特征对象就具有 <code>&#39;static</code> 生命周期. 除了 <code>&amp;&#39;static</code> 有时我们还可以把 <code>&#39;static</code> 作为生命周期约束, 比如 <code>T: Display + &#39;static</code></p>\n<p>那么问题来了, 这两者有什么区别吗?</p>\n<h3 id=\"’static\"><a href=\"#’static\" class=\"headerlink\" title=\"&amp;’static\"></a>&amp;’static</h3><p><code>&amp;&#39;static</code> 对于生命周期有着非常强的要求: 这个引用必须要活到程序结束</p>\n<p>对于字符串字面量来说, 它直接被打包到二进制文件中, 永远不会被 Drop, 因此它能跟程序活得一样久, 自然它的生命周期是 <code>&#39;static</code>, 这针对的仅仅是引用, 而不是持有该引用的变量, 变量还是要该 Drop 就 Drop 的</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">use</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">std</span><span style=\"color: #ABB2BF\">::{</span><span style=\"color: #E5C07B\">slice</span><span style=\"color: #ABB2BF\">::from_raw_parts, </span><span style=\"color: #E5C07B\">str</span><span style=\"color: #ABB2BF\">::from_utf8_unchecked};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">get_memory_location</span><span style=\"color: #ABB2BF\">() -&gt; (</span><span style=\"color: #E5C07B\">usize</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E5C07B\">usize</span><span style=\"color: #ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">    // “Hello World” 是字符串字面量, 因此它的生命周期是 `&#39;static`</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">    // 但持有它的变量 string 的生命周期完全取决于作用域</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">string</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #98C379\">&quot;Hello World!&quot;</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">pointer</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">string</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">as_ptr</span><span style=\"color: #ABB2BF\">() </span><span style=\"color: #C678DD\">as</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">usize</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">length</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">string</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">len</span><span style=\"color: #ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    (</span><span style=\"color: #E06C75\">pointer</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">length</span><span style=\"color: #ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">    // string 被 Drop, 但其对应的数据依然存在</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">get_str_at_location</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">pointer</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E5C07B\">usize</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">length</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E5C07B\">usize</span><span style=\"color: #ABB2BF\">) -&gt; &amp;&#39;</span><span style=\"color: #E5C07B\">static</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">str</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">unsafe</span><span style=\"color: #ABB2BF\"> { </span><span style=\"color: #61AFEF\">from_utf8_unchecked</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #61AFEF\">from_raw_parts</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">pointer</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">as</span><span style=\"color: #ABB2BF\"> *</span><span style=\"color: #C678DD\">const</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">u8</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">length</span><span style=\"color: #ABB2BF\">)) }</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> (</span><span style=\"color: #E06C75\">pointer</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">length</span><span style=\"color: #ABB2BF\">) </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">get_memory_location</span><span style=\"color: #ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">message</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">get_str_at_location</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">pointer</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">length</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #98C379\">&quot;The {} bytes at 0x{:X} stored: {}&quot;</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">length</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">pointer</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">message</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">);</span></span></code></pre></div><h3 id=\"T-‘static\"><a href=\"#T-‘static\" class=\"headerlink\" title=\"T: ‘static\"></a>T: ‘static</h3><p>比起 <code>&amp;&#39;static</code>, 这种形式的约束就有些复杂了</p>\n<p>首先, 在以下两种情况下, <code>T: &#39;static</code> 对 <code>T</code> 的约束与 <code>&amp;&#39;static</code> 有相同的意义</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">use</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">std</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #E5C07B\">fmt</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #E5C07B\">Debug</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">print</span><span style=\"color: #ABB2BF\">&lt;</span><span style=\"color: #E5C07B\">T</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E5C07B\">Debug</span><span style=\"color: #ABB2BF\"> + &#39;</span><span style=\"color: #E5C07B\">static</span><span style=\"color: #ABB2BF\">&gt;( </span><span style=\"color: #E06C75\">input</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E5C07B\">T</span><span style=\"color: #ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;&#39;static value passed in is: {:?}&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">input</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// 或者 impl 类型</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// fn print( input: impl Debug + &#39;static ) {</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">//     println!(&quot;&#39;static value passed in is: {:?}&quot;, input);</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">main</span><span style=\"color: #ABB2BF\">() {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">i</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">0</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">print</span><span style=\"color: #ABB2BF\">(&amp;</span><span style=\"color: #E06C75\">i</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span></code></pre></div><p>这会报错, 原因很简单: &amp;i 的生命周期无法满足 ‘static 的约束</p>\n<p>但只需要小小的修改一下函数签名</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// print_impl 同理</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">print</span><span style=\"color: #ABB2BF\">&lt;</span><span style=\"color: #E5C07B\">T</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E5C07B\">Debug</span><span style=\"color: #ABB2BF\"> + &#39;</span><span style=\"color: #E5C07B\">static</span><span style=\"color: #ABB2BF\">&gt;( </span><span style=\"color: #E06C75\">input</span><span style=\"color: #ABB2BF\">: &amp;</span><span style=\"color: #E5C07B\">T</span><span style=\"color: #ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;&#39;static value passed in is: {:?}&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">input</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span></code></pre></div><p>居然就修好了, 这是因为我们约束的是 <code>T</code>, 但使用的是 <code>&amp;T</code>, 因此编译器不会检查 <code>T</code> 的约束, 只要确保 <code>&amp;T</code> 的生命周期符合规则即可, 而这段代码显然是符合的. 这也说明了 <code>&#39;static</code> 这个约束有多么脆弱</p>\n<p>那么 &#96;&#96;static<code>到底针对谁, 是</code>&amp;’static&#96; 这个引用还是该引用指向的数据活得跟程序一样久呢</p>\n<p>答案是引用指向的数据, 而引用本身是要遵循其作用域范围的, 就像这个简单的例子</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #ABB2BF\">{</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">static_str</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #98C379\">&quot;I&#39;m static&quot;</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;{}&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">static_str</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">    // 该变量被 Drop, 但是数据依然存在</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span>\n<span class=\"line\"><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;{}&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">static_str</span><span style=\"color: #ABB2BF\">);</span></span></code></pre></div><p>最后, 一个经验是: 如果你需要添加 &amp;’static 来让代码工作, 那很可能是设计上出问题了</p>\n<h1 id=\"格式化输出宏\"><a href=\"#格式化输出宏\" class=\"headerlink\" title=\"格式化输出宏\"></a>格式化输出宏</h1><p>在上一篇文章我们一上来就接触到了一个在其它语言初学中不会上来就学的东西 — <strong>宏</strong></p>\n<p>格式化输出都需要宏可见 Rust 是比较依赖宏的语言</p>\n<p>Rust 的宏基于 <strong>AST</strong> 语法树而非 C++ 中简单的字符串替换, 所以更加强大, 甚至可以扩展 Rust 自身的 “语法”</p>\n<p>将字符打印到控制台的操作由 <code>std::fmt</code> 里面的一系列宏来处理:</p>\n<ul>\n<li><code>format!</code>: 格式化一系列字符串和参数为 <code>String</code></li>\n<li><code>print!</code>: 与 <code>format!</code> 类似, 但将最终结果输出到控制台标准输出</li>\n<li><code>println!</code>: 与 <code>print!</code> 类似, 但输出结果追加一个换行符</li>\n<li><code>eprint!</code>: 与 <code>format!</code> 类似, 但将文本输出到控制台标准错误</li>\n<li><code>eprintln!</code>: 与 <code>eprint!</code> 类似, 但输出结果追加一个换行符</li>\n</ul>\n<p>之前的文章中我们也进行了许多打印操作, 但 <code>println!</code> 宏远比你想象的强大得多</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">main</span><span style=\"color: #ABB2BF\">() {</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">    // `{}` 会被任意变量内容所替换</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">    // 变量内容会转化成字符串</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;{} days&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">31</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">    // 不加后缀的话, 31 就自动成为 i32 类型</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">    // 你可以添加后缀来改变 31 的类型</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">    // 用变量替换字符串有多种写法</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">    // 比如可以使用位置参数</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;{0}, this is {1}. {1}, this is {0}&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #98C379\">&quot;A&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #98C379\">&quot;B&quot;</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">    // 可以使用命名参数</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #98C379\">&quot;{name} {age} {id}&quot;</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #E06C75\">name</span><span style=\"color: #56B6C2\">=</span><span style=\"color: #98C379\">&quot;A&quot;</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #E06C75\">age</span><span style=\"color: #56B6C2\">=</span><span style=\"color: #D19A66\">12</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #E06C75\">id</span><span style=\"color: #56B6C2\">=</span><span style=\"color: #D19A66\">123</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    );</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">    // 可以在 `:` 后面指定特殊的格式</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;{} 的二进制是 {:b}&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">10</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">10</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">    // 你可以按指定宽度来右对齐文本</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">    // 下面语句输出 &quot;     1&quot;, 5 个空格后面连着 1</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;{number:&gt;width$}&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">number</span><span style=\"color: #56B6C2\">=</span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">width</span><span style=\"color: #56B6C2\">=</span><span style=\"color: #D19A66\">6</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">    // 你可以在数字左边补 0. 下面语句输出 &quot;000001&quot;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;{number:&gt;0width$}&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">number</span><span style=\"color: #56B6C2\">=</span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">width</span><span style=\"color: #56B6C2\">=</span><span style=\"color: #D19A66\">6</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">    // println! 会检查使用到的参数数量是否正确</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    #[allow(dead_code)]</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">struct</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Structure</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E5C07B\">i32</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">    // 像结构体这样的自定义类型需要更复杂的方式来处理</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">    // 下面语句无法运行</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">    // println!(&quot;{}&quot;, Structure(3));</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span></code></pre></div><p>接下来我们将学习如何打印像结构体那样的复杂数据类型</p>\n<p>所有的类型, 若想用 <code>std::fmt</code> 的格式化打印出来, 都要求实现它. 自动的实现只为一些类型提供, 比如 <code>std</code> 库中的类型. 所有其他类型 都 <strong>必须</strong> 手动实现</p>\n<p><code>fmt::Debug</code> 派生宏使这项工作变得相当简单, 所有类型都能推导 <code>fmt::Debug</code> 的实现. 但是 <code>fmt::Display</code> 需要手动实现</p>\n<h2 id=\"Debug-trait\"><a href=\"#Debug-trait\" class=\"headerlink\" title=\"Debug trait\"></a>Debug trait</h2><p>所有 Std 类型都天生可以使用 <code>{:?}</code> 来打印</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// 推导 `Structure` 的 `fmt::Debug` 实现</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">#[derive(</span><span style=\"color: #E5C07B\">Debug</span><span style=\"color: #ABB2BF\">)]</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">struct</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Structure</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E5C07B\">i32</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// 将 `Structure` 放到结构体 `Deep` 中. 然后使 `Deep` 也能够打印</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">#[derive(</span><span style=\"color: #E5C07B\">Debug</span><span style=\"color: #ABB2BF\">)]</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">struct</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Deep</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E5C07B\">Structure</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">main</span><span style=\"color: #ABB2BF\">() {</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">    // 使用 `{:?}` 打印和使用 `{}` 类似</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;一年有{:?}个月&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">12</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;{0:?}是这个演员的名字&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #98C379\">&quot;Slater&quot;</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">    // `Structure` 也可以打印！</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;打印结构体{:?}&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #61AFEF\">Structure</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #D19A66\">3</span><span style=\"color: #ABB2BF\">));</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">    // 使用 `derive` 的一个问题是不能控制输出的形式</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">    // 假如我只想展示一个 `7` 怎么办？</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;打印结构体{:?}&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #61AFEF\">Deep</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #61AFEF\">Structure</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #D19A66\">7</span><span style=\"color: #ABB2BF\">)));</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span>\n<span class=\"line\"></span></code></pre></div><p><code>fmt::Debug</code> 使这些内容可以打印, 但是牺牲了一些美感. Rust 通过 <code>{:#?}</code> 提供了 “美化打印” 的功能</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #ABB2BF\">#[derive(</span><span style=\"color: #E5C07B\">Debug</span><span style=\"color: #ABB2BF\">)]</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">struct</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Person</span><span style=\"color: #ABB2BF\">&lt;&#39;</span><span style=\"color: #E5C07B\">a</span><span style=\"color: #ABB2BF\">&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">name</span><span style=\"color: #ABB2BF\">: &amp;&#39;</span><span style=\"color: #E5C07B\">a</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">str</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">age</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E5C07B\">u8</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">main</span><span style=\"color: #ABB2BF\">() {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">name</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #98C379\">&quot;Peter&quot;</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">age</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">27</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">peter</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Person</span><span style=\"color: #ABB2BF\"> { </span><span style=\"color: #E06C75\">name</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">age</span><span style=\"color: #ABB2BF\"> };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">    // 美化打印</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;{:#?}&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">peter</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span></code></pre></div><h2 id=\"Display-trait\"><a href=\"#Display-trait\" class=\"headerlink\" title=\"Display trait\"></a>Display trait</h2><p><code>fmt::Debug</code> 通常看起来不太简洁, 因此自定义输出的外观经常是更可取的. 这需要通过手动实现 <code>fmt::Display</code> 来做到. <code>fmt::Display</code> 采用 <code>{}</code> 标记</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #ABB2BF\">#![allow(unused_variables)]</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">main</span><span style=\"color: #ABB2BF\">() {</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">    // fmt::Display 需要手动导入</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">use</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">std</span><span style=\"color: #ABB2BF\">::fmt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">struct</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Structure</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E5C07B\">i32</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">impl</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">fmt</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #E5C07B\">Display</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">for</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Structure</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">fmt</span><span style=\"color: #ABB2BF\">(&amp;</span><span style=\"color: #E5C07B\">self</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">f</span><span style=\"color: #ABB2BF\">: &amp;</span><span style=\"color: #C678DD\">mut</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">fmt</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #E5C07B\">Formatter</span><span style=\"color: #ABB2BF\">) -&gt; </span><span style=\"color: #E5C07B\">fmt</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #E5C07B\">Result</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">            // 仅将 self 的第一个元素写入到给定的输出流 `f`. 返回 `fmt:Result`</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">            // 结果表明操作成功或失败. `write!`的用法和 `println!` 很相似</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">            </span><span style=\"color: #61AFEF\">write!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">f</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #98C379\">&quot;{}&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E5C07B\">self</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #D19A66\">0</span><span style=\"color: #ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        }</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span></code></pre></div><p><code>fmt::Display</code> 的效果可能比 <code>fmt::Debug</code> 简洁, 但对于 <code>std</code> 库来说, 模棱两可的类型该如何显示呢? 这并不是一个问题, 因为对于任何 <strong>非</strong> 泛型的 <strong>容器</strong> 类型, <code>fmt::Display</code> 都能够实现。</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">use</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">std</span><span style=\"color: #ABB2BF\">::fmt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// 带有两个数字的结构体. 推导出 `Debug`, 以便与 `Display` 的输出进行比较</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">#[derive(</span><span style=\"color: #E5C07B\">Debug</span><span style=\"color: #ABB2BF\">)]</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">struct</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">MinMax</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E5C07B\">i64</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E5C07B\">i64</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// 实现 `MinMax` 的 `Display`</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">impl</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">fmt</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #E5C07B\">Display</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">for</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">MinMax</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">fmt</span><span style=\"color: #ABB2BF\">(&amp;</span><span style=\"color: #E5C07B\">self</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">f</span><span style=\"color: #ABB2BF\">: &amp;</span><span style=\"color: #C678DD\">mut</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">fmt</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #E5C07B\">Formatter</span><span style=\"color: #ABB2BF\">) -&gt; </span><span style=\"color: #E5C07B\">fmt</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #E5C07B\">Result</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">        // 使用 `self.number` 来表示各个数据</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #61AFEF\">write!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">f</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #98C379\">&quot;({}, {})&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E5C07B\">self</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #D19A66\">0</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E5C07B\">self</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// 为了比较, 定义一个含有具名字段的结构体</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">#[derive(</span><span style=\"color: #E5C07B\">Debug</span><span style=\"color: #ABB2BF\">)]</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">struct</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Point2D</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">x</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E5C07B\">f64</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">y</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E5C07B\">f64</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// 类似地对 `Point2D` 实现 `Display`</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">impl</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">fmt</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #E5C07B\">Display</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">for</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Point2D</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">fmt</span><span style=\"color: #ABB2BF\">(&amp;</span><span style=\"color: #E5C07B\">self</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">f</span><span style=\"color: #ABB2BF\">: &amp;</span><span style=\"color: #C678DD\">mut</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">fmt</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #E5C07B\">Formatter</span><span style=\"color: #ABB2BF\">) -&gt; </span><span style=\"color: #E5C07B\">fmt</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #E5C07B\">Result</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">        // 自定义格式, 使得仅显示 `x` 和 `y` 的值</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #61AFEF\">write!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">f</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #98C379\">&quot;x: {}, y: {}&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E5C07B\">self</span><span style=\"color: #ABB2BF\">.x, </span><span style=\"color: #E5C07B\">self</span><span style=\"color: #ABB2BF\">.y)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">main</span><span style=\"color: #ABB2BF\">() {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">minmax</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">MinMax</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #D19A66\">0</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">14</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;Compare structures:&quot;</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;Display: {}&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">minmax</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;Debug: {:?}&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">minmax</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">big_range</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\">   </span><span style=\"color: #61AFEF\">MinMax</span><span style=\"color: #ABB2BF\">(-</span><span style=\"color: #D19A66\">300</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">300</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">small_range</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">MinMax</span><span style=\"color: #ABB2BF\">(-</span><span style=\"color: #D19A66\">3</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">3</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;The bigger range is {big} ,the smaller range is {small}&quot;</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #E06C75\">small</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">small_range</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #E06C75\">big</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">big_range</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    );</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">point</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Point2D</span><span style=\"color: #ABB2BF\"> { </span><span style=\"color: #E06C75\">x</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #D19A66\">3.3</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">y</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #D19A66\">7.2</span><span style=\"color: #ABB2BF\"> };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;Compare points:&quot;</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;Display: {}&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">point</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;Debug: {:?}&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">point</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span>\n<span class=\"line\"></span></code></pre></div><h1 id=\"输入输出流\"><a href=\"#输入输出流\" class=\"headerlink\" title=\"输入输出流\"></a>输入输出流</h1><h2 id=\"控制台输入\"><a href=\"#控制台输入\" class=\"headerlink\" title=\"控制台输入\"></a>控制台输入</h2><div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">use</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">std</span><span style=\"color: #ABB2BF\">::io;</span><span style=\"color: #7F848E; font-style: italic\"> // 手动导入 `io`</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">read_input</span><span style=\"color: #ABB2BF\">() -&gt; </span><span style=\"color: #E5C07B\">io</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #E5C07B\">Result</span><span style=\"color: #ABB2BF\">&lt;()&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">    //创建空字符串</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">mut</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">input</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">String</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #61AFEF\">new</span><span style=\"color: #ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">io</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #61AFEF\">stdin</span><span style=\"color: #ABB2BF\">().</span><span style=\"color: #61AFEF\">read_line</span><span style=\"color: #ABB2BF\">(&amp;</span><span style=\"color: #C678DD\">mut</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">input</span><span style=\"color: #ABB2BF\">)?;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;Your input: {}&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">input</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">trim</span><span style=\"color: #ABB2BF\">());</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">Ok</span><span style=\"color: #ABB2BF\">(())</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">main</span><span style=\"color: #ABB2BF\">() {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">read_input</span><span style=\"color: #ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span></code></pre></div><h2 id=\"控制台输出\"><a href=\"#控制台输出\" class=\"headerlink\" title=\"控制台输出\"></a>控制台输出</h2><p>对我们来说这些已经太熟悉了, 这里只再提一些细节. 标准化的输出是 <strong>行缓冲</strong> 的, 这就导致标准化的输出在遇到一个新行之前并不会被隐式刷新. 换句话说 <code>print!</code> 和 <code>println!</code> 二者的效果并不总是相同的. 比如:</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">use</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">std</span><span style=\"color: #ABB2BF\">::io;</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">main</span><span style=\"color: #ABB2BF\">() {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">print!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;Waitting: &quot;</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">mut</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">input</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">String</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #61AFEF\">new</span><span style=\"color: #ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">io</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #61AFEF\">stdin</span><span style=\"color: #ABB2BF\">()</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        .</span><span style=\"color: #61AFEF\">read_line</span><span style=\"color: #ABB2BF\">(&amp;</span><span style=\"color: #C678DD\">mut</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">input</span><span style=\"color: #ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        .</span><span style=\"color: #61AFEF\">expect</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;Read failed&quot;</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">print!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;Your input: {}</span><span style=\"color: #56B6C2\">\\n</span><span style=\"color: #98C379\">&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">input</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span></code></pre></div><p>在这段代码运行时则不会先出现预期的提示字符串, 因为行没有被刷新. 如果想要达到预期的效果就要显示的刷新, 即在提示字符串下加一行 <code>io::stdout().flush().unwrap();</code></p>\n<h2 id=\"文件输入\"><a href=\"#文件输入\" class=\"headerlink\" title=\"文件输入\"></a>文件输入</h2><p>文件输入流指向了文件而不是控制台, 一般通过 match 处理潜在错误</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">use</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">std</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #E5C07B\">error</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #E5C07B\">Error</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">use</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">std</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #E5C07B\">fs</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #E5C07B\">File</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">use</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">std</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #E5C07B\">io</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #E5C07B\">prelude</span><span style=\"color: #ABB2BF\">::*;</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">use</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">std</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #E5C07B\">path</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #E5C07B\">Path</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">main</span><span style=\"color: #ABB2BF\">() {</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">    // 创建一个文件路径</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">path</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Path</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #61AFEF\">new</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;test.txt&quot;</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">display</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">path</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">display</span><span style=\"color: #ABB2BF\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">    // 打开文件只读模式, 返回一个 `io::Result&lt;File&gt;` 类型</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">mut</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">file</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">match</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">File</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #61AFEF\">open</span><span style=\"color: #ABB2BF\">(&amp;</span><span style=\"color: #E06C75\">path</span><span style=\"color: #ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">        // 处理打开文件可能潜在的错误</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #E5C07B\">Err</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">err</span><span style=\"color: #ABB2BF\">) =&gt; </span><span style=\"color: #61AFEF\">panic!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;无法打开 {}, 错误: {}&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">display</span><span style=\"color: #ABB2BF\">,</span><span style=\"color: #E5C07B\">Error</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #61AFEF\">description</span><span style=\"color: #ABB2BF\">(&amp;</span><span style=\"color: #E06C75\">err</span><span style=\"color: #ABB2BF\">)),</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #E5C07B\">Ok</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">file</span><span style=\"color: #ABB2BF\">) =&gt; </span><span style=\"color: #E06C75\">file</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">    // 文件输入数据到字符串, 并返回 `io::Result&lt;usize&gt;` 类型</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">mut</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">s</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">String</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #61AFEF\">new</span><span style=\"color: #ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">match</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">file</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">read_to_string</span><span style=\"color: #ABB2BF\">(&amp;</span><span style=\"color: #C678DD\">mut</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">s</span><span style=\"color: #ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #E5C07B\">Err</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">err</span><span style=\"color: #ABB2BF\">) =&gt; </span><span style=\"color: #61AFEF\">panic!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;无法读取 {}, 错误: {}&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">display</span><span style=\"color: #ABB2BF\">,</span><span style=\"color: #E5C07B\">Error</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #61AFEF\">description</span><span style=\"color: #ABB2BF\">(&amp;</span><span style=\"color: #E06C75\">err</span><span style=\"color: #ABB2BF\">)),</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #E5C07B\">Ok</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">_</span><span style=\"color: #ABB2BF\">) =&gt; </span><span style=\"color: #61AFEF\">print!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;{} 的内容为:</span><span style=\"color: #56B6C2\">\\n</span><span style=\"color: #98C379\">{}&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">display</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">s</span><span style=\"color: #ABB2BF\">),</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span></code></pre></div><h1 id=\"文件输出\"><a href=\"#文件输出\" class=\"headerlink\" title=\"文件输出\"></a>文件输出</h1><p>文件输出流重定向到文件中</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">use</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">std</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #E5C07B\">error</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #E5C07B\">Error</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">use</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">std</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #E5C07B\">io</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #E5C07B\">prelude</span><span style=\"color: #ABB2BF\">::*;</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">use</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">std</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #E5C07B\">fs</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #E5C07B\">File</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">use</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">std</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #E5C07B\">path</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #E5C07B\">Path</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">main</span><span style=\"color: #ABB2BF\">() {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">path</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Path</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #61AFEF\">new</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;out/test.txt&quot;</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">display</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">path</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">display</span><span style=\"color: #ABB2BF\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">    // 用只写模式创建并打开一个文件, 并返回 `io::Result&lt;File&gt;` 类型</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">mut</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">file</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">match</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">File</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #61AFEF\">create</span><span style=\"color: #ABB2BF\">(&amp;</span><span style=\"color: #E06C75\">path</span><span style=\"color: #ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #E5C07B\">Ok</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">file</span><span style=\"color: #ABB2BF\">) =&gt; </span><span style=\"color: #E06C75\">file</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #E5C07B\">Err</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">err</span><span style=\"color: #ABB2BF\">) =&gt; </span><span style=\"color: #61AFEF\">panic!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;无法创建文件 {}, 错误: {}&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">display</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E5C07B\">Error</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #61AFEF\">description</span><span style=\"color: #ABB2BF\">(&amp;</span><span style=\"color: #E06C75\">err</span><span style=\"color: #ABB2BF\">)),</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">file</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">write</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">b&quot;写入文本&quot;</span><span style=\"color: #ABB2BF\">).</span><span style=\"color: #61AFEF\">unwrap</span><span style=\"color: #ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span></code></pre></div><h1 id=\"OpenOptions\"><a href=\"#OpenOptions\" class=\"headerlink\" title=\"OpenOptions\"></a>OpenOptions</h1><p>Rust 还为我们提供了一个方便的配置用于统一前面两个操作, 下面看一些例子</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">use</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">std</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #E5C07B\">fs</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #E5C07B\">OpenOptions</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// 打开一个文件</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">file</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">OpenOptions</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #61AFEF\">new</span><span style=\"color: #ABB2BF\">()</span><span style=\"color: #7F848E; font-style: italic\"> // 创建一组可供配置的空白新选项, 每个选项的默认值都是 false</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    .</span><span style=\"color: #61AFEF\">read</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #D19A66\">true</span><span style=\"color: #ABB2BF\">)</span><span style=\"color: #7F848E; font-style: italic\"> // 启用 读 模式</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    .</span><span style=\"color: #61AFEF\">write</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #D19A66\">true</span><span style=\"color: #ABB2BF\">)</span><span style=\"color: #7F848E; font-style: italic\"> // 启用 写 模式</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    .</span><span style=\"color: #61AFEF\">create</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #D19A66\">true</span><span style=\"color: #ABB2BF\">)</span><span style=\"color: #7F848E; font-style: italic\"> // 如果不存在则创建文件, 存在就返回文件</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    .</span><span style=\"color: #61AFEF\">open</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;test.txt&quot;</span><span style=\"color: #ABB2BF\">);</span><span style=\"color: #7F848E; font-style: italic\"> // 文件路径</span></span></code></pre></div><p>如果该文件已经存在, 则对该文件的任何写调用都将覆盖其内容, 而不会将其截断</p>\n<p>下面还有一些常用选项</p>\n<ul>\n<li><code>append</code>: 追加模式, 写入将追加到文件中, 而不是覆盖. 请注意, 设置 <code>.write(true).append(true)</code> 与仅设置 <code>.append(true)</code> 具有相同的效果. 下面是一些注意事项<ul>\n<li>对于大多数文件系统, 操作系统保证所有写操作都是 <strong>Atom (原子)</strong> 的: 不会浪费任何写操作, 因为另一个进程会同时进行写操作</li>\n<li>使用追加模式时, 确保一次完成将所有在一起的数据写入文件</li>\n<li>如果同时使用读取和追加的访问权限打开文件, 请注意: 在打开之后以及每次写入之后, 读取位置可能设置在文件末尾. 所以在写入之前, 保存当前位置, 可以使用 <code>seek(SeekFrom::Current(0))</code>, 并在下次读取之前恢复它</li>\n</ul>\n</li>\n<li><code>truncate</code>: 截断模式, 如果成功打开文件, 则会将文件长度截断为 0. 注意, 必须同时开启 <code>write</code> 才能使用此操作</li>\n<li><code>create_new</code>: 创建新文件模式. 与 <code>create</code> 不同的是, 如果文件已存在, 即使是符号链接, 它也不会返回, 而是直接报错, 只有文件不存在才会创建并返回. 通过这样的方式确保打开的一定是新文件<ul>\n<li>这个选项是有实际用处的, 因为它是原子的. 否则, 在检查文件是否存在与创建新文件之间, 文件可能是由另一个进程创建的</li>\n<li>注意: 如果开启了此选项, 则 <code>create</code> 和 <code>truncate</code> 将被忽略</li>\n</ul>\n</li>\n</ul>\n","feature":false,"text":"简单认识一下宏. 介绍一下如何漂亮的打印各种类型以方便调试程序. 最后简单介绍一些文件IO...","permalink":"/post/RustCourse-07","photos":[],"count_time":{"symbolsCount":"17k","symbolsTime":"15 mins."},"categories":[{"name":"Course","slug":"Course","count":11,"path":"api/categories/Course.json"}],"tags":[{"name":"Rust","slug":"Rust","count":12,"path":"api/tags/Rust.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F\"><span class=\"toc-text\">生命周期</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%89%8B%E5%8A%A8%E6%A0%87%E6%B3%A8%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E4%B8%8E%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E6%B6%88%E9%99%A4\"><span class=\"toc-text\">手动标注生命周期与生命周期消除</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%8D%E6%80%BB%E6%98%AF%E9%9D%A0%E8%B0%B1%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E6%A3%80%E6%9F%A5\"><span class=\"toc-text\">不总是靠谱的生命周期检查</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%97%A0%E7%95%8C%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F\"><span class=\"toc-text\">无界生命周期</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E7%BA%A6%E6%9D%9F-HRTB\"><span class=\"toc-text\">生命周期约束 HRTB</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Impl-%E5%9D%97%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E6%B6%88%E9%99%A4\"><span class=\"toc-text\">Impl 块生命周期消除</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%97%AD%E5%8C%85%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E6%B6%88%E9%99%A4%E8%A7%84%E5%88%99\"><span class=\"toc-text\">闭包的生命周期消除规则</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#NLL-Non-Lexical-Lifetime\"><span class=\"toc-text\">NLL (Non-Lexical Lifetime)</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%86%8D%E5%80%9F%E7%94%A8\"><span class=\"toc-text\">再借用</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E2%80%99static-%E5%92%8C-T-%E2%80%98static\"><span class=\"toc-text\">&amp;’static 和 T: ‘static</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E2%80%99static\"><span class=\"toc-text\">&amp;’static</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#T-%E2%80%98static\"><span class=\"toc-text\">T: ‘static</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%A0%BC%E5%BC%8F%E5%8C%96%E8%BE%93%E5%87%BA%E5%AE%8F\"><span class=\"toc-text\">格式化输出宏</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Debug-trait\"><span class=\"toc-text\">Debug trait</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Display-trait\"><span class=\"toc-text\">Display trait</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E6%B5%81\"><span class=\"toc-text\">输入输出流</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8E%A7%E5%88%B6%E5%8F%B0%E8%BE%93%E5%85%A5\"><span class=\"toc-text\">控制台输入</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8E%A7%E5%88%B6%E5%8F%B0%E8%BE%93%E5%87%BA\"><span class=\"toc-text\">控制台输出</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%96%87%E4%BB%B6%E8%BE%93%E5%85%A5\"><span class=\"toc-text\">文件输入</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%96%87%E4%BB%B6%E8%BE%93%E5%87%BA\"><span class=\"toc-text\">文件输出</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#OpenOptions\"><span class=\"toc-text\">OpenOptions</span></a></li></ol>","author":{"name":"芳塔洛斯","slug":"blog-author","avatar":"https://fontlos.com/icons/avatar.jpg","link":"/","description":"来人间一趟, 为散步一场<br />待走出岁月, 何样的彼方<br />才配得上这一路的颠沛与时光","socials":{"github":"https://github.com/fontlos","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"https://fontlos.com/icons/bilibili.svg","link":"https://space.bilibili.com/362772872"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"Zola使用教程(1) 初识Zola","uid":"12da3e48d8c23028fedbec1829c337a9","slug":"2022-01-22-01","date":"2022-01-21T16:02:09.000Z","updated":"2024-03-06T02:36:48.103Z","comments":true,"path":"api/articles/2022-01-22-01.json","keywords":"Programming, Web, Frontend, Backend ,Rust, Blog, Aurora, Fontlos, 芳塔洛斯","cover":"https://fontlos.com/icons/logo.png","text":"Zola是一个静态站点生成器, 采用 Rust 编写, 通过动态模板将内容转化为静态 HTML 页面...","permalink":"/post/2022-01-22-01","photos":[],"count_time":{"symbolsCount":"6.3k","symbolsTime":"6 mins."},"categories":[{"name":"Course","slug":"Course","count":11,"path":"api/categories/Course.json"}],"tags":[{"name":"Zola","slug":"Zola","count":3,"path":"api/tags/Zola.json"},{"name":"Frontend","slug":"Frontend","count":5,"path":"api/tags/Frontend.json"}],"author":{"name":"芳塔洛斯","slug":"blog-author","avatar":"https://fontlos.com/icons/avatar.jpg","link":"/","description":"来人间一趟, 为散步一场<br />待走出岁月, 何样的彼方<br />才配得上这一路的颠沛与时光","socials":{"github":"https://github.com/fontlos","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"https://fontlos.com/icons/bilibili.svg","link":"https://space.bilibili.com/362772872"}}}},"feature":false},"next_post":{"title":"初识 Rust(6) | 方法, 泛型, Trait, 生命周期, 集合类型","uid":"91ba0ade330f247ed224e1b5c95f6039","slug":"RustCourse-06","date":"2021-06-08T12:32:17.000Z","updated":"2024-03-06T02:36:48.107Z","comments":true,"path":"api/articles/RustCourse-06.json","keywords":"Programming, Web, Frontend, Backend ,Rust, Blog, Aurora, Fontlos, 芳塔洛斯","cover":"https://fontlos.com/cover/ferris.png","text":"为类型实现方法. 如何使用泛型类型, 认识 Trait 和 Trait Object, 初步了解生命周期. 介绍集合类型, 动态数组, 基于动态数组的可变长度字符串, KV 存储....","permalink":"/post/RustCourse-06","photos":[],"count_time":{"symbolsCount":"17k","symbolsTime":"16 mins."},"categories":[{"name":"Course","slug":"Course","count":11,"path":"api/categories/Course.json"}],"tags":[{"name":"Rust","slug":"Rust","count":12,"path":"api/tags/Rust.json"}],"author":{"name":"芳塔洛斯","slug":"blog-author","avatar":"https://fontlos.com/icons/avatar.jpg","link":"/","description":"来人间一趟, 为散步一场<br />待走出岁月, 何样的彼方<br />才配得上这一路的颠沛与时光","socials":{"github":"https://github.com/fontlos","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"https://fontlos.com/icons/bilibili.svg","link":"https://space.bilibili.com/362772872"}}}},"feature":false}}