{"title":"一文速通 Python 基础","uid":"71664c173db75f1c7fc4f710319bb199","slug":"2024-03-06","date":"2024-03-05T16:27:10.000Z","updated":"2024-03-06T02:36:48.103Z","comments":true,"path":"api/articles/2024-03-06.json","keywords":"Programming, Web, Frontend, Backend ,Rust, Blog, Aurora, Fontlos, 芳塔洛斯","cover":"https://fontlos.com/icons/logo.png","content":"<p>非官方的 Python 极简教程, 不会完全按照常规教程的体系进行, 适合快速熟悉语法, 并且会介绍一些与基础相关但冷门的内容</p>\n<h1 id=\"Python-极简介绍\"><a href=\"#Python-极简介绍\" class=\"headerlink\" title=\"Python 极简介绍\"></a>Python 极简介绍</h1><p><strong>Python</strong> 是一门 <strong>高层次的</strong> <strong>动态类型的</strong> <strong>弱类型的</strong> <strong>解释型</strong> 语言, 下面逐一解释这些名词的含义</p>\n<ul>\n<li>高层次: 对比汇编这种底层的低级语言, C&#x2F;C++ 这种偏底层的中级语言, Python是高度抽象的, 更加接近自然语言, 关键字很少, 便于理解记忆</li>\n<li>动态类型: 一个软件在运行时的状态被称为 <strong>Runtime (运行时)</strong>, 而动态类型就是指只有在运行时才会进行类型检查, 这意味着变量的数据类型不是在编译期确定的, 而是在程序运行过程中才会绑定的</li>\n<li>弱类型: 弱类型语言允许变量被赋予不同的数据类型, 不需要任何显式的类型转换, 比如一个整数类型, 既可以被赋值数字 0, 也可以被赋值字符 “0”</li>\n<li>解释型: 指不需要被编译成计算机可以直接识别的机器码, 而是通过解释器进行逐行解释在运行时翻译执行</li>\n</ul>\n<h1 id=\"环境配置-以-Windows-为例\"><a href=\"#环境配置-以-Windows-为例\" class=\"headerlink\" title=\"环境配置 (以 Windows 为例)\"></a>环境配置 (以 Windows 为例)</h1><h2 id=\"Python-安装\"><a href=\"#Python-安装\" class=\"headerlink\" title=\"Python 安装\"></a>Python 安装</h2><p>可以直接下载并运行官网提供的 <a href=\"https://www.python.org/ftp/python/3.12.2/python-3.12.2-amd64.exe\">安装器</a>, 安装过程建议勾选 <strong>Add Python 3.x to PATH</strong> (用于自动添加环境变量) 并选择自定义安装, 在设置 <strong>Optional Features</strong> 界面最好将 <strong>pip, tcl&#x2F;tk, Python test suite</strong> 等项全部勾选上. 强烈建议选择自定义的安装路径并保证路径中没有中文</p>\n<p>也可以手动下载 <a href=\"https://www.python.org/ftp/python/3.12.2/python-3.12.2-embed-amd64.zip\">压缩包</a>, 解压到任意目录, 并手动添加到环境变量</p>\n<p>通过在终端执行</p>\n<div class=\"language-sh\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">sh</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #61AFEF\">python</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">-V</span></span></code></pre></div><p>如果显示了版本信息, 则安装完成</p>\n<p>你也可以直接通过在终端输入 <code>python</code> 并回车进入终端交互式页面编写一次性代码, 当然更多情况下我们还是会使用代码编辑器进行编码</p>\n<h2 id=\"编辑器安装配置\"><a href=\"#编辑器安装配置\" class=\"headerlink\" title=\"编辑器安装配置\"></a>编辑器安装配置</h2><p>最专业的 <strong>Python IDE (集成开发环境)</strong> 当然是 Jetbrains 的 <a href=\"https://www.jetbrains.com/pycharm/download/\">Pycharm</a>, 但对于初学者而言, 单个脚本或小型项目的编写更推荐使用 <a href=\"https://code.visualstudio.com/\">VSCode</a>, 点击链接下载安装后, 只需要再安装 <a href=\"https://marketplace.visualstudio.com/items?itemName=ms-python.python\">Python</a> 插件即可</p>\n<p>下面是其他的可能需要的插件</p>\n<ul>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=MS-CEINTL.vscode-language-pack-zh-hans\">Chinese (Simplified)</a> 简体中文插件</li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=formulahendry.code-runner\">Code Runner</a> 为 Python 等语言添加右键运行菜单</li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=Codeium.codeium\">Codeium</a> 一个类似 Copilot 的 AI 代码提示插件</li>\n</ul>\n<h2 id=\"编辑器基本使用\"><a href=\"#编辑器基本使用\" class=\"headerlink\" title=\"编辑器基本使用\"></a>编辑器基本使用</h2><p>打开 VSCode, 点击左下角齿轮图标, 点击设置, 在设置中搜索 <code>Auto Save</code>, 将 <strong>Auto Save</strong> 选项改成 <code>afterDelay</code>, 将 <strong>Auto Save Delay</strong> 选项改成 <code>1000</code>, 这表示每 1000 ms 自动保存一次文件</p>\n<p>在左侧侧边栏选择打开一个空文件夹, 在文件夹内新建一个 <code>&lt;文件名&gt;.py</code> 文件. 接下来就可以在文件内编写代码了</p>\n<p>编写完成后, 在对应文件上右键, 选择 <strong>在集成终端中打开</strong>, 在新打开的终端中输入</p>\n<div class=\"language-sh\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">sh</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #7F848E; font-style: italic\"># 表示调用 Python 解释器执行这个文件, 注意空格</span></span>\n<span class=\"line\"><span style=\"color: #61AFEF\">python</span><span style=\"color: #ABB2BF\"> &lt;</span><span style=\"color: #98C379\">文件</span><span style=\"color: #ABB2BF\">名&gt;</span><span style=\"color: #98C379\">.py</span></span></code></pre></div><p>如果安装了 <strong>Code Runner</strong> 插件, 你也可以在文件编辑区内右键选择 <strong>Run Code</strong>, 在文件上右键选择 <strong>Run Code</strong>, 或在文件编辑区右上角单击小三角来运行程序</p>\n<h1 id=\"熟悉-Python-世界的基本工具\"><a href=\"#熟悉-Python-世界的基本工具\" class=\"headerlink\" title=\"熟悉 Python 世界的基本工具\"></a>熟悉 Python 世界的基本工具</h1><h2 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h2><p>对于一个 Python 文件, 或者对于任何的不论是语言, 知识还是笔记, 适当的注解都是至关重要的. 这些能够帮助你在很长时间后快速熟悉起曾经写下的内容, 也能时刻提醒自己: 自己该做什么, 自己在做什么, 自己做了什么</p>\n<p>即便 Python 已经是一门高度抽象的高级语言, 但自然语言仍然比这些代码更加易懂, 因此编写代码的时候, 注释尤为重要</p>\n<p>在 Python 文件中可以使用以下两种注释</p>\n<div class=\"language-py\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">py</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #7F848E; font-style: italic\"># 一个井号后面的内容都将作为注释, 不会被执行, 这被称为单行注释</span></span>\n<span class=\"line\"><span style=\"color: #56B6C2\">print</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;你好, 世界!&quot;</span><span style=\"color: #ABB2BF\">) </span><span style=\"color: #7F848E; font-style: italic\"># 单行注释也可以放在代码的后面</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #98C379\">&quot;&quot;&quot;</span></span>\n<span class=\"line\"><span style=\"color: #98C379\">三组双引号之间是多行注释</span></span>\n<span class=\"line\"><span style=\"color: #98C379\">这之间的所有内容都将被忽略</span></span>\n<span class=\"line\"><span style=\"color: #98C379\">&quot;&quot;&quot;</span></span></code></pre></div><p>在这同时我们也按照惯例写出了最简单的 Python 程序, 运行程序, 即可看到控制台输出了 <code>你好, 世界!</code></p>\n<h2 id=\"Print-控制台输出\"><a href=\"#Print-控制台输出\" class=\"headerlink\" title=\"Print 控制台输出\"></a>Print 控制台输出</h2><p>接下来让我们认识一下第二个基本工具, 我们已经在上面见过它了: <code>print()</code> 函数. 这将是我们基础知识中最常用的一个函数, 它的意义和数学中的函数类似, 有函数的名字, 后面跟上一个小括号, 括号里面放函数的参数, 最后函数可以计算出一个值. 就像它的名字 “打印”, 它的功能就是将括号中的参数打印到控制台中, 你不仅可以打印字符, 还可以打印变量, 和几乎所有的数据类型, 我们会在后面逐一介绍</p>\n<h1 id=\"变量与基本数据类型\"><a href=\"#变量与基本数据类型\" class=\"headerlink\" title=\"变量与基本数据类型\"></a>变量与基本数据类型</h1><h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><p>就像数学中可以 “令 x &#x3D; 1” 那样, Python同样可以用极为类似的方式声明变量</p>\n<div class=\"language-py\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">py</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #ABB2BF\">x </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">1</span></span></code></pre></div><p>对没错, 仅此而已, 就是那么简单, 用一个等号连接. 等号左边是变量的名字, 等号右边是变量的值</p>\n<p>对于变量的名字, 理论上可以是符合下列规则的任何字符串</p>\n<ul>\n<li>硬性规则<ul>\n<li>由字母 (广义的 <strong>Unicode 字符</strong>, 不包括 <strong>空格</strong> 等特殊字符), 数字和下划线构成, 但不能以数字开头</li>\n<li>大小写敏感 (大写的 <code>a</code> 和小写的 <code>A</code> 是两个不同的变量)</li>\n<li>不要跟关键字 (有特殊含义的单词, 后面会讲到, 比如 <code>if</code>, <code>else</code> 等) 和系统保留字 (如刚刚学到的 <code>print</code> 函数的名字, 模块的名字等) 冲突</li>\n</ul>\n</li>\n<li>PEP 8 要求:<ul>\n<li>用小写字母拼写, 多个单词用下划线连接。</li>\n<li>受保护的实例属性用单个下划线开头 (后面会讲到)</li>\n<li>私有的实例属性用两个下划线开头 (后面会讲到)</li>\n</ul>\n</li>\n</ul>\n<p>还记得刚刚说的 <code>print</code> 函数可以用来打印变量吗, 快来试试吧</p>\n<div class=\"language-py\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">py</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #ABB2BF\">x </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">1</span></span>\n<span class=\"line\"><span style=\"color: #56B6C2\">print</span><span style=\"color: #ABB2BF\">(x) </span><span style=\"color: #7F848E; font-style: italic\"># 打印变量</span></span></code></pre></div><h2 id=\"基本数据类型\"><a href=\"#基本数据类型\" class=\"headerlink\" title=\"基本数据类型\"></a>基本数据类型</h2><div class=\"language-py\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">py</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #ABB2BF\">string </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #98C379\">&quot;字符串&quot;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">string2 </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #98C379\">&#39;单引号也可以&#39;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">integer_num </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">-</span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #7F848E; font-style: italic\"># 整数类型, 简称整型, 在 Python 3.x 之后已经不区分长整型和短整型了</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">float_num </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">1.0</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #7F848E; font-style: italic\"># 浮点数类型, 简称浮点型, 表示小数</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">bool_type </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">True</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #7F848E; font-style: italic\"># 布尔类型, 用于表示 &quot;真&quot; 或 &quot;假&quot;, 只有两种值 &quot;True&quot; 或 &quot;False&quot;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">big_num </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">1_000_000</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #7F848E; font-style: italic\"># 可以通过下划线分割长数字增加可读性</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">sci_num </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">2e2</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #7F848E; font-style: italic\"># 科学计数法, 表示 2.0 * 10^2, 自带至少一位小数, 200.0</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">sci_num2 </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">2.000000e+02</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #7F848E; font-style: italic\"># 标准科学计数法, 表示 2.0 * 10^2, 自带至少一位小数, 200.0</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">bin_num </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">0b</span><span style=\"color: #D19A66\">101</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #7F848E; font-style: italic\"># 以 &quot;0b&quot; 开头的是二进制数字类型, 注意后面跟的数字不能超过 1, 打印时默认以十进制输出</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">hex_num </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">0x</span><span style=\"color: #D19A66\">12abcdef</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #7F848E; font-style: italic\"># 以 &quot;0x&quot; 开头的是十六进制数字类型, 包含 0-9, a-f 这些字符, 打印时默认以十进制输出</span></span></code></pre></div><h2 id=\"打印数据类型\"><a href=\"#打印数据类型\" class=\"headerlink\" title=\"打印数据类型\"></a>打印数据类型</h2><p>我们可以通过 <code>type()</code> 函数来获取一个变量的数据类型</p>\n<div class=\"language-py\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">py</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #ABB2BF\">a </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">1</span></span>\n<span class=\"line\"><span style=\"color: #56B6C2\">print</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #56B6C2\">type</span><span style=\"color: #ABB2BF\">(a))</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">#这将会输出 &quot;&lt;class &#39;int&#39;&gt;&quot;</span></span></code></pre></div><h1 id=\"格式化输出\"><a href=\"#格式化输出\" class=\"headerlink\" title=\"格式化输出\"></a>格式化输出</h1><p>就像上面说的, 二进制和十六进制的小数被打印时默认都是十进制, 那么有没有办法让它们以原来的样子输出呢? 这就要提到 <strong>格式化输出</strong> 了, 事实上我们可以为很多类型的输出自定义其格式</p>\n<p>下面将会看到字符串内部有多种 <code>%</code> 开头的短字符串, 它们表示一个占位符并且具有特殊的格式, 在这个主字符串后面用单个 <code>%</code> 相隔会有一些数据类型, 他们将会替换掉前面的占位符并继承它的格式</p>\n<div class=\"language-py\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">py</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #56B6C2\">print</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;</span><span style=\"color: #D19A66\">%c</span><span style=\"color: #98C379\">&quot;</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">%</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #98C379\">&quot;C&quot;</span><span style=\"color: #ABB2BF\">) </span><span style=\"color: #7F848E; font-style: italic\"># %c 表示 char, 将值格式化为单个字符</span></span>\n<span class=\"line\"><span style=\"color: #56B6C2\">print</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;</span><span style=\"color: #D19A66\">%s</span><span style=\"color: #98C379\">&quot;</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">%</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #98C379\">&quot;String&quot;</span><span style=\"color: #ABB2BF\">) </span><span style=\"color: #7F848E; font-style: italic\"># %s 表示 string, 将值格式化为字符串</span></span>\n<span class=\"line\"><span style=\"color: #56B6C2\">print</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;</span><span style=\"color: #D19A66\">%d</span><span style=\"color: #98C379\">&quot;</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">%</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">1.0</span><span style=\"color: #ABB2BF\">)  </span><span style=\"color: #7F848E; font-style: italic\"># %d 表示将值格式化整数</span></span>\n<span class=\"line\"><span style=\"color: #56B6C2\">print</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;</span><span style=\"color: #D19A66\">%f</span><span style=\"color: #98C379\">&quot;</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">%</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\">) </span><span style=\"color: #7F848E; font-style: italic\"># %f 表示格式化为标准浮点数</span></span>\n<span class=\"line\"><span style=\"color: #56B6C2\">print</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;</span><span style=\"color: #D19A66\">%.2f</span><span style=\"color: #98C379\">&quot;</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">%</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\">) </span><span style=\"color: #7F848E; font-style: italic\"># %.2f 表示格式化为两位小数, 当然也可以指定其他精度</span></span>\n<span class=\"line\"><span style=\"color: #56B6C2\">print</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&#39;</span><span style=\"color: #D19A66\">%e</span><span style=\"color: #98C379\">&#39;</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">%</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">1.0e3</span><span style=\"color: #ABB2BF\">) </span><span style=\"color: #7F848E; font-style: italic\"># %e 表示将值格式化为标准科学计数法</span></span></code></pre></div><p>可以简单的通过逗号隔开打印多个值和变量, 也可以通过 <strong>format</strong> 将变量嵌入到字符串中</p>\n<div class=\"language-py\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">py</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #ABB2BF\">name </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #98C379\">&quot;Job&quot;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #56B6C2\">print</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;Hello &quot;</span><span style=\"color: #ABB2BF\">,name)</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\"># 用 f 进行标记, 即可通过外面包裹花括号的方式将变量嵌入字符串</span></span>\n<span class=\"line\"><span style=\"color: #56B6C2\">print</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #C678DD\">f</span><span style=\"color: #98C379\">&quot;Hello </span><span style=\"color: #D19A66\">{</span><span style=\"color: #ABB2BF\">name</span><span style=\"color: #D19A66\">}</span><span style=\"color: #98C379\">&quot;</span><span style=\"color: #ABB2BF\">)</span></span></code></pre></div><h1 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h1><p>运算符, 顾名思义, 用于运算的符号, 可以用于值或变量的运算, 其中就有我们在数学中熟悉的数学运算符, 包括加减乘除等. 同样, 就像数学中先乘除后加减那样, Python中的运算符也有优先级之分</p>\n<p>下面将按照优先级从高到低的顺序列出常见运算符, 仅加粗部分为常用运算符</p>\n<ul>\n<li><strong>小括号</strong>: <code>()</code>, 最高级的运算符</li>\n<li><strong>索引&#x2F;切片运算符</strong>: <code>[]</code>, <code>[:]</code>, 其作用分别是<ul>\n<li>取列表或元组元素下标</li>\n<li>取列表或元组切片</li>\n</ul>\n</li>\n<li>优先级比较特殊的运算符: <code>~</code>, <code>+</code>, <code>-</code>, 其功能分别如下<ul>\n<li>(不常用)位运算符中优先级较高的特例, 按位取反, 比如 <code>~4</code> 意思是 4 的 二进制 100 每一位进行取反, 即 001, 即十进制的 1</li>\n<li>取正负号</li>\n</ul>\n</li>\n<li><strong>数学运算符</strong><ul>\n<li><code>**</code>: 乘幂运算符, 例如 2 ** 3 &#x3D; 8, <strong>当幂次是既约真分数时至少自带一位小数</strong></li>\n<li><code>*</code>, <code>/</code>, <code>%</code>, <code>//</code>, 其功能分别是:<ul>\n<li>乘法运算符</li>\n<li>除法运算符, <strong>自带至少一位小数</strong></li>\n<li>除法取余数运算符, 例如 5 % 3 &#x3D; 2</li>\n<li>除法取整数运算符, 例如 5 &#x2F;&#x2F; 3 &#x3D; 1</li>\n</ul>\n</li>\n<li><code>+</code>, <code>-</code>: 加减法运算符</li>\n</ul>\n</li>\n<li>(不常用)位运算符<ul>\n<li><code>&gt;&gt;</code>, <code>&lt;&lt;</code><ul>\n<li>前者为右移运算符, 将数字类型的二进制值右移, 相当于除 2 运算, 例如 <code>4 &gt;&gt; 1</code> 意思是 4 的二进制 100 整体右移一位, 导致末尾 0 消失, 变成 10 即十进制的 2</li>\n<li>后者为左移运算符, 类比右移运算符, 相当于乘 2 运算, 例如 <code>1 &lt;&lt; 10</code> 相当于 1 的二进制 1 整体左移十位, 空位补零变成 10000000000, 即十进制的 1024</li>\n<li>注: 在早期 CPU 上位运算的速度大于乘法运算, 但在现代 CPU 与编译器优化下, 二者区别已经不大了</li>\n</ul>\n</li>\n<li><code>&amp;</code> 按位与运算符, 对两个二进制执行按位与运算, 相同为 1 不同为 0, 例如 <code>4 &amp; 5</code> 意思是 4 和 5 的二进制 100 和 101 按位与运算得到 110, 即十进制的6</li>\n<li><code>^</code>, <code>|</code>: 前者为按位异或运算符, 后者为按位或运算符</li>\n</ul>\n</li>\n<li>比较运算符, 返回布尔值<ul>\n<li><code>&gt;</code>, <code>&lt;</code>, <code>&gt;=</code>, <code>&lt;=</code>, 判断是否大于, 小于, 大于等于, 小于等于</li>\n<li><code>==</code>, <code>!=</code>, 判断是否等于, 是否不等于</li>\n</ul>\n</li>\n<li>身份运算符: <code>is</code>, <code>is not</code></li>\n<li>成员运算符: <code>in</code>, <code>not in</code></li>\n<li><strong>逻辑运算符</strong>: <code>and</code>, <code>or</code>, <code>not</code>, 分别对应 <strong>与, 或, 非</strong> 运算<ul>\n<li>与运算, 连接的两个表达式都为真时才为真, 例如 <code>5 &gt; 4 and 6 &gt; 5</code> 返回 <code>True</code><ul>\n<li>短路功能: 当与运算左侧为假时, 右侧表达式不进行计算, 整体即可判定为假</li>\n</ul>\n</li>\n<li>或运算, 连接的两个表达式有一个为真时就为真, 例如 <code>5 &gt; 4 or 5 &gt; 6</code> 返回 <code>True</code><ul>\n<li>短路功能: 当或运算左侧为真时, 右侧表达式不进行计算, 整体即可判定为真</li>\n</ul>\n</li>\n<li>非运算, 后接真时返回假, 后接假时返回真, 例如 <code>not 5 == 4</code> 返回真</li>\n</ul>\n</li>\n<li><strong>赋值运算符</strong>: <code>=</code>, <code>+=</code>, <code>-=</code>, <code>*=</code>, <code>/=</code>, <code>%=</code>, <code>//=</code>, <code>**=</code>, <code>&amp;=</code><ul>\n<li><code>=</code> 是最常用的赋值运算符</li>\n<li><code>+=</code> 加法赋值运算, 例如 <code>a += 6</code> 意思是 <code>a = a + 6</code>, 后面的其他运算符同理</li>\n<li>(不常用) <code>&amp;=</code> 是按位与赋值运算符</li>\n<li>(不常用) 赋值运算符链式调用时从左往右运算, 比如 <code>a = b = c</code> 意思是 <code>a = (b = c)</code>, <code>a = b += 4</code> 意思是 <code>a = (b = b + 4)</code></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"集合类型\"><a href=\"#集合类型\" class=\"headerlink\" title=\"集合类型\"></a>集合类型</h1><p>类似数学中的集合, 向量, Python 中也有集合类型, 用于储存多个值</p>\n<h2 id=\"有序集合\"><a href=\"#有序集合\" class=\"headerlink\" title=\"有序集合\"></a>有序集合</h2><p>不同于多数语言, Python 的有序集合类型不包括数组, 而是用列表取而代之, 除此之外还有元组. 作为有序集合类型, 那么自然而然地可以理解, 每一个元素都有一个对应的编号. 但需要注意的是, 在包括 Python 在内的绝大多数编程语言中, <strong>索引都是从 0 开始的</strong>, 即不论是列表还是元组, 其第一个元素的编号或者说索引都是 0!</p>\n<p>还有一点特殊的是, Python 中的索引可以是 <em>负值</em>, 表示 <em>倒数第几个元素</em>, 比如 <code>-1</code> 表示最后一个元素</p>\n<ul>\n<li><strong>列表 (List)</strong><ul>\n<li>使用 <code>[]</code> 包裹的一组用逗号隔开的值</li>\n<li>值可以是任何类型, 可以是不同的类型, 甚至包括列表本身</li>\n<li>列表是可以被改变的, 可以通过列表内置的方法进行增加, 删除, 修改, 查询元素<ul>\n<li>方法可以理解为一种数据类型自带的函数, 通过 <code>变量/值.[函数名]()</code> 调用</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>元组 (Tuple)</strong><ul>\n<li>使用 <code>()</code> 包裹的一组用逗号隔开的值, 但 <code>()</code> 可以省略不写</li>\n<li>值可以是任何类型, 可以是不同的类型, 甚至包括元组本身</li>\n<li>元组一旦确定就不可以被更改</li>\n</ul>\n</li>\n</ul>\n<div class=\"language-py\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">py</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #ABB2BF\">my_list </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> [</span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">1.5</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #98C379\">&quot;a&quot;</span><span style=\"color: #ABB2BF\">, [</span><span style=\"color: #D19A66\">0</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">True</span><span style=\"color: #ABB2BF\">]]</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">my_tuple </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">1.5</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #98C379\">&quot;a&quot;</span><span style=\"color: #ABB2BF\">, (</span><span style=\"color: #D19A66\">0</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">True</span><span style=\"color: #ABB2BF\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\"># 可以通过列表内置的一些方法操作列表</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">my_list.</span><span style=\"color: #61AFEF\">append</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\">) </span><span style=\"color: #7F848E; font-style: italic\"># 添加单个元素在列表末尾</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\"># 此时 my_list = [1, 1.5, &quot;a&quot;, [0, True], 1]</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">my_list.</span><span style=\"color: #61AFEF\">extend</span><span style=\"color: #ABB2BF\">((</span><span style=\"color: #D19A66\">2</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">3</span><span style=\"color: #ABB2BF\">)) </span><span style=\"color: #7F848E; font-style: italic\"># 添加多个元素在列表末尾, 注意需要括号</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\"># 此时 my_list = [1, 1.5, &quot;a&quot;, [0, True], 1, 2, 3]</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">my_list.</span><span style=\"color: #61AFEF\">insert</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #D19A66\">2</span><span style=\"color: #ABB2BF\">,</span><span style=\"color: #98C379\">&quot;b&quot;</span><span style=\"color: #ABB2BF\">) </span><span style=\"color: #7F848E; font-style: italic\"># 在索引为 2 的元素后面插入值 &quot;b&quot;</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\"># 此时 my_list = [1, 1.5, &quot;a&quot;, &quot;b&quot;, [0, True], 1, 2, 3]</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">my_list.</span><span style=\"color: #61AFEF\">remove</span><span style=\"color: #ABB2BF\">([</span><span style=\"color: #D19A66\">0</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">True</span><span style=\"color: #ABB2BF\">]) </span><span style=\"color: #7F848E; font-style: italic\"># 删除指定值的元素</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\"># 此时 my_list = [1, 1.5, &quot;a&quot;, &quot;b&quot;, 1, 2, 3]</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">my_list.</span><span style=\"color: #61AFEF\">pop</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\">) </span><span style=\"color: #7F848E; font-style: italic\"># 删除指定索引的元素</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\"># 此时 my_list = [1,&quot;a&quot;, &quot;b&quot;, 1, 2, 3]</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">a </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> my_list.</span><span style=\"color: #61AFEF\">index</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\">) </span><span style=\"color: #7F848E; font-style: italic\"># 获取指定索引的值</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\"># a = &quot;a&quot;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">my_list.</span><span style=\"color: #61AFEF\">clear</span><span style=\"color: #ABB2BF\">() </span><span style=\"color: #7F848E; font-style: italic\"># 清空列表</span></span></code></pre></div><p>除了通过方法获得列表的值, 还可以直接通过索引或切片来获取, 还记得 (运算符)[#运算符] 部分提到的 索引&#x2F;切片运算符 吗</p>\n<p><em>下面的内容不仅对列表有效, 对元组同样有效</em></p>\n<ul>\n<li>索引<ul>\n<li>通过在变量后追加一个方括号来获取索引元素, 形如 <code>variable[index]</code></li>\n</ul>\n</li>\n<li>切片: 字面意思, 获取变量中的一段<ul>\n<li>通过在变量后追加一个方括号来获取切片, 形如 <code>variable[start:end:step]</code></li>\n<li>start: 表示截取的起始索引, 且包含, 不写则截取到开头 (可以理解为从正方向的 0 号开始截取)</li>\n<li>end: 表示截取的终止索引, 但不包含, 不写则截取到结尾 (可以理解为从负数索引截取到 0 号)</li>\n<li>step: 步长, 即从起始索引开始, 每隔多少个元素选取一个元素, 不写默认为 1</li>\n<li>总之, 切片相当于从集合中取了一个 “左闭右开区间”</li>\n</ul>\n</li>\n</ul>\n<div class=\"language-py\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">py</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #ABB2BF\">arr </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> [</span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">2</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">3</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">4</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">5</span><span style=\"color: #ABB2BF\">]</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\"># 通过在列表或元组变量后追加一个方括号来获取索引元素或切片</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">one </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> arr[</span><span style=\"color: #D19A66\">0</span><span style=\"color: #ABB2BF\">]</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\"># one 等于 arr 列表的第一个元素, 即 1</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">five </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> arr[</span><span style=\"color: #56B6C2\">-</span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\">]</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\"># five 等于 arr 列表的倒数第一个元素, 即 5</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">arr1 </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> arr[:</span><span style=\"color: #D19A66\">3</span><span style=\"color: #ABB2BF\">]</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\"># 根据参数省略规则, 截取索引为 0, 1, 2 的切片, 即 [1, 2, 3]</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">arr2 </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> arr[</span><span style=\"color: #56B6C2\">-</span><span style=\"color: #D19A66\">2</span><span style=\"color: #ABB2BF\">:]</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\"># 根据参数省略规则, 截取索引为 -2, -1 的切片, 即 [4, 5]</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">arr3 </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> arr[:]</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\"># 工具参数省略规则, 截取整个列表作为切片</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\"># 切片的</span></span></code></pre></div><p>最后, 可以通过 <code>len()</code> 函数获取集合元素的长度, 即内部有多少个元素</p>\n<div class=\"language-py\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">py</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #ABB2BF\">arr </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> [</span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">2</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">3</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">4</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">5</span><span style=\"color: #ABB2BF\">]</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #56B6C2\">print</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #56B6C2\">len</span><span style=\"color: #ABB2BF\">(arr)) </span><span style=\"color: #7F848E; font-style: italic\"># 输出 5</span></span></code></pre></div><h2 id=\"字典\"><a href=\"#字典\" class=\"headerlink\" title=\"字典\"></a>字典</h2><p><strong>字典</strong> 是一种无序集合类型, 在其它语言中通常被称为 <strong>哈希表</strong>, 是一种 <strong>键值对应</strong> 的数据结构, 用大括号包裹, 键值之间通过冒号隔开, 下面是一些基本示例</p>\n<div class=\"language-py\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">py</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #7F848E; font-style: italic\"># 创建字典的字面量语法</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">scores </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> {</span><span style=\"color: #98C379\">&#39;A&#39;</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #98C379\">&#39;B&#39;</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #D19A66\">2</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #98C379\">&#39;C&#39;</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #D19A66\">3</span><span style=\"color: #ABB2BF\">}</span></span>\n<span class=\"line\"><span style=\"color: #56B6C2\">print</span><span style=\"color: #ABB2BF\">(scores)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\"># 创建字典的构造器语法</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">items1 </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">dict</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75; font-style: italic\">one</span><span style=\"color: #56B6C2\">=</span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75; font-style: italic\">two</span><span style=\"color: #56B6C2\">=</span><span style=\"color: #D19A66\">2</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75; font-style: italic\">three</span><span style=\"color: #56B6C2\">=</span><span style=\"color: #D19A66\">3</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75; font-style: italic\">four</span><span style=\"color: #56B6C2\">=</span><span style=\"color: #D19A66\">4</span><span style=\"color: #ABB2BF\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\"># 通过 zip 函数将两个序列压成字典</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">items2 </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">dict</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #56B6C2\">zip</span><span style=\"color: #ABB2BF\">([</span><span style=\"color: #98C379\">&#39;a&#39;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #98C379\">&#39;b&#39;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #98C379\">&#39;c&#39;</span><span style=\"color: #ABB2BF\">], </span><span style=\"color: #98C379\">&#39;123&#39;</span><span style=\"color: #ABB2BF\">))</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\"># 创建字典的推导式语法</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">items3 </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> {num: num </span><span style=\"color: #56B6C2\">**</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">2</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">for</span><span style=\"color: #ABB2BF\"> num </span><span style=\"color: #C678DD\">in</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">range</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">10</span><span style=\"color: #ABB2BF\">)}</span></span>\n<span class=\"line\"><span style=\"color: #56B6C2\">print</span><span style=\"color: #ABB2BF\">(items1, items2, items3)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\"># 通过键可以获取字典中对应的值</span></span>\n<span class=\"line\"><span style=\"color: #56B6C2\">print</span><span style=\"color: #ABB2BF\">(scores[</span><span style=\"color: #98C379\">&#39;A&#39;</span><span style=\"color: #ABB2BF\">])</span></span>\n<span class=\"line\"><span style=\"color: #56B6C2\">print</span><span style=\"color: #ABB2BF\">(scores[</span><span style=\"color: #98C379\">&#39;B&#39;</span><span style=\"color: #ABB2BF\">])</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\"># 对字典中所有键值对进行遍历</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">for</span><span style=\"color: #ABB2BF\"> key </span><span style=\"color: #C678DD\">in</span><span style=\"color: #ABB2BF\"> scores:</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #56B6C2\">print</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #C678DD\">f</span><span style=\"color: #98C379\">&#39;</span><span style=\"color: #D19A66\">{</span><span style=\"color: #ABB2BF\">key</span><span style=\"color: #D19A66\">}</span><span style=\"color: #98C379\">: </span><span style=\"color: #D19A66\">{</span><span style=\"color: #ABB2BF\">scores[key]</span><span style=\"color: #D19A66\">}</span><span style=\"color: #98C379\">&#39;</span><span style=\"color: #ABB2BF\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\"># 更新字典中的元素</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">scores[</span><span style=\"color: #98C379\">&#39;A&#39;</span><span style=\"color: #ABB2BF\">] </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">4</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">scores[</span><span style=\"color: #98C379\">&#39;B&#39;</span><span style=\"color: #ABB2BF\">] </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">5</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">scores.</span><span style=\"color: #61AFEF\">update</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75; font-style: italic\">A</span><span style=\"color: #56B6C2\">=</span><span style=\"color: #D19A66\">6</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75; font-style: italic\">B</span><span style=\"color: #56B6C2\">=</span><span style=\"color: #D19A66\">7</span><span style=\"color: #ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"color: #56B6C2\">print</span><span style=\"color: #ABB2BF\">(scores)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\"># 直接通过键获取对应的值</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">if</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #98C379\">&#39;D&#39;</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">in</span><span style=\"color: #ABB2BF\"> scores:</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #56B6C2\">print</span><span style=\"color: #ABB2BF\">(scores[</span><span style=\"color: #98C379\">&#39;D&#39;</span><span style=\"color: #ABB2BF\">])</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\"># 通过 get 获取键对应的值, 且当键不存在时返回 None 而不是报错</span></span>\n<span class=\"line\"><span style=\"color: #56B6C2\">print</span><span style=\"color: #ABB2BF\">(scores.</span><span style=\"color: #61AFEF\">get</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&#39;D&#39;</span><span style=\"color: #ABB2BF\">))</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\"># get 方法当键不存在时可以设置默认值</span></span>\n<span class=\"line\"><span style=\"color: #56B6C2\">print</span><span style=\"color: #ABB2BF\">(scores.</span><span style=\"color: #61AFEF\">get</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&#39;D&#39;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">0</span><span style=\"color: #ABB2BF\">))</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\"># 删除字典中的元素</span></span>\n<span class=\"line\"><span style=\"color: #56B6C2\">print</span><span style=\"color: #ABB2BF\">(scores.</span><span style=\"color: #61AFEF\">popitem</span><span style=\"color: #ABB2BF\">())</span></span>\n<span class=\"line\"><span style=\"color: #56B6C2\">print</span><span style=\"color: #ABB2BF\">(scores.</span><span style=\"color: #61AFEF\">popitem</span><span style=\"color: #ABB2BF\">())</span></span>\n<span class=\"line\"><span style=\"color: #56B6C2\">print</span><span style=\"color: #ABB2BF\">(scores.</span><span style=\"color: #61AFEF\">pop</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&#39;A&#39;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">6</span><span style=\"color: #ABB2BF\">))</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\"># 清空字典</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">scores.</span><span style=\"color: #61AFEF\">clear</span><span style=\"color: #ABB2BF\">()</span></span>\n<span class=\"line\"><span style=\"color: #56B6C2\">print</span><span style=\"color: #ABB2BF\">(scores)</span></span></code></pre></div><h1 id=\"语法结构\"><a href=\"#语法结构\" class=\"headerlink\" title=\"语法结构\"></a>语法结构</h1><p>之前我们所写的代码都是扁平结构的, 接下来我们就要学习 Python 的语法结构了. 不同于 C&#x2F;C++ 等语言靠分号和大括号区分层级结构, Python 采用空格缩进来区分层级结构, 如果不理解, 看下面的例子即可</p>\n<h2 id=\"条件分支结构\"><a href=\"#条件分支结构\" class=\"headerlink\" title=\"条件分支结构\"></a>条件分支结构</h2><p>类似于数学中的分段函数, Python也可以根据不同的条件执行不同的语句, Python 有两种条件分支结构</p>\n<h3 id=\"If-Else-语句\"><a href=\"#If-Else-语句\" class=\"headerlink\" title=\"If-Else 语句\"></a>If-Else 语句</h3><p>通过 <code>if</code> - <code>else</code> 关键字组合, <code>if</code> 后接一个布尔表达式, 通常直接为布尔类型或者由比较运算符参与构成, 如果表达式为真, 则执行 <code>if</code> 之下的内容, 如果表达式为假, 则执行 <code>else</code> 之下的内容. 这非常符合自然语言的直觉, “如果 … 为真, 那么 …, 否则 …”</p>\n<p>例如判断一个数是否是偶数</p>\n<div class=\"language-py\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">py</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #ABB2BF\">a </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">4</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">if</span><span style=\"color: #ABB2BF\"> a </span><span style=\"color: #56B6C2\">%</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">2</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">==</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">0</span><span style=\"color: #ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #56B6C2\">print</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;a 是偶数&quot;</span><span style=\"color: #ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">else</span><span style=\"color: #ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #56B6C2\">print</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;a 是奇数&quot;</span><span style=\"color: #ABB2BF\">)</span></span></code></pre></div><p>有的时候分支不止两条, 这时我们可以连用 <code>else if</code> 关键字, 后接一个布尔表达式, 意味”又如果 … 为真, 那么 …”, 但是这样略有冗长, 且容易让层级显得参差不齐, 所以我们可以把这两个单词合并成 <code>elif</code>, 比如下面的例子</p>\n<div class=\"language-py\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">py</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #ABB2BF\">score </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">98</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">if</span><span style=\"color: #ABB2BF\"> score </span><span style=\"color: #56B6C2\">&gt;</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">90</span><span style=\"color: #ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #56B6C2\">print</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;优秀!&quot;</span><span style=\"color: #ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">elif</span><span style=\"color: #ABB2BF\"> score </span><span style=\"color: #56B6C2\">&gt;</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">80</span><span style=\"color: #ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #56B6C2\">print</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;良好&quot;</span><span style=\"color: #ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">elif</span><span style=\"color: #ABB2BF\"> score </span><span style=\"color: #56B6C2\">&gt;</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">60</span><span style=\"color: #ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #56B6C2\">print</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;及格&quot;</span><span style=\"color: #ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">else</span><span style=\"color: #ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #56B6C2\">print</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;不及格...&quot;</span><span style=\"color: #ABB2BF\">)</span></span></code></pre></div><h3 id=\"Match-Case-语句\"><a href=\"#Match-Case-语句\" class=\"headerlink\" title=\"Match-Case 语句\"></a>Match-Case 语句</h3><p>对于上面的最后一个例子, 如果分支条件是一些离散变量, 比如字符串, 或者一组固定的数字类型, 或是布尔变量, <code>if</code>-<code>else</code> 语句虽然也可以很好的解决, 但略显冗长. 好在在 Python 3.10 之后引入了一种类似于 Rust 语言中的模式匹配结构: <code>match</code>-<code>case</code> 语句, 下面来简单的看一个例子</p>\n<div class=\"language-py\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">py</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #ABB2BF\">gender </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #98C379\">&quot;男&quot;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">match</span><span style=\"color: #ABB2BF\"> gender:</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">case</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #98C379\">&quot;男&quot;</span><span style=\"color: #ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #56B6C2\">print</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;是男孩子&quot;</span><span style=\"color: #ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">case</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #98C379\">&quot;女&quot;</span><span style=\"color: #ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #56B6C2\">print</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;是女孩子&quot;</span><span style=\"color: #ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">case</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #98C379\">&quot;保密&quot;</span><span style=\"color: #ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #56B6C2\">print</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;性别保密哦&quot;</span><span style=\"color: #ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">case</span><span style=\"color: #ABB2BF\"> _: </span><span style=\"color: #7F848E; font-style: italic\"># 通过一个通配符来匹配其他剩下的所有情况, 当然也可以省略, 不像 Rust 那样严格要求穷尽式匹配</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #56B6C2\">print</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;也许是武装直升机)&quot;</span><span style=\"color: #ABB2BF\">)</span></span></code></pre></div><p>通过这个简单的例子, 就应该能体会到, 离散的分支条件越多, 这种方法的优势就越大</p>\n<p>可以通过在 <code>case</code> 分支后面添加一个 <code>if</code> 语句增加额外的判断, 例如</p>\n<div class=\"language-py\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">py</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #ABB2BF\">gender </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #98C379\">&quot;女&quot;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">age </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">18</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">match</span><span style=\"color: #ABB2BF\"> gender:</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">case</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #98C379\">&quot;女&quot;</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">if</span><span style=\"color: #ABB2BF\"> age </span><span style=\"color: #56B6C2\">&lt;</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">20</span><span style=\"color: #ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #56B6C2\">print</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;是青春少女&quot;</span><span style=\"color: #ABB2BF\">)</span></span></code></pre></div><p><code>case</code> 关键字还可以捕获变量</p>\n<div class=\"language-py\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">py</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #ABB2BF\">greeting </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #98C379\">&quot;Job&quot;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">match</span><span style=\"color: #ABB2BF\"> greeting:</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">case</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #98C379\">&quot;&quot;</span><span style=\"color: #ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #56B6C2\">print</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;Hello!&quot;</span><span style=\"color: #ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">case</span><span style=\"color: #ABB2BF\"> name: </span><span style=\"color: #7F848E; font-style: italic\"># 这里新建了一个 name 变量用于捕获 greeting 这个变量</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #56B6C2\">print</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #C678DD\">f</span><span style=\"color: #98C379\">&quot;Hello, </span><span style=\"color: #D19A66\">{</span><span style=\"color: #ABB2BF\">name</span><span style=\"color: #D19A66\">}</span><span style=\"color: #98C379\">!&quot;</span><span style=\"color: #ABB2BF\">)</span></span></code></pre></div><p>这样的 <code>if</code> 条件被称为 <strong>卫语句</strong>, 字面意思, 保卫条件分支的语句</p>\n<p><code>match</code>-<code>case</code> 语句的其他功能这里就不再赘述, 感兴趣可以自行搜索</p>\n<h2 id=\"循环结构\"><a href=\"#循环结构\" class=\"headerlink\" title=\"循环结构\"></a>循环结构</h2><p>类似于数学中的迭代, 当需要重复某件事若干次时, 就需要用到循环结构了, 循环结构同样有两种</p>\n<h3 id=\"While-循环\"><a href=\"#While-循环\" class=\"headerlink\" title=\"While 循环\"></a>While 循环</h3><p><code>while</code> 是最简单的一种循环, 通过后接一个布尔表达式, 很容易从字面上理解其含义, “当 … 为真时, 就 …”</p>\n<p>当然我们很少需要一个无法打破的无限循环, 因此需要在循环体内部加上一些可以帮助跳出循环的条件</p>\n<div class=\"language-py\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">py</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #ABB2BF\">a </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">0</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">while</span><span style=\"color: #ABB2BF\"> a </span><span style=\"color: #56B6C2\">&lt;</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">10</span><span style=\"color: #ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #56B6C2\">print</span><span style=\"color: #ABB2BF\">(a)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    a</span><span style=\"color: #56B6C2\">+=</span><span style=\"color: #D19A66\">1</span></span></code></pre></div><p>如此一来, 每次循环结束前, 循环条件 <code>a</code> 都会加一, 当 <code>a</code> 等于 <code>10</code> 时, 循环条件不再满足, 循环结束, 继续向下运行其他代码, 那么这段时间里将会打印 <code>0</code> 到 <code>9</code> 这些数字</p>\n<p>当然我们也可以通过一些特殊手段提前跳出循环, 比如 <code>break</code> 关键字, 字面意思, 打破循环</p>\n<div class=\"language-py\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">py</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #ABB2BF\">a </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">0</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">while</span><span style=\"color: #ABB2BF\"> a </span><span style=\"color: #56B6C2\">&lt;</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">10</span><span style=\"color: #ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">if</span><span style=\"color: #ABB2BF\"> a </span><span style=\"color: #56B6C2\">==</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">3</span><span style=\"color: #ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #C678DD\">break</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #56B6C2\">print</span><span style=\"color: #ABB2BF\">(a)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    a</span><span style=\"color: #56B6C2\">+=</span><span style=\"color: #D19A66\">1</span></span></code></pre></div><p>如此一来, 当 <code>a</code> 增加到 <code>3</code> 时, 就会触发 <code>if</code> 语句内部的 <code>break</code>, 提前结束循环, 只会打印 <code>0</code>, <code>1</code>, <code>2</code> 三个数字</p>\n<p>除此之外, 还有 <code>continue</code> 关键字, 字面意思, 继续循环, 但是不包括关键字下面的部分了, 即一旦遇到这个关键字, 立刻开始新一轮循环</p>\n<div class=\"language-py\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">py</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #ABB2BF\">a </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">0</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">while</span><span style=\"color: #ABB2BF\"> a </span><span style=\"color: #56B6C2\">&lt;</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">10</span><span style=\"color: #ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">if</span><span style=\"color: #ABB2BF\"> a </span><span style=\"color: #56B6C2\">==</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">3</span><span style=\"color: #ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        a</span><span style=\"color: #56B6C2\">+=</span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #7F848E; font-style: italic\"># 注意给循环条件加一, 以免无限循环</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #C678DD\">continue</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #56B6C2\">print</span><span style=\"color: #ABB2BF\">(a)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    a</span><span style=\"color: #56B6C2\">+=</span><span style=\"color: #D19A66\">1</span></span></code></pre></div><p>如此一来就会打印 <code>0</code> 到 <code>9</code> 里除了 <code>3</code> 的数字</p>\n<p>值得注意的一点是, 当有 <strong>多重嵌套</strong> 循环时, <code>break</code> 和 <code>continue</code> 都只影响它们外面紧挨着的那一层循环</p>\n<h3 id=\"For-In-迭代器\"><a href=\"#For-In-迭代器\" class=\"headerlink\" title=\"For-In 迭代器\"></a>For-In 迭代器</h3><p>对于遍历一个集合元素, 使用 <code>while</code> 循环当然也能做到, 但是需要我们提前知道集合元素的长度并小心的设定循环条件, 很不方便. 这时就需要专门遍历集合以及范围的 <code>for</code>-<code>in</code> 循环了, 形如 <code>for item in range</code>, 意思是 “从 range 里面取出一个 item 并 …” 并一直循环取遍每一个 <code>item</code>, 并且这个 <code>item</code> 是一个临时变量, 可以在循环体中使用</p>\n<div class=\"language-py\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">py</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #ABB2BF\">cities </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> [</span><span style=\"color: #98C379\">&quot;北京&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #98C379\">&quot;天津&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #98C379\">&quot;上海&quot;</span><span style=\"color: #ABB2BF\">]</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">for</span><span style=\"color: #ABB2BF\"> city </span><span style=\"color: #C678DD\">in</span><span style=\"color: #ABB2BF\"> cities:</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #56B6C2\">print</span><span style=\"color: #ABB2BF\">(city)</span></span></code></pre></div><p>上面我们说到 <code>for</code> 循环还可以遍历一个范围, Python 中提供了一个非常灵活的函数用于生成整数范围: <code>range()</code>, 使用方法形如 <code>range(start, end, step)</code>, 非常类似于切片的用法</p>\n<ul>\n<li>start: 范围的起始, 且包括在范围中</li>\n<li>end: 范围的终止, 但不包括在范围中</li>\n<li>step: 步长, 从起始开始数值递增的值, 默认为 1</li>\n<li>若 start &lt; end, 则表示一个 <strong>倒序</strong> 范围</li>\n</ul>\n<p>下面举几个简单的例子</p>\n<ul>\n<li><code>range(10)</code>: 生成 <code>0</code> - <code>10</code> 但不包括 <code>10</code> 的整数范围, 即 <code>0</code> 到 <code>9</code> 十个数字</li>\n<li><code>range(1, 10)</code>: 生成 <code>1</code> - <code>10</code> 但不包括 <code>10</code> 的整数范围</li>\n<li><code>range(1, 10, 2)</code>: 生成 <code>1</code> - <code>10</code> 但不包括 <code>10</code> 的奇数范围</li>\n<li><code>range(10, 0, -2)</code>: 生成 <code>10</code> - <code>0</code> 但不包括 <code>0</code> 的偶数范围</li>\n</ul>\n<p>下面是与 <code>for</code> 循环结合的示例</p>\n<div class=\"language-py\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">py</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #7F848E; font-style: italic\"># 一个简单的 0 到 100 的求和</span></span>\n<span class=\"line\"><span style=\"color: #56B6C2\">sum</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">0</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">for</span><span style=\"color: #ABB2BF\"> i </span><span style=\"color: #C678DD\">in</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">range</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #D19A66\">101</span><span style=\"color: #ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #56B6C2\">sum+=</span><span style=\"color: #D19A66\">1</span></span>\n<span class=\"line\"><span style=\"color: #56B6C2\">print</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #56B6C2\">sum</span><span style=\"color: #ABB2BF\">)</span></span></code></pre></div><h1 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h1><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>“代码有很多种坏味道, 重复是最坏的一种!” — Martin Fowler</p></blockquote>\n<p>数学中, 如果我们有需要反复往一个冗长的表达式中代入不同的值并计算, 为了让卷面清爽一些, 我们通常会将这个冗长的表达式包装成一个 <strong>函数</strong>, 在编程中当然也可以这样做</p>\n<p>如果有一组相似且机械的行为, 那我们就可以将其抽象成函数以供调用, 比如阶乘的计算, 即使用循环来写这仍然是一个冗长的过程, 我们就可以定义一个函数, 输入数字, 就返回它的阶乘</p>\n<p>在 Python 中, 我们通过 <code>def</code> 关键字来定义函数, 后面跟上函数的名字, 在后面跟上一个小括号, 里面可选的可以加入若干的函数内部所需的参数, 由于此时参数并没有确切的值, 只是起到参与运算的形式作用, 因此称之为 <strong>形参</strong>, 多个形参之间可以用逗号隔开</p>\n<p>在函数内部的某个部分, 可选的可以使用 <code>return</code> 关键字返回一个变量作为函数的结果, 如果需要返回多个变量, 可以以元组或列表的形式返回</p>\n<p>类似于 <code>break</code> 和 <code>continue</code> 关键字, 此时函数会立即停止执行</p>\n<p>如果不显式写明的话, 则会默认返回函数最下面的一个变量</p>\n<div class=\"language-py\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">py</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">def</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">fac</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #D19A66; font-style: italic\">num</span><span style=\"color: #ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    result </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">1</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">for</span><span style=\"color: #ABB2BF\"> n </span><span style=\"color: #C678DD\">in</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">range</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\">, num </span><span style=\"color: #56B6C2\">+</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        result </span><span style=\"color: #56B6C2\">*=</span><span style=\"color: #ABB2BF\"> n</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">return</span><span style=\"color: #ABB2BF\"> result</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\"># 这样比如我们计算组合数时就不需要反复计算阶乘了</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">m </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">5</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">n </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">3</span></span>\n<span class=\"line\"><span style=\"color: #56B6C2\">print</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #61AFEF\">fac</span><span style=\"color: #ABB2BF\">(m) </span><span style=\"color: #56B6C2\">//</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">fac</span><span style=\"color: #ABB2BF\">(n) </span><span style=\"color: #56B6C2\">//</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">fac</span><span style=\"color: #ABB2BF\">(m </span><span style=\"color: #56B6C2\">-</span><span style=\"color: #ABB2BF\"> n))</span></span></code></pre></div><p>与其它语言不同的是, <strong>Python 的函数参数可以有默认值</strong>, 使用起来就像变量赋值一样简单</p>\n<div class=\"language-py\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">py</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">def</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">func</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #D19A66; font-style: italic\">n</span><span style=\"color: #ABB2BF\">=</span><span style=\"color: #D19A66\">2</span><span style=\"color: #ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #56B6C2\">print</span><span style=\"color: #ABB2BF\">(n)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #61AFEF\">func</span><span style=\"color: #ABB2BF\">() </span><span style=\"color: #7F848E; font-style: italic\"># 输出 2</span></span>\n<span class=\"line\"><span style=\"color: #61AFEF\">func</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #D19A66\">3</span><span style=\"color: #ABB2BF\">) </span><span style=\"color: #7F848E; font-style: italic\"># 输出 3</span></span></code></pre></div><p><strong>Python 的函数还支持可变参数</strong>, 只需要在参数前面加上一个 <code>*</code>, 这表示可以传入 0 到任意个参数</p>\n<div class=\"language-py\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">py</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">def</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">sum</span><span style=\"color: #ABB2BF\">(*</span><span style=\"color: #D19A66; font-style: italic\">args</span><span style=\"color: #ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    total </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">0</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">for</span><span style=\"color: #ABB2BF\"> val </span><span style=\"color: #C678DD\">in</span><span style=\"color: #ABB2BF\"> args:</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        total </span><span style=\"color: #56B6C2\">+=</span><span style=\"color: #ABB2BF\"> val</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">return</span><span style=\"color: #ABB2BF\"> total</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #56B6C2\">print</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #56B6C2\">sum</span><span style=\"color: #ABB2BF\">()) </span><span style=\"color: #7F848E; font-style: italic\"># 输出 0</span></span>\n<span class=\"line\"><span style=\"color: #56B6C2\">print</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #56B6C2\">sum</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\">)) </span><span style=\"color: #7F848E; font-style: italic\"># 输出 1</span></span>\n<span class=\"line\"><span style=\"color: #56B6C2\">print</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #56B6C2\">sum</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">2</span><span style=\"color: #ABB2BF\">)) </span><span style=\"color: #7F848E; font-style: italic\"># 输出 3</span></span></code></pre></div><h1 id=\"类\"><a href=\"#类\" class=\"headerlink\" title=\"类\"></a>类</h1><p>类似于其他语言中的 <strong>结构体</strong>, <strong>类 (Class)</strong> 是一种自定义的复合数据类型, 类成员可以包含任何类型的值</p>\n<p>可以通过 <code>class</code> 关键字定义一个类, 并为其实现一些类方法</p>\n<div class=\"language-py\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">py</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">class</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Rectangle</span><span style=\"color: #ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    class_value </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">0</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\"># 下面几个是名字内定但须要手动实现的特殊方法</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\"># 构造方法, 用于初始化一个类, 在创建对象的时候自动调用</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\"># 用于创建一个矩形</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">def</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">__init__</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E5C07B; font-style: italic\">self</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66; font-style: italic\">length</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66; font-style: italic\">width</span><span style=\"color: #ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #E5C07B\">self</span><span style=\"color: #ABB2BF\">.length </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> length</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #E5C07B\">self</span><span style=\"color: #ABB2BF\">.width </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> width</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\"># 用于返回对象的字符串表示, 通常用于 print 函数打印输出时</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">def</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">__str__</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E5C07B; font-style: italic\">self</span><span style=\"color: #ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #C678DD\">return</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">f</span><span style=\"color: #98C379\">&quot;Rectangle&#39;s size is </span><span style=\"color: #D19A66\">{</span><span style=\"color: #E5C07B\">self</span><span style=\"color: #ABB2BF\">.length</span><span style=\"color: #D19A66\">}</span><span style=\"color: #98C379\"> * </span><span style=\"color: #D19A66\">{</span><span style=\"color: #E5C07B\">self</span><span style=\"color: #ABB2BF\">.width</span><span style=\"color: #D19A66\">}</span><span style=\"color: #98C379\">&quot;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\"># 用于返回对象的调试表示, 通常在控制台输出时调用</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #56B6C2\">__repr__</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">__str__</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\"># 下面几个是自定义方法</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\"># 普通方法, 也叫实例方法, 第一个参数都是 self, 代表对象本身</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\"># 用于计算矩形面积</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">def</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">area</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E5C07B; font-style: italic\">self</span><span style=\"color: #ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #C678DD\">return</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">self</span><span style=\"color: #ABB2BF\">.length </span><span style=\"color: #56B6C2\">*</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">self</span><span style=\"color: #ABB2BF\">.width</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\"># 类方法是绑定到类而不是实例的方法</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\"># 可以让类有更多的构造方法, 而无需修改 __init__</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\"># 使用装饰器 @classmethod 来定义类方法</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\"># 创建一个矩形</span></span>\n<span class=\"line\"><span style=\"color: #61AFEF\">    @</span><span style=\"color: #56B6C2\">classmethod</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">def</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">build_rec</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E5C07B; font-style: italic\">cls</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66; font-style: italic\">length</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66; font-style: italic\">width</span><span style=\"color: #ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #C678DD\">return</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">cls</span><span style=\"color: #ABB2BF\">(length, width)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\"># 静态方法不需要访问类或实例的属性</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\"># 当一个函数和类本身无关, 但只被该类使用, 为了让代码结构更加有序, 可以将该函数移动到类的定义之下成为一个静态方法, 可以理解为一个纯粹的工具函数</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\"># 使用装饰器 @staticmethod 来定义静态方法</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\"># 仅仅是计算一下加法, 与类本身无关</span></span>\n<span class=\"line\"><span style=\"color: #61AFEF\">    @</span><span style=\"color: #56B6C2\">staticmethod</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">def</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">just_add</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #D19A66; font-style: italic\">a</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66; font-style: italic\">b</span><span style=\"color: #ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #C678DD\">return</span><span style=\"color: #ABB2BF\"> a </span><span style=\"color: #56B6C2\">+</span><span style=\"color: #ABB2BF\"> b</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">rec </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">Rectangle</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #D19A66\">10</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">20</span><span style=\"color: #ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"color: #56B6C2\">print</span><span style=\"color: #ABB2BF\">(rec) </span><span style=\"color: #7F848E; font-style: italic\"># 输出 &quot;Rectangle&#39;s size is 10 * 20&quot;</span></span>\n<span class=\"line\"><span style=\"color: #56B6C2\">print</span><span style=\"color: #ABB2BF\">(rec.</span><span style=\"color: #61AFEF\">area</span><span style=\"color: #ABB2BF\">()) </span><span style=\"color: #7F848E; font-style: italic\"># 输出 200</span></span>\n<span class=\"line\"><span style=\"color: #56B6C2\">print</span><span style=\"color: #ABB2BF\">(Rectangle.</span><span style=\"color: #61AFEF\">build_rec</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #D19A66\">10</span><span style=\"color: #ABB2BF\">,</span><span style=\"color: #D19A66\">10</span><span style=\"color: #ABB2BF\">))</span></span>\n<span class=\"line\"><span style=\"color: #56B6C2\">print</span><span style=\"color: #ABB2BF\">(Rectangle.</span><span style=\"color: #61AFEF\">just_add</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\">,</span><span style=\"color: #D19A66\">2</span><span style=\"color: #ABB2BF\">))</span></span></code></pre></div><h1 id=\"模块\"><a href=\"#模块\" class=\"headerlink\" title=\"模块\"></a>模块</h1><p>将所有代码都放在同一个文件中是不现实的, 这个时候就需要把代码按一定组织分散到不同文件中, 通过 <code>from</code>-<code>import</code> 关键字, 我们就可以使用这些定义在其他文件的 Python 代码</p>\n<div class=\"language-py\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">py</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">###############</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\"># a.py</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">###############</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">def</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">func</span><span style=\"color: #ABB2BF\">(){</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #56B6C2\">print</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;Hello from a.py&quot;</span><span style=\"color: #ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">###############</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\"># b.py</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">###############</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">import</span><span style=\"color: #ABB2BF\"> a </span><span style=\"color: #7F848E; font-style: italic\"># 只导入模块</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">a.</span><span style=\"color: #61AFEF\">func</span><span style=\"color: #ABB2BF\">()</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\"># 或者</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">import</span><span style=\"color: #ABB2BF\"> a </span><span style=\"color: #C678DD\">as</span><span style=\"color: #ABB2BF\"> my_module </span><span style=\"color: #7F848E; font-style: italic\"># 导入并重命名模块</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">my_module.</span><span style=\"color: #61AFEF\">func</span><span style=\"color: #ABB2BF\">()</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\"># 或者</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">from</span><span style=\"color: #ABB2BF\"> a </span><span style=\"color: #C678DD\">import</span><span style=\"color: #ABB2BF\"> func </span><span style=\"color: #7F848E; font-style: italic\"># 只导入模块某一方法</span></span>\n<span class=\"line\"><span style=\"color: #61AFEF\">func</span><span style=\"color: #ABB2BF\">()</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\"># 或者</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">from</span><span style=\"color: #ABB2BF\"> a </span><span style=\"color: #C678DD\">import</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">*</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #7F848E; font-style: italic\"># 代表导入 a.py 中的所有代码</span></span>\n<span class=\"line\"><span style=\"color: #61AFEF\">func</span><span style=\"color: #ABB2BF\">()</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\"># 运行 b.py 后, 以上几种方式都将打印 &quot;Hello from a.py&quot;</span></span></code></pre></div><p>很多时候, 我们的模块内部不仅仅有函数, 还有其他可以被直接运行的代码, 那么如果我们在某一文件导入了这个模块并运行该文件, Python 解释器就会执行这些代码, 可是有的时候我们并不希望如此, 我们只希望当该模块被直接执行时才运行这部分代码, 这种时候就可以利用 <strong>私有的实例属性</strong>, 还记得吗, 我们在 <a href=\"#%E5%8F%98%E9%87%8F\">变量</a> 的部分提到过</p>\n<div class=\"language-py\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">py</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">###############</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\"># nothing.py</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">###############</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">def</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">foo</span><span style=\"color: #ABB2BF\">():</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">pass</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\"># __name__是Python中一个隐含的变量它代表了模块的名字</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\"># 只有被Python解释器直接执行的模块的名字才是__main__</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">if</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">__name__</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">==</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #98C379\">&#39;__main__&#39;</span><span style=\"color: #ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #56B6C2\">print</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&#39;call foo()&#39;</span><span style=\"color: #ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">foo</span><span style=\"color: #ABB2BF\">()</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">###############</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\"># test.py</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">###############</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">import</span><span style=\"color: #ABB2BF\"> nothing</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\"># 导入模块时 不会执行模块中 `if` 条件成立时的代码 因为模块的名字是 `nothing` 而不是 `__main__`</span></span></code></pre></div>","feature":true,"text":"非官方的 Python 极简教程, 主要面向学校计算机课需要用到 Python 或者有专门的 Python 课程且毫无基础的小朋友们, 通过一篇文章, 从安装开始讲解 Python 最基本的知识...","permalink":"/post/2024-03-06","photos":[],"count_time":{"symbolsCount":"15k","symbolsTime":"13 mins."},"categories":[{"name":"Course","slug":"Course","count":11,"path":"api/categories/Course.json"}],"tags":[{"name":"Python","slug":"Python","count":1,"path":"api/tags/Python.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Python-%E6%9E%81%E7%AE%80%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">Python 极简介绍</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE-%E4%BB%A5-Windows-%E4%B8%BA%E4%BE%8B\"><span class=\"toc-text\">环境配置 (以 Windows 为例)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Python-%E5%AE%89%E8%A3%85\"><span class=\"toc-text\">Python 安装</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BC%96%E8%BE%91%E5%99%A8%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">编辑器安装配置</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BC%96%E8%BE%91%E5%99%A8%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">编辑器基本使用</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%86%9F%E6%82%89-Python-%E4%B8%96%E7%95%8C%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%B7%A5%E5%85%B7\"><span class=\"toc-text\">熟悉 Python 世界的基本工具</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B3%A8%E9%87%8A\"><span class=\"toc-text\">注释</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Print-%E6%8E%A7%E5%88%B6%E5%8F%B0%E8%BE%93%E5%87%BA\"><span class=\"toc-text\">Print 控制台输出</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%8F%98%E9%87%8F%E4%B8%8E%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">变量与基本数据类型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">变量</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">基本数据类型</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%89%93%E5%8D%B0%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">打印数据类型</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%A0%BC%E5%BC%8F%E5%8C%96%E8%BE%93%E5%87%BA\"><span class=\"toc-text\">格式化输出</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">运算符</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E9%9B%86%E5%90%88%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">集合类型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9C%89%E5%BA%8F%E9%9B%86%E5%90%88\"><span class=\"toc-text\">有序集合</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AD%97%E5%85%B8\"><span class=\"toc-text\">字典</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%AF%AD%E6%B3%95%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">语法结构</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9D%A1%E4%BB%B6%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">条件分支结构</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#If-Else-%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">If-Else 语句</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Match-Case-%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">Match-Case 语句</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">循环结构</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#While-%E5%BE%AA%E7%8E%AF\"><span class=\"toc-text\">While 循环</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#For-In-%E8%BF%AD%E4%BB%A3%E5%99%A8\"><span class=\"toc-text\">For-In 迭代器</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">函数</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%B1%BB\"><span class=\"toc-text\">类</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E5%9D%97\"><span class=\"toc-text\">模块</span></a></li></ol>","author":{"name":"芳塔洛斯","slug":"blog-author","avatar":"https://fontlos.com/icons/avatar.jpg","link":"/","description":"来人间一趟, 为散步一场<br />待走出岁月, 何样的彼方<br />才配得上这一路的颠沛与时光","socials":{"github":"https://github.com/fontlos","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"https://fontlos.com/icons/bilibili.svg","link":"https://space.bilibili.com/362772872"}}}},"mapped":true,"hidden":false,"prev_post":{},"next_post":{"title":"Neovim 基本配置","uid":"46bce36be5583ac102dad5fd1ec30a3e","slug":"2022-01-18","date":"2022-01-17T16:02:09.000Z","updated":"2024-03-06T02:36:48.103Z","comments":true,"path":"api/articles/2022-01-18.json","keywords":"Programming, Web, Frontend, Backend ,Rust, Blog, Aurora, Fontlos, 芳塔洛斯","cover":"https://fontlos.com/icons/logo.png","text":"介绍Neovim 是 Vim 的重构版本, 是 Vim 在这个时代的重生, 其完美继承了 Vim 的操作方式, 集成了 Lua 引擎, 能够使用 Lua 以及各...","permalink":"/post/2022-01-18","photos":[],"count_time":{"symbolsCount":"51k","symbolsTime":"47 mins."},"categories":[{"name":"Share","slug":"Share","count":2,"path":"api/categories/Share.json"}],"tags":[{"name":"Neovim","slug":"Neovim","count":1,"path":"api/tags/Neovim.json"},{"name":"Lua","slug":"Lua","count":1,"path":"api/tags/Lua.json"}],"author":{"name":"芳塔洛斯","slug":"blog-author","avatar":"https://fontlos.com/icons/avatar.jpg","link":"/","description":"来人间一趟, 为散步一场<br />待走出岁月, 何样的彼方<br />才配得上这一路的颠沛与时光","socials":{"github":"https://github.com/fontlos","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"https://fontlos.com/icons/bilibili.svg","link":"https://space.bilibili.com/362772872"}}}},"feature":true}}