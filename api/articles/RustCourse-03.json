{"title":"初识 Rust(3) | 变量, 常量, 语句和表达式, 原生类型","uid":"4982b3ac55a9e6b7056efc0b28169dff","slug":"RustCourse-03","date":"2021-06-08T04:10:27.000Z","updated":"2024-03-06T02:36:48.107Z","comments":true,"path":"api/articles/RustCourse-03.json","keywords":"Programming, Web, Frontend, Backend ,Rust, Blog, Aurora, Fontlos, 芳塔洛斯","cover":"https://fontlos.com/cover/ferris.png","content":"<h1 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h1><h2 id=\"变量绑定\"><a href=\"#变量绑定\" class=\"headerlink\" title=\"变量绑定\"></a>变量绑定</h2><p>在多数语言中, 我们可能会用类似 <code>var a = 1</code> 的语句将<code>Value</code> <strong>赋值 (assignment)</strong> 给 <code>Variable</code></p>\n<p>而在 Rust 中我们使用 <code>let</code> 关键字将 <code>Value</code> <strong>绑定 (Bind)</strong> 到 <code>Variable</code></p>\n<p>为什么要引入一个新的名字呢? 这里就涉及 Rust 为了实现内存安全首创的最核心的语言机制 — <strong>所有权</strong></p>\n<p>简单来讲, 任何 <strong>Memory Object (内存对象)</strong> 都有一个 <strong>Owner (主人)</strong>, 而且一般情况下一个内存对象有且完全属于一个主人, 绑定这个过程就是把这个内存对象绑定给一个变量</p>\n<p>既然是绑定, 那么就可以很容易的想到, 内存对象是可以被迫离开原来的主人被绑定到一个新的变量的, 而且根据字面意思, 该内存对象之前的主人就会丧失对其的所有权, 比起赋值, 用绑定来描述这个过程更加形象, 不是吗?</p>\n<p>至于所有权这个概念, 让我们在以后的部分加以解释, 现在让我们先来看几个例子:</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">main</span><span style=\"color: #ABB2BF\">() {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">a</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">5</span><span style=\"color: #ABB2BF\">;</span><span style=\"color: #7F848E; font-style: italic\"> // 类型推断</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">b</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E5C07B\">i32</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">10</span><span style=\"color: #ABB2BF\">;</span><span style=\"color: #7F848E; font-style: italic\"> // 显式声明</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">c</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">10</span><span style=\"color: #E5C07B\">i32</span><span style=\"color: #ABB2BF\">;</span><span style=\"color: #7F848E; font-style: italic\"> // 另一种显式声明, num + type</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">d</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">c</span><span style=\"color: #ABB2BF\">;</span><span style=\"color: #7F848E; font-style: italic\"> // 整数类型默认实现了 Copy trait, 所以下面变量 c 仍可使用</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">    //a = 10;   //报错, 变量默认不可更改</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">    // 编译器会对未使用的变量绑定产生警告；可以给变量名加上下划线前缀来消除警告。</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">_unused</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">3</span><span style=\"color: #E5C07B\">u32</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span></code></pre></div><p>Rust 通过静态类型确保类型安全. 变量绑定可以在声明时注明类型, 不过在多数情况下, 编译器能够从上下文推导出变量的类型, 从而大大减少了类型注释的工作</p>\n<h2 id=\"变量解构\"><a href=\"#变量解构\" class=\"headerlink\" title=\"变量解构\"></a>变量解构</h2><p><code>let</code> 不只是用于声明变量, 绑定变量. 实际上 <code>let</code> 是一种 <strong>匹配模式 (Match Pattern)</strong>, 拥有十分强大的功能</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">main</span><span style=\"color: #ABB2BF\">() {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> (</span><span style=\"color: #E06C75\">a</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #C678DD\">mut</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">b</span><span style=\"color: #ABB2BF\">): (</span><span style=\"color: #E5C07B\">bool</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E5C07B\">bool</span><span style=\"color: #ABB2BF\">) </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> (</span><span style=\"color: #D19A66\">true</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">false</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;a = {}, b = {}&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">a</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">b</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">    // 解构赋值机制</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> (</span><span style=\"color: #E06C75\">a</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">b</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">    // _ 代表匹配一个值, 但是我们不关心且不需要这个值, 因此没有使用一个变量名而是使用了 _ 表示丢弃</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    (</span><span style=\"color: #E06C75\">a</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">b</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">_</span><span style=\"color: #ABB2BF\">) </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> (</span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">2</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">3</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;a = {}, b = {}&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">a</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">b</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span></code></pre></div><h2 id=\"变量遮蔽-shadowing\"><a href=\"#变量遮蔽-shadowing\" class=\"headerlink\" title=\"变量遮蔽 (shadowing)\"></a>变量遮蔽 (shadowing)</h2><p>其实在上面的例子我们就能看到, 连续声明了两次同名的变量. 很明显, Rust 允许声明同名变量, 这一过程称为 <strong>遮蔽 (shadowing)</strong>, 在后面声明的变量会遮蔽掉前面声明的</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">main</span><span style=\"color: #ABB2BF\">() {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">a</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">    // 在main函数的作用域内对之前的变量进行遮蔽</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">a</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">a</span><span style=\"color: #ABB2BF\"> + </span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    {</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">        // 在当前的花括号作用域内, 对之前的变量进行遮蔽, 不影响外部作用域</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">a</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">a</span><span style=\"color: #ABB2BF\"> * </span><span style=\"color: #D19A66\">2</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;The value of a in the inner scope is: {}&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">a</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;The value of a is: {}&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">a</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span></code></pre></div><p>这将会输出</p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #abb2bf\">The value of a in the inner scope is: 4</span></span>\n<span class=\"line\"><span style=\"color: #abb2bf\">The value of x is: 2</span></span></code></pre></div><p>但这并不代表我们改变了变量, 而是产生并绑定了一个新的变量, 涉及新的内存分配</p>\n<p>变量遮蔽往往能节省变量名的使用, 让语义更加清晰</p>\n<p>比如当我们接收了一段空格但只关心空格的数量</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// 字符串类型</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">spaces</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #98C379\">&quot;   &quot;</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// usize数值类型</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// 这样可以节省一个类似于 spaces_len 的变量名</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">spaces</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">spaces</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">len</span><span style=\"color: #ABB2BF\">();</span></span></code></pre></div><h2 id=\"默认不可变与可变变量\"><a href=\"#默认不可变与可变变量\" class=\"headerlink\" title=\"默认不可变与可变变量\"></a>默认不可变与可变变量</h2><p>从上面的例子中可以看到 Rust 中的变量默认居然是不可变的, 这似乎有违常识和字面意思</p>\n<p>但其实, 默认不可变的变量能带来很多好处, 首先方便了编译器的类型推断, 然后让逻辑更加清晰, 能一眼看出哪些变量会在接下来发生变化</p>\n<p>对于某些情景, 可以避免一些 Bug, 比如一个被多次使用的变量, 我们本希望它不改变, 但却不小心在某一处代码改变了它</p>\n<p>实际上我们日常的代码中, 真正发生了改变的变量并不是特别多, 很多时候我们真的也需要一个 “不可变的变量”, 默认不可变就更加方便编译器进行检查, 既提高了效率, 也提高了内存安全性</p>\n<p>在变量名前加上 <code>mut</code> 关键字, 即可让变量变为可变变量, 简单且灵活</p>\n<p>通过显示声明可变变量, 能够强制让我们在写代码时思考这个变量是否真的需要可变</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">main</span><span style=\"color: #ABB2BF\">() {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">mut</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">a</span><span style=\"color: #ABB2BF\"> :</span><span style=\"color: #E5C07B\">f64</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">2.0</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">pritnln!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;{}&quot;</span><span style=\"color: #ABB2BF\">,</span><span style=\"color: #E06C75\">a</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">    // 改变 a 绑定的值</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">    // 直接修改对应地址的内存, 因此比遮蔽效率更高</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">a</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">a</span><span style=\"color: #ABB2BF\"> + </span><span style=\"color: #D19A66\">1.0</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;{}&quot;</span><span style=\"color: #ABB2BF\">,</span><span style=\"color: #E06C75\">a</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">    // 通过变量遮蔽重新将a绑定为不可变</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">a</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">a</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">    // // 之前的例子</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">    // // 这是不可以的, 无法将一个 usize 类型绑定给 &amp;str</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">    // let mut spaces = &quot;   &quot;;</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">    // spaces = spaces.len();</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span></code></pre></div><p>虽然变量默认不可变, 但不可以把不可变变量理解为常量. 变量是可能不会发生改变的量, 而常量是永远不会改变的量, 在 Rust 中也有专门的声明方式</p>\n<h1 id=\"常量\"><a href=\"#常量\" class=\"headerlink\" title=\"常量\"></a>常量</h1><p>Rust 有两种常量, 可以在任意作用域声明, 包括全局作用域. 它们都需要显式的类型声明:</p>\n<ul>\n<li><code>const</code>: 不可改变的值, 通常情况下我们使用这种常量</li>\n<li><code>static</code>: 通常称为静态变量, 具有 <code>&#39;static</code> <strong>生命周期</strong>, 从程序启动到程序结束，即在整个程序运行期间都存在, 静态变量是全局的，可以在整个程序的任何地方访问<ul>\n<li>有个特例是字符串字面量 <code>&amp;str</code>. 它可以不经改动就被赋给一个 <code>static</code> 变量, 因为它的类型标记 <code>&amp;&#39;static str</code> 就包含了所要求的生命周期 <code>&#39;static</code>. 其他的引用类型都必须特地声明, 使之拥有 <code>&#39;static</code> 生命周期</li>\n<li><code>static mut</code>: 可变静态变量, 一种特殊的静态变量, 可以在运行时修改其值, 但这不等同于变量, 只能在 <code>unsafe</code> 块中操作</li>\n<li>可变静态变量通常用于在整个程序的执行过程中共享和修改全局状态. 一般情况下, 使用可变静态变量要慎重, 因为全局状态的可变性可能导致并发和竞争条件的问题. 然而有些场景下确实需要在全局范围内维护一些状态, 比如一个全局计数器, 这时可变静态变量是一种合理的选择</li>\n</ul>\n</li>\n</ul>\n<p>在实际开发中, 最好将硬编码的值保存为常量, 这样即使后期需要修改, 也只需要修改一次</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// 全局变量是在在所有其他作用域之外声明的。</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">static</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">LANGUAGE</span><span style=\"color: #ABB2BF\">: &amp;&#39;</span><span style=\"color: #E5C07B\">static</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">str</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #98C379\">&quot;Rust&quot;</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">const</span><span style=\"color: #ABB2BF\">  </span><span style=\"color: #D19A66\">THRESHOLD</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E5C07B\">i32</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">10</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #E06C75\">threshold</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">is_big</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">n</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E5C07B\">i32</span><span style=\"color: #ABB2BF\">) -&gt; </span><span style=\"color: #E5C07B\">bool</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">    // 在一般函数中访问常量</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">n</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">&gt;</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">THRESHOLD</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">main</span><span style=\"color: #ABB2BF\">() {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">n</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">16</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">    // 在 main 函数中访问常量</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;This is {}&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">LANGUAGE</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;The threshold is {}&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">THRESHOLD</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;{} is {}&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">n</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #C678DD\">if</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">is_big</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">n</span><span style=\"color: #ABB2BF\">) { </span><span style=\"color: #98C379\">&quot;big&quot;</span><span style=\"color: #ABB2BF\"> } </span><span style=\"color: #C678DD\">else</span><span style=\"color: #ABB2BF\"> { </span><span style=\"color: #98C379\">&quot;small&quot;</span><span style=\"color: #ABB2BF\"> });</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">    // 报错！不能修改一个 `const` 常量</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #D19A66\">THRESHOLD</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">5</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">    // ^ 注释掉此行</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span></code></pre></div><h1 id=\"语句与表达式\"><a href=\"#语句与表达式\" class=\"headerlink\" title=\"语句与表达式\"></a>语句与表达式</h1><p>语句会执行一些操作但是不会返回一个值, 而表达式会在求值后返回一个值</p>\n<p>对 Rust 而言这种基于语句 (statement) 和表达式(expression) 的方式是非常重要的, 很多其它语言而言往往不区分这两个概念. 基于表达式是函数式语言的重要特征, 表达式总要返回值</p>\n<h2 id=\"语句\"><a href=\"#语句\" class=\"headerlink\" title=\"语句\"></a>语句</h2><div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">a</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">0</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">b</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> (</span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\">,</span><span style=\"color: #D19A66\">2</span><span style=\"color: #ABB2BF\">);</span></span></code></pre></div><p>形如这种, 它们完成了一个具体的操作, 但是并没有返回值，因此是语句</p>\n<p>由于 <code>let</code> 是语句, 因此不能将 <code>let</code> 语句赋值给其它值, 如下形式是错误的</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">b</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> (</span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">a</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">0</span><span style=\"color: #ABB2BF\">);</span></span></code></pre></div><p>但是, <code>let</code> 作为表达式已经是试验功能了, 也许不久的将来, 上面的代码可以被真正编译通过</p>\n<h2 id=\"表达式\"><a href=\"#表达式\" class=\"headerlink\" title=\"表达式\"></a>表达式</h2><p>表达式会进行求值, 然后返回一个值</p>\n<p>表达式可以成为语句的一部分, 例如 <code>let a = 0;</code> 中 <code>0</code> 就是一个表达式, 它所求的值就是 <code>0</code> (有些反直觉, 但是确实是表达式)</p>\n<p>调用函数, 宏都是表达式, 用花括号包裹最终返回一个值的语句块也是表达式. 总之, 有返回值就是表达式:</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">y</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">x</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">3</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">x</span><span style=\"color: #ABB2BF\"> + </span><span style=\"color: #D19A66\">1</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;The value of y is: {}&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">y</span><span style=\"color: #ABB2BF\">);</span></span></code></pre></div><p>如果在上面的 <code>x+1</code> 后面加上一个 <code>;</code> 就表示丢弃返回值, 将会返回元类型 <code>()</code></p>\n<h1 id=\"原生类型\"><a href=\"#原生类型\" class=\"headerlink\" title=\"原生类型\"></a>原生类型</h1><p>在上面的例子中, 我们见到了 <code>i32</code> <code>f64</code> <code>bool</code>等数据类型, 它们是 Rust 的原生类型, Rust 的原生类型有以下几类:</p>\n<ul>\n<li>布尔类型: 只有两个值, <code>true</code> 和 <code>false</code></li>\n<li>字符类型: 表示单个 Unicode 字符, 储存为 <code>u8</code></li>\n<li>数值类型: 有符号整型 (<code>i8</code> <code>i16</code> <code>i32</code> <code>i64</code> <code>i128</code> <code>isize</code>), 无符号整型 (<code>u8</code> <code>u16</code> <code>u32</code> <code>u64</code> <code>u128</code> <code>usize</code>) 和浮点型 (<code>f32</code> <code>f64</code>)</li>\n<li>字符串类型: 其底层为不定长类型 <code>str</code>, 更常用的是字符串切片 <code>&amp;str</code> 和堆分配字符串 <code>String</code>, 其中 <code>String</code> 并不是原生类型, 字符串切片是静态的, 有固定大小且不可改变, 堆分配字符串是可变的</li>\n<li>数组: 有固定大小, 且元素为同一类型, 可表示为 <code>[T; N]</code></li>\n<li>切片: 引用数组的一部分数据且无需复制, 可表示为 <code>&amp;[T]</code></li>\n<li>元组: 有固定大小, 元素类型可不同的有序列表</li>\n<li>指针: 最底层是裸指针 <code>*const T</code> 和 <code>*mut T</code>, 解引用它们是不安全的, 需要放到 <code>unsafe</code> 块里</li>\n<li>函数: 本质是一个函数指针</li>\n<li>元类型: 其唯一的值是 <code>()</code></li>\n</ul>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// 如果没有必要，以后的示例将不会有 fn main() {} 等</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// 下面按顺序展示一下这些类型</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">t</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">true</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">f</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E5C07B\">bool</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">false</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">c</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #98C379\">&#39;c&#39;</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">x</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">100</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">y</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E5C07B\">u32</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">123_456</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">z</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E5C07B\">f64</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">1.2</span><span style=\"color: #ABB2BF\">e+</span><span style=\"color: #D19A66\">3</span><span style=\"color: #ABB2BF\">;</span><span style=\"color: #7F848E; font-style: italic\"> // 浮点数可用科学计数法</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">zero</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">z</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">abs_sub</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #D19A66\">123.4</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">bin</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">0b111_000</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">oct</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">0o1234_5670</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">hex</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">0xf23a9</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">strs</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #98C379\">&quot;Hello world&quot;</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">strs</span><span style=\"color: #ABB2BF\">: &amp;&#39;</span><span style=\"color: #E5C07B\">static</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">str</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #98C379\">&quot;Hello, world!&quot;</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// 这不是原生类型哦</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">mut</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">string</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">strs</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">to_string</span><span style=\"color: #ABB2BF\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">a</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> [</span><span style=\"color: #D19A66\">0</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">2</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">3</span><span style=\"color: #ABB2BF\">];</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">b</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> &amp;</span><span style=\"color: #E06C75\">a</span><span style=\"color: #ABB2BF\">[</span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\">..</span><span style=\"color: #D19A66\">3</span><span style=\"color: #ABB2BF\">];</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">mut</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">ten_zeros</span><span style=\"color: #ABB2BF\">: [</span><span style=\"color: #E5C07B\">i64</span><span style=\"color: #ABB2BF\">;</span><span style=\"color: #D19A66\">10</span><span style=\"color: #ABB2BF\">] </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> [</span><span style=\"color: #D19A66\">0</span><span style=\"color: #ABB2BF\">; </span><span style=\"color: #D19A66\">10</span><span style=\"color: #ABB2BF\">];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">tuple</span><span style=\"color: #ABB2BF\">: (</span><span style=\"color: #E5C07B\">i32</span><span style=\"color: #ABB2BF\">,&amp;</span><span style=\"color: #E5C07B\">str</span><span style=\"color: #ABB2BF\">) </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> (</span><span style=\"color: #D19A66\">50</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #98C379\">&quot;hello&quot;</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> (</span><span style=\"color: #E06C75\">fifty</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">_</span><span style=\"color: #ABB2BF\">) </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">tuple</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">hello</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">tuple</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">x</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">5</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">p</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> &amp;</span><span style=\"color: #E06C75\">x</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">as</span><span style=\"color: #ABB2BF\"> *</span><span style=\"color: #C678DD\">const</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">i32</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">point_at</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">unsafe</span><span style=\"color: #ABB2BF\">{*</span><span style=\"color: #E06C75\">p</span><span style=\"color: #ABB2BF\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">func</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">x</span><span style=\"color: #ABB2BF\">:</span><span style=\"color: #E5C07B\">i32</span><span style=\"color: #ABB2BF\">) -&gt; </span><span style=\"color: #E5C07B\">i32</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">x</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">function</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #61AFEF\">fn</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E5C07B\">i32</span><span style=\"color: #ABB2BF\">) -&gt; </span><span style=\"color: #E5C07B\">i32</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">func</span><span style=\"color: #ABB2BF\">;</span></span></code></pre></div><p>有几点是需要特别注意的:</p>\n<ul>\n<li>数值类型可以使用 <code>_</code> 来增加可读性。</li>\n<li>Rust 支持单字节字符 <code>b&#39;H&#39;</code> 和单字节字符串 <code>b&quot;Hello&quot;</code>, <strong>仅限于 ASCII 字符</strong>. 使用 <code>r#&quot;...&quot;#</code> 标记来表示原始字符串, 不需要对特殊字符进行转义</li>\n<li><code>str</code> 类型很少使用, <code>&amp;str</code> 类型使用的较多, 本质是 <code>[u8]</code> 类型的切片 <code>&amp;[u8]</code>, 是一种大小固定的类型, 之前提到过常见的字符串字面值就是带有 <code>&#39;static</code> 生命周期的 <code>&amp;str</code> 类型</li>\n<li>使用 <code>&amp;</code> 符号将 <code>String</code> 类型转换成 <code>&amp;str</code> 类型很容易, 但由于 <code>String</code> 不是原生类型, 使用 <code>to_string()</code> 方法将 <code>&amp;str</code> 转换到 <code>String</code> 类型 <strong>涉及到高昂的分配内存</strong>, 除非很有必要否则不要这么做</li>\n<li>数组的长度是 <strong>不可变的</strong>, 动态的数组 (<strong>Vec</strong>) 将会在之后提到, 可以通过 <code>vec![]</code> 宏或者 <code>Vec::new()</code> 声明</li>\n<li>元组可以使用 <code>==</code> 和 <code>!=</code> 运算符来判断是否相同</li>\n<li>不多于 32 个元素的数组和不多于 12 个元素的元组在值传递时是自动复制的</li>\n<li>Rust 不提供原生类型之间的隐式转换, 只能使用 <code>as</code> 关键字显式转换。</li>\n<li>可以使用 <code>type</code> 关键字定义某个类型的别名, 并且应该采用驼峰命名法, 这在解决非常长的变量名时非常有用, 最常见的时 <code>impl</code> 块中的 <code>Self</code> 别名</li>\n</ul>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">decimal</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">65.4321_</span><span style=\"color: #E5C07B\">f32</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">integer</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">decimal</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">as</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">u8</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">character</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">integer</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">as</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">char</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">type</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Color</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> (</span><span style=\"color: #E5C07B\">u8</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E5C07B\">u8</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E5C07B\">u8</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">black</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E5C07B\">Color</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> (</span><span style=\"color: #D19A66\">0</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">0</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">0</span><span style=\"color: #ABB2BF\">);</span></span></code></pre></div><h2 id=\"数组与切片\"><a href=\"#数组与切片\" class=\"headerlink\" title=\"数组与切片\"></a>数组与切片</h2><p>这两个在原生类型中稍复杂一点, 下面让我们具体的学习一下这些类型</p>\n<p>数组用于储存相同类型的数据集, <code>[T; N]</code> 表示一个 <code>T</code> 类型, <code>N</code> 个元素的数组, 数组的大小必须固定, 需要在编译的时候确定下来</p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">mut</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">array</span><span style=\"color: #ABB2BF\"> :[</span><span style=\"color: #E5C07B\">i32</span><span style=\"color: #ABB2BF\">; </span><span style=\"color: #D19A66\">3</span><span style=\"color: #ABB2BF\">]</span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> [</span><span style=\"color: #D19A66\">0</span><span style=\"color: #ABB2BF\">; </span><span style=\"color: #D19A66\">3</span><span style=\"color: #ABB2BF\">];</span></span>\n<span class=\"line\"><span style=\"color: #E06C75\">array</span><span style=\"color: #ABB2BF\">[</span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\">] </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #E06C75\">array</span><span style=\"color: #ABB2BF\">[</span><span style=\"color: #D19A66\">2</span><span style=\"color: #ABB2BF\">] </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">2</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;{}&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">array</span><span style=\"color: #ABB2BF\">[</span><span style=\"color: #D19A66\">2</span><span style=\"color: #ABB2BF\">]);</span></span></code></pre></div><p><code>array[1] = 2</code> 的意思是将索引为 <code>1</code> 的元素的值改为 <code>2</code>, 需要注意的是 Rust 就像大多数语言那样, 数组第一个元素的索引为 <strong>0</strong></p>\n<p>切片 (slice) 类型和数组类似, 但其大小在编译时是不确定的. 切片是一个 <strong>双字对象</strong>, 第一个字是一个指向数据的<strong>指针</strong>, 第二个字是切片的 <strong>长度</strong>. 这个 “字” 的宽度和 usize 相同, slice 可以用来借用数组的一部分, 类型标记为 <code>&amp;[T]</code></p>\n<div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">use</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">std</span><span style=\"color: #ABB2BF\">::mem;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// 此函数借用一个 slice</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">analyze_slice</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">slice</span><span style=\"color: #ABB2BF\">: &amp;[</span><span style=\"color: #E5C07B\">i32</span><span style=\"color: #ABB2BF\">]) {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;The first element of this slice is {}&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">slice</span><span style=\"color: #ABB2BF\">[</span><span style=\"color: #D19A66\">0</span><span style=\"color: #ABB2BF\">]);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;The slice has {} element&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">slice</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">len</span><span style=\"color: #ABB2BF\">());</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">main</span><span style=\"color: #ABB2BF\">() {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">xs</span><span style=\"color: #ABB2BF\">: [</span><span style=\"color: #E5C07B\">i32</span><span style=\"color: #ABB2BF\">; </span><span style=\"color: #D19A66\">5</span><span style=\"color: #ABB2BF\">] </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> [</span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">2</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">3</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">4</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">5</span><span style=\"color: #ABB2BF\">];</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">ys</span><span style=\"color: #ABB2BF\">: [</span><span style=\"color: #E5C07B\">i32</span><span style=\"color: #ABB2BF\">; </span><span style=\"color: #D19A66\">500</span><span style=\"color: #ABB2BF\">] </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> [</span><span style=\"color: #D19A66\">0</span><span style=\"color: #ABB2BF\">; </span><span style=\"color: #D19A66\">500</span><span style=\"color: #ABB2BF\">];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;The first element of this array is {}&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">xs</span><span style=\"color: #ABB2BF\">[</span><span style=\"color: #D19A66\">0</span><span style=\"color: #ABB2BF\">]);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;The second element of this array is  {}&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">xs</span><span style=\"color: #ABB2BF\">[</span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\">]);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;The length of this array is {}&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">xs</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">len</span><span style=\"color: #ABB2BF\">());</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">    // 数组是在栈中分配的</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;The array occupied {} bytes&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E5C07B\">mem</span><span style=\"color: #ABB2BF\">::</span><span style=\"color: #61AFEF\">size_of_val</span><span style=\"color: #ABB2BF\">(&amp;</span><span style=\"color: #E06C75\">xs</span><span style=\"color: #ABB2BF\">));</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;borrow the whole array as a slice&quot;</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">    // 直接借用整个数组</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">analyze_slice</span><span style=\"color: #ABB2BF\">(&amp;</span><span style=\"color: #E06C75\">xs</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">    // 也可以指向数组的一部分</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;borrow a section of the array as a slice&quot;</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">analyze_slice</span><span style=\"color: #ABB2BF\">(&amp;</span><span style=\"color: #E06C75\">ys</span><span style=\"color: #ABB2BF\">[</span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\"> .. </span><span style=\"color: #D19A66\">4</span><span style=\"color: #ABB2BF\">]);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">    // 越界的下标会引发致命错误 (panic)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">println!</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;{}&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">xs</span><span style=\"color: #ABB2BF\">[</span><span style=\"color: #D19A66\">5</span><span style=\"color: #ABB2BF\">]);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span></code></pre></div>","feature":false,"text":"对变量进行绑定, 解构与遮蔽. 什么是不可变变量, 为什么变量默认不可变, 与常量的区别是什么. 如何声明常量. 什么是语句和表达式. Rust 底层实现的原生类型有哪些...","permalink":"/post/RustCourse-03","photos":[],"count_time":{"symbolsCount":"7.6k","symbolsTime":"7 mins."},"categories":[{"name":"Course","slug":"Course","count":11,"path":"api/categories/Course.json"}],"tags":[{"name":"Rust","slug":"Rust","count":12,"path":"api/tags/Rust.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">变量</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%98%E9%87%8F%E7%BB%91%E5%AE%9A\"><span class=\"toc-text\">变量绑定</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%98%E9%87%8F%E8%A7%A3%E6%9E%84\"><span class=\"toc-text\">变量解构</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%98%E9%87%8F%E9%81%AE%E8%94%BD-shadowing\"><span class=\"toc-text\">变量遮蔽 (shadowing)</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%BB%98%E8%AE%A4%E4%B8%8D%E5%8F%AF%E5%8F%98%E4%B8%8E%E5%8F%AF%E5%8F%98%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">默认不可变与可变变量</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E9%87%8F\"><span class=\"toc-text\">常量</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%AF%AD%E5%8F%A5%E4%B8%8E%E8%A1%A8%E8%BE%BE%E5%BC%8F\"><span class=\"toc-text\">语句与表达式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">语句</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A1%A8%E8%BE%BE%E5%BC%8F\"><span class=\"toc-text\">表达式</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E7%94%9F%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">原生类型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B0%E7%BB%84%E4%B8%8E%E5%88%87%E7%89%87\"><span class=\"toc-text\">数组与切片</span></a></li></ol></li></ol>","author":{"name":"芳塔洛斯","slug":"blog-author","avatar":"https://fontlos.com/icons/avatar.jpg","link":"/","description":"来人间一趟, 为散步一场<br />待走出岁月, 何样的彼方<br />才配得上这一路的颠沛与时光","socials":{"github":"https://github.com/fontlos","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"https://fontlos.com/icons/bilibili.svg","link":"https://space.bilibili.com/362772872"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"初识 Rust(5) | 流程控制, 模式匹配, 错误处理","uid":"fa6879e34f616dae4cddea50d2178b96","slug":"RustCourse-05","date":"2021-06-08T08:27:33.000Z","updated":"2024-03-06T02:36:48.107Z","comments":true,"path":"api/articles/RustCourse-05.json","keywords":"Programming, Web, Frontend, Backend ,Rust, Blog, Aurora, Fontlos, 芳塔洛斯","cover":"https://fontlos.com/cover/ferris.png","text":"介绍流程控制, 用于构建程序结构. 了解 Match 模式匹配, 如何用 Match 进行错误处理...","permalink":"/post/RustCourse-05","photos":[],"count_time":{"symbolsCount":"17k","symbolsTime":"16 mins."},"categories":[{"name":"Course","slug":"Course","count":11,"path":"api/categories/Course.json"}],"tags":[{"name":"Rust","slug":"Rust","count":12,"path":"api/tags/Rust.json"}],"author":{"name":"芳塔洛斯","slug":"blog-author","avatar":"https://fontlos.com/icons/avatar.jpg","link":"/","description":"来人间一趟, 为散步一场<br />待走出岁月, 何样的彼方<br />才配得上这一路的颠沛与时光","socials":{"github":"https://github.com/fontlos","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"https://fontlos.com/icons/bilibili.svg","link":"https://space.bilibili.com/362772872"}}}},"feature":false},"next_post":{"title":"初识 Rust(4) | 作用域, 所有权机制, 函数与返回值, 复合类型, Module 与可见性","uid":"692ddd8a7f3465e5861ddef99bf86d5f","slug":"RustCourse-04","date":"2021-06-08T04:10:27.000Z","updated":"2024-03-06T02:36:48.107Z","comments":true,"path":"api/articles/RustCourse-04.json","keywords":"Programming, Web, Frontend, Backend ,Rust, Blog, Aurora, Fontlos, 芳塔洛斯","cover":"https://fontlos.com/cover/ferris.png","text":"回顾作用域, 初步了解作用域和堆栈相关知识, 熟悉 Rust 首创的所有权机制. 函数的初步认识. 介绍一下复合类型, 结构体, 枚举. 最后了解一下包, 模块, 以及结构体和枚举内部成员的可见性, 以及如何公开并引入成员...","permalink":"/post/RustCourse-04","photos":[],"count_time":{"symbolsCount":"16k","symbolsTime":"15 mins."},"categories":[{"name":"Course","slug":"Course","count":11,"path":"api/categories/Course.json"}],"tags":[{"name":"Rust","slug":"Rust","count":12,"path":"api/tags/Rust.json"}],"author":{"name":"芳塔洛斯","slug":"blog-author","avatar":"https://fontlos.com/icons/avatar.jpg","link":"/","description":"来人间一趟, 为散步一场<br />待走出岁月, 何样的彼方<br />才配得上这一路的颠沛与时光","socials":{"github":"https://github.com/fontlos","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"https://fontlos.com/icons/bilibili.svg","link":"https://space.bilibili.com/362772872"}}}},"feature":false}}